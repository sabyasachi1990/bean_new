using System;
using AppsWorld.JournalVoucherModule.Entities;
using AppsWorld.JournalVoucherModule.RepositoryPattern;
using AppsWorld.JournalVoucherModule.Service;
using System.Collections.Generic;
using AppsWorld.JournalVoucherModule.Models;
using Repository.Pattern.Infrastructure;
using FrameWork;
using System.Linq;
using AppsWorld.Framework;
using System.Data.Entity.Validation;
using AppsWorld.JournalVoucherModule.Model;
using Domain.Events;
using AppsWorld.JournalVoucherModule.Infra;
using Serilog;
using Logger;
using AppsWorld.CommonModule.Infra;
using AppsWorld.JournalVoucherModule.Service.cs;
using System.Data.SqlClient;
using System.Configuration;
using System.Data;
using Ziraff.FrameWork;
using Ziraff.FrameWork.Logging;
using AppaWorld.Bean;
using AppsWorld.CommonModule.Application;
using System.Net;
using Newtonsoft.Json;
using AppsWorld.JournalVoucherModule.Entities.Models;
using System.Threading.Tasks;

namespace AppsWorld.JournalVoucherModule.Application
{
    public class JournalApplicationService
    {
        private readonly IJournalService _journalService;
        private readonly IJournalDetailService _journalDetailService;
        private readonly ICompanyService _companyService;
        private readonly IAutoNumberCompanyService _autoNumberCompanyService;
        private readonly IAutoNumberService _autoNumberService;
        private readonly IFinancialSettingService _financialSettingService;
        private readonly ICompanySettingService _CompanySettingService;
        private readonly IMultiCurrencySettingService _multiCurrencySettingService;
        private readonly IGSTSettingService _gSTSettingService;
        private readonly ICurrencyService _currencyService;
        private readonly IControlCodeCategoryService _controlCodeCategoryService;
        private readonly IChartOfAccountService _chartOfAccountService;
        private readonly ITaxCodeService _taxCodeService;
        private readonly ICreditNoteApplicationService _creditNoteApplicationService;
        private readonly ICreditNoteApplicationDetailService _creditNoteApplicationDetailService;
        private readonly IInvoiceService _invoiceService;
        private readonly IDoubtfulDebtAllocationService _doubtfulDebtAllocationService;
        private readonly IDoubtfulDebtAllocationDetailService _doubtfulDebtAllocationDetailService;
        private readonly IInvoiceDetailService _invoiceDetailService;
        private readonly ITermsOfPaymentService _termsOfPaymentService;
        private readonly IBeanEntityService _beanEntityService;
        private readonly IDebitNoteService _debitNoteService;
        IJournalVoucherModuleUnitOfWorkAsync _UnitOfWorkAsync;
        private readonly IWithdrawalService _withdrawalService;
        private readonly ICashSaleService _cashSaleService;
        private readonly IBillService _billService;
        private readonly IReceiptService _receiptService;
        private readonly IActivityHistoryService _activityHistoryService;
        private readonly AppsWorld.BankTransferModule.Service.IBankTransferService _bankTransferService;
        private readonly IPaymentService _paymentService;
        private readonly ICreditMemoService _memoService;
        private readonly ICompanyFeatureService _companyFeatureService;
        private readonly IFeatureService _featureService;
        private readonly IPaymentDetailService _paymentDetailService;
        private readonly IReceiptDetailService _receiptDetailService;
        private readonly AppsWorld.CommonModule.Service.IAccountTypeService _accountTypeService;
        private readonly ICategoryService _categoryService;
        private readonly ISubCategoryService _subCategoryService;
        private readonly IOrderService _orderService;
        private readonly AppsWorld.CommonModule.Service.FinancialSettingService _financialService;
        private readonly AppsWorld.CommonModule.Service.IAutoNumberService _autoService;
        private readonly CommonApplicationService _commonApplicationService;
        private readonly ICommonForexService _commonForexService;
        SqlConnection con = null;
        SqlDataReader dr;
        SqlCommand cmd;
        string query = string.Empty;

        public JournalApplicationService(IJournalVoucherModuleUnitOfWorkAsync unitOfWorkAsync, ITaxCodeService taxCodeService, IChartOfAccountService chartOfAccountService, IControlCodeCategoryService controlCodeCategoryService, ICurrencyService currencyService, IMultiCurrencySettingService multiCurrencySettingService, IGSTSettingService gSTSettingService
            , ICompanySettingService CompanySettingService, IFinancialSettingService financialSettingService, IAutoNumberCompanyService autoNumberCompanyService, IAutoNumberService autoNumberService, IJournalDetailService journalDetailService, ICompanyService companyService, IJournalService journalService, ICreditNoteApplicationService creditNoteApplicationService, ICreditNoteApplicationDetailService creditNoteApplicationDetailService, IInvoiceService invoiceService, IDoubtfulDebtAllocationService doubtfulDebtAllocationService, IDoubtfulDebtAllocationDetailService doubtfulDebtAllocationDetailService, IInvoiceDetailService invoiceDetailService, ITermsOfPaymentService termsOfPaymentservice, IBeanEntityService beanEntityService, IDebitNoteService debitNoteService, IWithdrawalService withdrawalService, ICashSaleService cashSaleService, IBillService billService, IReceiptService receiptService, IActivityHistoryService activityHistoryService, AppsWorld.BankTransferModule.Service.IBankTransferService bankTransferService, IPaymentService paymentService, ICreditMemoService memoService, ICompanyFeatureService companyFeatureService, IFeatureService featureService, IPaymentDetailService paymentDetailService, IReceiptDetailService receiptDetailService, AppsWorld.CommonModule.Service.IAccountTypeService accountTypeService, ICategoryService categoryService, ISubCategoryService subCategoryService, IOrderService orderServiceService, AppsWorld.CommonModule.Service.FinancialSettingService financialService, AppsWorld.CommonModule.Service.IAutoNumberService autoService, CommonApplicationService commonApplicationService, ICommonForexService commonForexService)
        {
            _journalService = journalService;
            _UnitOfWorkAsync = unitOfWorkAsync;
            _companyService = companyService;
            _journalDetailService = journalDetailService;
            _autoNumberService = autoNumberService;
            _financialSettingService = financialSettingService;
            _autoNumberCompanyService = autoNumberCompanyService;
            _autoNumberService = autoNumberService;
            _gSTSettingService = gSTSettingService;
            _multiCurrencySettingService = multiCurrencySettingService;
            _CompanySettingService = CompanySettingService;
            _currencyService = currencyService;
            _controlCodeCategoryService = controlCodeCategoryService;
            _chartOfAccountService = chartOfAccountService;
            _taxCodeService = taxCodeService;
            _creditNoteApplicationService = creditNoteApplicationService;
            _creditNoteApplicationDetailService = creditNoteApplicationDetailService;
            _invoiceService = invoiceService;
            _doubtfulDebtAllocationService = doubtfulDebtAllocationService;
            _doubtfulDebtAllocationDetailService = doubtfulDebtAllocationDetailService;
            _invoiceDetailService = invoiceDetailService;
            _termsOfPaymentService = termsOfPaymentservice;
            _beanEntityService = beanEntityService;
            _debitNoteService = debitNoteService;
            _withdrawalService = withdrawalService;
            _cashSaleService = cashSaleService;
            _billService = billService;
            _receiptService = receiptService;
            _activityHistoryService = activityHistoryService;
            _bankTransferService = bankTransferService;
            this._paymentService = paymentService;
            this._memoService = memoService;
            this._companyFeatureService = companyFeatureService;
            this._featureService = featureService;
            this._paymentDetailService = paymentDetailService;
            this._receiptDetailService = receiptDetailService;
            this._accountTypeService = accountTypeService;
            this._categoryService = categoryService;
            _subCategoryService = subCategoryService;
            _orderService = orderServiceService;
            this._financialService = financialService;
            this._autoService = autoService;
            this._commonApplicationService = commonApplicationService;
            this._commonForexService = commonForexService;

        }
        #region Grid Calls
        public List<JournalModel> GetAllPrakeds(long companyId)
        {
            List<JournalModel> lstJournalModel = new List<JournalModel>();
            var journals = _journalService.GetaAllJournalParkedById(companyId).ToList();
            foreach (var journal in journals)
            {
                JournalModel journalModel = new JournalModel();
                FillJournalModel(journalModel, journal);
                lstJournalModel.Add(journalModel);
            }
            return lstJournalModel;
        }
        public List<JournalModel> GetAllPosteds(long companyId)
        {
            List<JournalModel> lstJournalModel = new List<JournalModel>();
            var journals = _journalService.GetAllJVPostedByCompanyId(companyId);
            foreach (var journal in journals)
            {
                JournalModel journalModel = new JournalModel();
                FillJournalModel(journalModel, journal);
                lstJournalModel.Add(journalModel);
            }
            return lstJournalModel;
        }
        public List<JournalModel> GetAllAutoReversals(long companyId)
        {
            List<JournalModel> lstJournalModel = new List<JournalModel>();
            var journals = _journalService.GetAllAutoReversalByid(companyId);
            foreach (var journal in journals)
            {
                JournalModel journalModel = new JournalModel();
                FillJournalModel(journalModel, journal);
                lstJournalModel.Add(journalModel);
            }
            return lstJournalModel;
        }
        public List<JournalModel> GetAllRecurrings(long companyId)
        {
            List<JournalModel> lstJournalModel = new List<JournalModel>();
            var journals = _journalService.GetAllRecurringsById(companyId);
            foreach (var journal in journals)
            {
                JournalModel journalModel = new JournalModel();
                FillJournalModel(journalModel, journal);
                lstJournalModel.Add(journalModel);
            }
            return lstJournalModel;
        }
        public List<JournalModel> GetAllVoids(long companyId)
        {
            List<JournalModel> lstJournalModel = new List<JournalModel>();
            var journals = _journalService.GetAllJVVoidByCompanyId(companyId);
            foreach (var journal in journals)
            {
                JournalModel journalModel = new JournalModel();
                FillJournalModel(journalModel, journal);
                lstJournalModel.Add(journalModel);
            }
            return lstJournalModel;
        }
        public List<Journal> GetAllJournals()
        {
            return _journalService.GetAllJournals();
        }

        #endregion

        #region Create Call and lookup call
        public async Task<JournalModel> CreateJournal(Guid id, long companyId, string documentState, string connectionString)
        {
            JournalModel journalModel = new JournalModel();
            FinancialSetting financSettings = await _financialSettingService.GetFinancialSettingAsync(companyId);
            if (financSettings == null)
            {
                throw new Exception(CommonConstant.The_Financial_setting_should_be_activated);
            }
            journalModel.FinancialPeriodLockStartDate = financSettings.PeriodLockDate;
            journalModel.FinancialPeriodLockEndDate = financSettings.PeriodEndDate;


            Journal journal = await _journalService.GetJournalByIdAndCid(id, companyId);
            bool? reverse = await _journalService.GetIsLockedByReverseParentId(id, companyId);

            if (journal == null)
            {
                Journal lastjournal = await _journalService.GetLastJournal(companyId, documentState == DocSubTypeConstants.Recurring ? DocSubTypeConstants.Recurring : JournalState.Posted);
                journalModel.Id = Guid.NewGuid();
                journalModel.BaseCurrency = financSettings.BaseCurrency;
                journalModel.DocCurrency = journalModel.BaseCurrency;
                journalModel.CreatedDate = DateTime.UtcNow;
                journalModel.CompanyId = companyId;

                journalModel.DocDate = lastjournal == null ? DateTime.Now : lastjournal.DocDate;
                journalModel.IsBaseCurrencyJV = false;

                if (documentState == DocSubTypeConstants.Recurring)
                {
                    journalModel.DocNo = _autoService.GetAutonumberInAddMode(companyId, "Recurring Journal", connectionString);
                    journalModel.IsDocNoEditable = await _autoNumberService.GetIsEditValueAsync(companyId, "Recurring Journal");
                }
                else
                {
                    journalModel.IsDocNoEditable = await _autoNumberService.GetIsEditValueAsync(companyId, DocTypeConstants.JournalVocher);
                    if (journalModel.IsDocNoEditable == true)
                    {
                        journalModel.DocNo = _autoService.GetAutonumber(companyId, DocTypeConstants.JournalVocher, connectionString);
                    }
                }

                journalModel.DueDate = DateTime.UtcNow;
                journalModel.PostingDate = DateTime.UtcNow;
                journalModel.DocumentState = JournalState.Posted;
                journalModel.Status = AppsWorld.Framework.RecordStatusEnum.Active;


                journalModel.IsGstSettings = false;
                journalModel.IsBaseCurrencyRateChanged = false;
                journalModel.IsGSTCurrencyRateChanged = false;
            }
            else
            {
                FillJournalModel(journalModel, journal);
                journalModel.reverseLocked = true ? reverse == true : false;
                journalModel.RecurringJournalId = journal.RecurringJournalId;
                journalModel.IsDocNoEditable = await _autoNumberService.GetIsEditValueAsync(companyId, DocTypeConstants.JournalVocher);
                journalModel.EndDate = journal.EndDate;
                journalModel.Counter = journal.Counter;
                journalModel.IsPostChecked = journal.IsPostChecked;
                journalModel.IsCopy = journal.IsCopy;
                journalModel.DocumentId = journal.DocumentId;
                journalModel.IsBaseCurrencyJV = journal.IsBaseCurrencyJV;
                journalModel.DocumentState = (journal.ClearingStatus != null && journal.ClearingStatus != string.Empty) ? journal.ClearingStatus : journal.DocumentState;
                journalModel.InternalState = journal.InternalState;
            }

            return journalModel;
        }
        public DocumentVoidModel CreateJournalVoid(Guid id, long companyId)
        {
            FinancialSetting financSettings = _financialSettingService.GetFinancialSetting(companyId);
            if (financSettings == null)
                throw new Exception(CommonConstant.The_Financial_setting_should_be_activated);

            List<Journal> journal = _journalService.GetJVByCompanyId(id, companyId);
            if (journal == null)
                throw new Exception(JournalConstant.Invalid_journal);

            DocumentVoidModel DVModel = new DocumentVoidModel();
            DVModel.CompanyId = companyId;
            if (journal != null)
                DVModel.Id = id;
            return DVModel;
        }
        public RecurringLU GetFrequencyLUs(Guid journalId, long companyId)
        {
            RecurringLU recurringLU = new RecurringLU();

            recurringLU.FrequencyLU = _controlCodeCategoryService.GetByCategoryCodeCategory(companyId, ControlCodeConstants.Control_Codes_Frequency);

            return recurringLU;
        }
        public JournalDetailModel GetByDetailId(Guid Id, Guid journalId)
        {
            JournalDetailModel journalDetailModel = new JournalDetailModel();
            JournalDetail jvDetail = new JournalDetail();
            jvDetail = _journalDetailService.GetJDdetailJournalId(Id, journalId);
            if (jvDetail != null)
            {
                FillJournalDetailToModel(journalDetailModel, jvDetail);
            }
            else
            {
                journalDetailModel.Id = Id;
            }
            return journalDetailModel;

        }
        public async Task<JournalLLU> GetAllJournalLUs(Guid journalId, long companyId, string userName, string docSubType)
        {
            Journal lastJournal = null;
            DateTime date;
            if (docSubType == DocSubTypeConstants.Recurring)
                lastJournal = await _journalService.GetJournalDateBySubType(companyId, docSubType);
            else
                lastJournal = await _journalService.GetCompanyId(companyId);
            Journal journal = await _journalService.GetAllJournalByIdAsync(journalId, companyId);
            date = journal == null ? lastJournal == null ? DateTime.Now : lastJournal.DocDate : journal.DocDate;

            JournalLLU journalLu = new JournalLLU();
            journalLu.CompanyId = companyId;
            if (journal != null)
            {
                string currencyCode = journal.DocCurrency;
                journalLu.CurrencyLU = await _currencyService.GetByCurrenciesEdit(companyId, currencyCode, ControlCodeConstants.Currency_DefaultCode);
            }
            else
            {
                journalLu.CurrencyLU = await _currencyService.GetByCurrencies(companyId, ControlCodeConstants.Currency_DefaultCode);
            }
            journalLu.FrequencyLU = await _controlCodeCategoryService.GetByCategoryCodeCategoryAsync(companyId, ControlCodeConstants.Control_Codes_Frequency);

            long comp = journal == null ? 0 : journal.CompanyId;
            List<Company> lstCompanies = await _companyService.GetCompany(companyId, comp, userName);

            journalLu.SubsideryCompanyLU =
                lstCompanies.Select(x => new LookUpCompany<string>()
                {
                    Id = x.Id,
                    Name = x.Name,
                    ShortName = x.ShortName,
                    isGstActivated = x.IsGstSetting

                }).OrderBy(x => x.ShortName).ToList();



            List<COALookup<string>> lstEditCoa = null;
            List<TaxCodeLookUp<string>> lstEditTax = null;
            List<TaxCode> allTaxCodes;
            List<string> coaName = new List<string> { COANameConstants.System };
            List<AppsWorld.CommonModule.Entities.AccountType> accType = await _accountTypeService.GetAllAccountTypeNameByCompanyIdAysnc(companyId, coaName);
            List<COALookup<string>> lstCoas = accType.SelectMany(c => c.ChartOfAccounts.Where(z => z.Status == RecordStatusEnum.Active && z.IsRealCOA == true).Select(x => new COALookup<string>()
            {
                Name = x.Name,
                Id = x.Id,
                RecOrder = x.RecOrder,
                IsAllowDisAllow = x.DisAllowable,
                IsPLAccount = x.Category == "Income Statement",
                Class = x.Class,
                Status = x.Status,
                IsTaxCodeNotEditable = (x.Class == "Assets" || x.Class == "Liabilities" || x.Class == "Equity"),
                IsBank = x.IsBank,
                SubsidaryCompanyId = x.SubsidaryCompanyId,
                Currency = x.Currency
            }).Where(a => a.Name != COANameConstants.AccountsReceivables && a.Name != COANameConstants.OtherReceivables && a.Name != COANameConstants.AccountsPayable && a.Name != COANameConstants.OtherPayables).OrderBy(d => d.Name)).ToList();
            journalLu.ChartOfAccountLU = lstCoas.OrderBy(s => s.Name).ToList();
            if (journal != null && journal.ReverseParentId != null)
            {
                date = await _journalService.GetReversalDate(journal.ReverseParentId != null ? journal.ReverseParentId : journal.Id, journal.CompanyId);
            }
            if (docSubType == null)
                allTaxCodes = await _taxCodeService.GetTaxCodes(companyId);
            else
                allTaxCodes = await _taxCodeService.GetTaxAllCodes(companyId, date);
            if (allTaxCodes.Any())
                journalLu.TaxCodeLU = allTaxCodes.Where(c => c.Status == RecordStatusEnum.Active).Select(x => new TaxCodeLookUp<string>()
                {
                    Id = x.Id,
                    Code = x.Code,
                    Name = x.Name,
                    TaxRate = x.TaxRate,
                    IsTaxAmountEditable = x.TaxRate != 0 && x.TaxRate != null,
                    TaxType = x.TaxType,
                    Status = x.Status,
                    IsApplicable = x.IsApplicable,
                    TaxIdCode = x.Code != "NA" ? x.Code + "-" + x.TaxRate + (x.TaxRate != null ? "%" : "NA") : x.Code
                }).OrderBy(c => c.Code).ToList();

            if (journal != null && journal.JournalDetails.Count > 0)
            {

                List<long> CoaIds = journal.JournalDetails.Select(c => c.COAId).ToList();
                if (journalLu.ChartOfAccountLU.Any())
                    CoaIds = CoaIds.Except(journalLu.ChartOfAccountLU.Select(x => x.Id)).ToList();
                List<long?> taxIds = journal.JournalDetails.Select(x => x.TaxId).ToList();
                if (journalLu.TaxCodeLU != null && journalLu.TaxCodeLU.Any())
                    taxIds = taxIds.Except(journalLu.TaxCodeLU.Select(d => d.Id)).ToList();
                if (CoaIds.Any())
                {

                    lstEditCoa = accType.SelectMany(c => c.ChartOfAccounts.Where(x => CoaIds.Contains(x.Id)).Select(x => new COALookup<string>()
                    {
                        Name = x.Name,
                        Id = x.Id,
                        RecOrder = x.RecOrder,
                        IsAllowDisAllow = x.DisAllowable,
                        IsPLAccount = x.Category == "Income Statement",
                        Class = x.Class,
                        Status = x.Status,
                        IsTaxCodeNotEditable = (x.Class == "Assets" || x.Class == "Liabilities" || x.Class == "Equity"),
                        IsBank = x.IsBank,
                        SubsidaryCompanyId = x.SubsidaryCompanyId,
                        Currency = x.Currency
                    }).OrderBy(d => d.Name)).ToList();
                    journalLu.ChartOfAccountLU.AddRange(lstEditCoa);
                }
                if (journal.IsGstSettings == true && taxIds.Any())
                {
                    lstEditTax = allTaxCodes.Where(c => taxIds.Contains(c.Id)).Select(x => new TaxCodeLookUp<string>()
                    {
                        Id = x.Id,
                        Code = x.Code,
                        Name = x.Name,
                        TaxRate = x.TaxRate,
                        IsTaxAmountEditable = x.TaxRate != 0 && x.TaxRate != null,
                        TaxType = x.TaxType,
                        Status = x.Status,
                        IsApplicable = x.IsApplicable,
                        TaxIdCode = x.Code != "NA" ? x.Code + "-" + x.TaxRate + (x.TaxRate != null ? "%" : "NA") /*+ "(" + x.TaxType[0] + ")"*/ : x.Code
                    }).OrderBy(c => c.Code).ToList();
                    if (journalLu.TaxCodeLU != null)
                    {
                        journalLu.TaxCodeLU.AddRange(lstEditTax);
                        journalLu.TaxCodeLU = journalLu.TaxCodeLU.OrderBy(c => c.Code).ToList();
                    }
                }

            }
            return journalLu;
        }



        #endregion

        #region Save Calls
        public Journal SaveJournal(JournalModel Tobject, string connectionString)
        {
            bool isAdd = false;
            bool isDocAdd = false;
            try
            {
                var AdditionalInfo = new Dictionary<string, object>();
                AdditionalInfo.Add("Data", JsonConvert.SerializeObject(Tobject));
                Ziraff.FrameWork.Logging.LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, "ObjectSave", AdditionalInfo);
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_SaveJournal_method);
                bool isUpdate = false;
                string _errors = CommonValidation.ValidateObject(Tobject);
                if (!string.IsNullOrEmpty(_errors))
                {
                    throw new Exception(_errors);
                }
                if (Tobject.DocDate == null)
                {
                    throw new Exception(CommonConstant.Invalid_Document_Date);
                }
                string documentState = null;
                if (Tobject.IsAutoReversalJournal == true && Tobject.DocumentState != JournalState.Posted)
                {
                    documentState = JournalState.Parked;
                }
                else
                {
                    documentState = JournalState.Posted;
                }
                if (Tobject.IsDocNoEditable == true)
                    if (IsDocumentNumberExists(DocTypeConstants.JournalVocher, Tobject.DocNo, Tobject.Id, Tobject.CompanyId, documentState))
                    {
                        throw new Exception(CommonConstant.Document_number_already_exist);
                    }
                if (Tobject.JournalDetailModels == null || Tobject.JournalDetailModels.Count == 0)
                {
                    throw new Exception(CommonConstant.Atleast_one_line_Item_is_required);
                }
                else
                {
                    int itemCount = Tobject.JournalDetailModels.Where(a => a.RecordStatus != "Deleted").Count();
                    if (itemCount == 0)
                    {
                        throw new Exception(CommonConstant.Atleast_one_line_Item_is_required);
                    }
                }
                if (!_financialSettingService.ValidateYearEndLockDate(Tobject.DocDate, Tobject.CompanyId))
                {
                    throw new Exception(CommonConstant.Transaction_date_is_in_closed_financial_period_and_cannot_be_posted);
                }
                if (!_financialSettingService.ValidateFinancialOpenPeriod(Tobject.DocDate, Tobject.CompanyId))
                {
                    if (String.IsNullOrEmpty(Tobject.PeriodLockPassword))
                    {
                        throw new Exception(CommonConstant.Transaction_date_is_in_locked_accounting_period_and_cannot_be_posted);
                    }
                    else if (!_financialSettingService.ValidateFinancialLockPeriodPassword(Tobject.DocDate, Tobject.PeriodLockPassword, Tobject.CompanyId))
                    {
                        throw new Exception(CommonConstant.Invalid_Financial_Period_Lock_Password);
                    }
                }
                ChartOfAccount gstAccount = _chartOfAccountService.GetByName(COANameConstants.TaxPayableGST, Tobject.CompanyId);
                Journal _journal = _journalService.GetByAllJournal(Tobject.Id);
                string oldDocumentNo = string.Empty;
                if (_journal != null)
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_of_Journal_and_check_Journal_is_null_or_not);
                    isUpdate = true;
                    oldDocumentNo = _journal.DocNo;
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.InsertJournal_method_came);
                    InsertJournal(_journal, Tobject);
                    _journal.IsCopy = Tobject.IsCopy;
                    _journal.IsBaseCurrencyJV = Tobject.IsBaseCurrencyJV;
                    _journal.DocType = Tobject.DocType;
                    _journal.DocSubType = Tobject.DocSubType;
                    if (Tobject.IsPosted && Tobject.DocSubType != DocTypeConstants.Revaluation)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_in_if_condition_and_check_Tobject_IsPosted);
                        _journal.DocumentState = JournalState.Posted;
                        _journal.IsAutoReversalJournal = false;
                        _journal.CreatedDate = DateTime.UtcNow;
                        _journal.ModifiedBy = null;
                        _journal.ModifiedDate = null;
                        _journal.UserCreated = "System";
                        _journal.DocSubType = Tobject.DocSubType;
                        _journal.CreationType = Tobject.CreationType;
                        _journal.DocumentState = JournalState.Posted;
                        _journal.SystemReferenceNo = _journal.DocNo;
                        _journal.ActualSysRefNo = _journal.SystemReferenceNo;
                        _journal.DocNo = _journal.SystemReferenceNo;
                        //for Parked to Posted record--- to update Last Posted date
                        Journal recJournal = _journalService.GetRecurringJournal(Tobject.CompanyId, _journal.RecurringJournalId);
                        if (recJournal != null)
                        {
                            recJournal.LastPosted = _journal.DocDate;
                            _journalService.Update(recJournal);
                        }
                    }
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_InsertJournal_method);
                    if (!Tobject.IsPosted)
                    {
                        _journal.ModifiedBy = Tobject.ModifiedBy;
                        _journal.ModifiedDate = DateTime.UtcNow;
                    }
                    //for Analytics Purpose
                    _journal.ObjectState = ObjectState.Modified;
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.UpdateJournalDetails_method_came);
                    List<Guid> newAddedJdIds = new List<Guid>();
                    int? count = 0;
                    UpdateJournalDetails(Tobject, _journal, newAddedJdIds, out count);
                    #region UpdateReversalEntry

                    if (Tobject.IsAutoReversalJournal == true)
                    {
                        Journal _reverse = _journalService.GetAllReversal(Tobject.Id);
                        if (_reverse != null)
                        {
                            if (!_financialSettingService.ValidateYearEndLockDate(Convert.ToDateTime(Tobject.DocDate), Tobject.CompanyId))
                            {
                                throw new Exception(CommonConstant.Transaction_date_is_in_closed_financial_period_and_cannot_be_posted);
                            }
                            if (!_financialSettingService.ValidateFinancialOpenPeriod(Convert.ToDateTime(Tobject.DocDate), Tobject.CompanyId))
                            {
                                if (String.IsNullOrEmpty(Tobject.PeriodLockPassword))
                                {
                                    throw new Exception(CommonConstant.Transaction_date_is_in_locked_accounting_period_and_cannot_be_posted);
                                }
                                else if (!_financialSettingService.ValidateFinancialLockPeriodPassword(Convert.ToDateTime(Tobject.DocDate), Tobject.PeriodLockPassword, Tobject.CompanyId))
                                {
                                    throw new Exception(CommonConstant.Invalid_Financial_Period_Lock_Password);
                                }
                            }
                        }
                        UpdateReversalDetail(Tobject, _reverse, newAddedJdIds, out count);

                        if (Tobject.IsGstSettings == true)
                        {
                            List<JournalDetail> lstGstDetail = _reverse.JournalDetails.Where(c => c.IsTax == true).ToList();
                            if (lstGstDetail.Any())
                            {
                                foreach (var gstItem in lstGstDetail)
                                {
                                    gstItem.ObjectState = ObjectState.Deleted;
                                }
                            }
                            AddGSTLineItem(Tobject, _reverse, newAddedJdIds);
                        }

                        long roundingCOA = _chartOfAccountService.GetByNameAndCompanyId(/*"Rounding Account"*/COANameConstants.Rounding, Tobject.CompanyId);
                        JournalDetail isDetailExist = (roundingCOA != null || roundingCOA != 0) ? _journalDetailService.Query(a => a.JournalId == _reverse.Id && a.COAId == roundingCOA).Select().FirstOrDefault() : null;
                        if (isDetailExist != null)
                            isDetailExist.ObjectState = ObjectState.Deleted;

                        decimal? reversebaseDebitTotal = _reverse.JournalDetails.Where(a => a.ObjectState != ObjectState.Deleted).Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
                        decimal? reversebaseCreditTotal = _reverse.JournalDetails.Where(a => a.ObjectState != ObjectState.Deleted).Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
                        if (reversebaseDebitTotal != reversebaseCreditTotal)
                        {
                            bool? isCredit = null;
                            SaveBalancingBaseDebitandBaseCredit1(reversebaseDebitTotal, reversebaseCreditTotal, Tobject, _reverse.Id, _reverse.DocNo, _reverse.DocSubType, out isCredit, isUpdate, count);

                            if (isCredit == true)
                            {
                                _reverse.GrandBaseDebitTotal = reversebaseDebitTotal;
                                _reverse.GrandBaseCreditTotal = reversebaseCreditTotal + .01m;
                            }
                            else
                            {
                                _reverse.GrandBaseDebitTotal = reversebaseDebitTotal + .01m;
                                _reverse.GrandBaseCreditTotal = reversebaseCreditTotal;
                            }
                        }
                        else
                        {
                            _reverse.GrandBaseDebitTotal = reversebaseDebitTotal;
                            _reverse.GrandBaseCreditTotal = reversebaseCreditTotal;
                        }
                        _journalService.Update(_reverse);
                    }

                    #endregion
                    //Modified By Pradhan
                    if (Tobject.DocSubType == DocTypeConstants.Revaluation && Tobject.IsPosted)
                    {
                        _journal.GrandDocDebitTotal = Math.Round((decimal)Tobject.JournalDetailModels.Sum(x => x.DocDebit), 2);
                        _journal.GrandDocCreditTotal = Math.Round((decimal)Tobject.JournalDetailModels.Sum(x => x.DocCredit), 2);
                        _journal.GrandBaseCreditTotal = Math.Round((decimal)Tobject.JournalDetailModels.Sum(x => x.BaseCredit), 2);
                        _journal.GrandBaseDebitTotal = Math.Round((decimal)Tobject.JournalDetailModels.Sum(x => x.BaseDebit), 2);
                        var journalUpdate = _journalService.GetJournalReferenceNo(Tobject.ReverseParentRefId, Tobject.CompanyId);
                        if (journalUpdate.Any())
                        {
                            var parkedRecord = journalUpdate.FirstOrDefault(c => c.DocumentState == "Posted");
                            if (parkedRecord != null)
                            {
                                parkedRecord.DocumentState = "Reversed";
                                parkedRecord.IsAutoReversalJournal = true;
                                parkedRecord.ObjectState = ObjectState.Modified;
                                _journalService.Update(parkedRecord);
                            }
                        }
                    }
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_UpdateJournalDetails_method);
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.UpdateJournalGSTDetails_method_came);

                    if (Tobject.IsGstSettings == true)
                    {
                        List<JournalDetail> lstGstDetail = _journal.JournalDetails.Where(c => c.IsTax == true).ToList();
                        if (lstGstDetail.Any())
                        {
                            foreach (var gstItem in lstGstDetail)
                            {
                                gstItem.ObjectState = ObjectState.Deleted;
                            }
                        }
                        AddGSTLineItem(Tobject, _journal, newAddedJdIds);
                    }
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_UpdateJournalGSTDetails_method);
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Calling_Update_method_through_JournalService);

                    //check wheather rounding account is there or not
                    long roundingCOAID = _chartOfAccountService.GetByNameAndCompanyId(/*"Rounding Account"*/COANameConstants.Rounding, Tobject.CompanyId);
                    JournalDetail isDetailExists = (roundingCOAID != null || roundingCOAID != 0) ? _journalDetailService.Query(a => a.JournalId == _journal.Id && a.COAId == roundingCOAID).Select().FirstOrDefault() : null;
                    if (isDetailExists != null)
                        isDetailExists.ObjectState = ObjectState.Deleted;

                    //need to check wheather BaseDebit and BaseCredit is equal or not for lineItem
                    decimal? baseDebitTotal = _journal.JournalDetails.Where(a => a.ObjectState != ObjectState.Deleted).Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
                    decimal? baseCreditTotal = _journal.JournalDetails.Where(a => a.ObjectState != ObjectState.Deleted).Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
                    if (baseDebitTotal != baseCreditTotal)
                    {
                        bool? isCredit = null;
                        SaveBalancingBaseDebitandBaseCredit1(baseDebitTotal, baseCreditTotal, Tobject, _journal.Id, _journal.DocNo, _journal.DocSubType, out isCredit, isUpdate, count);
                        if (isCredit == true)
                        {
                            _journal.GrandBaseDebitTotal = baseDebitTotal;
                            _journal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                        }
                        else
                        {
                            _journal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                            _journal.GrandBaseCreditTotal = baseCreditTotal;
                        }
                    }
                    else
                    {
                        _journal.GrandBaseDebitTotal = baseDebitTotal;
                        _journal.GrandBaseCreditTotal = baseCreditTotal;
                    }
                    _journalService.Update(_journal);
                }
                else
                {
                    isAdd = true;
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_else_condition_of_journal);
                    int? RecOrder = 0;
                    _journal = new Journal();
                    InsertJournal(_journal, Tobject);
                    _journal.Id = Guid.NewGuid();

                    //for Analytics Purpose
                    _journal.DocumentId = _journal.Id;

                    _journal.Status = AppsWorld.Framework.RecordStatusEnum.Active;
                    _journal.RecurringJournalId = Tobject.IsRecurringJournal == true ? _journal.Id : Tobject.RecurringJournalId;
                    _journal.UserCreated = Tobject.UserCreated;
                    _journal.CreatedDate = DateTime.UtcNow;
                    _journal.ObjectState = ObjectState.Added;
                    _journal.ModifiedBy = null;
                    _journal.ModifiedDate = null;
                    _journal.DocSubType = Tobject.IsAutoReversalJournal == true ? DocSubTypeConstants.Auto_Reversal : DocTypeConstants.General;

                    _journal.DocumentState = Tobject.IsCopy == true ? JournalState.Posted : Tobject.DocumentState;
                    _journal.IsBaseCurrencyJV = Tobject.IsBaseCurrencyJV;
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Get_Company_through_GetById_method);

                    _journal.SystemReferenceNo = Tobject.IsDocNoEditable != true ? _autoService.GetAutonumber(Tobject.CompanyId, DocTypeConstants.JournalVocher, connectionString) : Tobject.DocNo;
                    _journal.ActualSysRefNo = _journal.SystemReferenceNo;
                    isDocAdd = true;
                    _journal.DocNo = _journal.SystemReferenceNo;

                    List<JournalDetail> lstDetails = new List<JournalDetail>();

                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Get_SystemReferenceNo_through_GenerateAutoNumberForType_method);

                    //shortName = company.ShortName;
                    if (Tobject.JournalDetailModels.Count > 0 || Tobject.JournalDetailModels != null)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_JournalDetailModels_count_O_or_nul);

                        foreach (JournalDetailModel detail in Tobject.JournalDetailModels.Where(c => c.RecordStatus != "Deleted").ToList())
                        {
                            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_foreach_loop_of_JournalDetailModels);
                            JournalDetail journalDetail = new JournalDetail();
                            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.FillJournalDetailmodel_method_came);
                            FillJournalDetailmodel(journalDetail, detail, _journal);
                            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_FillJournalDetailmodel_method);
                            journalDetail.JournalId = _journal.Id;
                            journalDetail.ServiceCompanyId = Tobject.ServiceCompanyId;
                            journalDetail.DocDate = Tobject.DocDate.Date;
                            journalDetail.SystemRefNo = _journal.SystemReferenceNo;
                            journalDetail.DocNo = _journal.DocNo;
                            journalDetail.DocumentDetailId = new Guid();
                            journalDetail.DocType = DocTypeConstants.JournalVocher;
                            journalDetail.DocSubType = Tobject.IsAutoReversalJournal == true ? DocSubTypeConstants.Auto_Reversal : _journal.DocSubType;
                            journalDetail.ObjectState = ObjectState.Added;
                            journalDetail.RecOrder = ++RecOrder;
                            journalDetail.BaseCurrency = Tobject.BaseCurrency;
                            journalDetail.DocCurrency = Tobject.DocCurrency;
                            _journalDetailService.Insert(journalDetail);
                            lstDetails.Add(journalDetail);
                            if (Tobject.IsGstSettings == true && journalDetail.TaxRate != null)
                            {
                                JournalDetail journalGstDetail = new JournalDetail();
                                journalGstDetail.Id = Guid.NewGuid();
                                FillJvGstDetail(_journal, journalGstDetail, detail);
                                journalGstDetail.RecOrder = detail.RecOrder;
                                if (!Tobject.ISMultiCurrency == true)
                                {
                                    journalGstDetail.BaseDebit = journalGstDetail.DocDebit;
                                    journalGstDetail.BaseCredit = journalGstDetail.DocCredit;
                                    journalGstDetail.BaseTaxDebit = journalGstDetail.DocTaxDebit;
                                    journalGstDetail.BaseTaxCredit = journalGstDetail.DocTaxCredit;
                                }
                                journalGstDetail.DocumentDetailId = journalDetail.Id;
                                if (gstAccount != null)
                                {
                                    journalGstDetail.AccountName = gstAccount.Name;
                                    journalGstDetail.COAId = gstAccount.Id;
                                }
                                journalGstDetail.ObjectState = ObjectState.Added;
                                _journalDetailService.Insert(journalGstDetail);
                                lstDetails.Add(journalGstDetail);
                            }
                        }
                        decimal? baseDebitTotal = lstDetails.Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
                        decimal? baseCreditTotal = lstDetails.Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
                        if (baseDebitTotal != baseCreditTotal)
                        {
                            bool? isCredit = null;
                            SaveBalancingBaseDebitandBaseCredit(baseDebitTotal, baseCreditTotal, Tobject, _journal.Id, _journal.DocNo, _journal.DocSubType, out isCredit, isUpdate);
                            if (isCredit == true)
                            {
                                _journal.GrandBaseDebitTotal = baseDebitTotal;
                                _journal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                            }
                            else
                            {
                                _journal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                                _journal.GrandBaseCreditTotal = baseCreditTotal;
                            }
                        }
                        else
                        {
                            _journal.GrandBaseDebitTotal = baseDebitTotal;
                            _journal.GrandBaseCreditTotal = baseCreditTotal;
                        }
                    }
                    _journalService.Insert(_journal);
                }
                try
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entering_into_try_block_and_execute_the_SaveChanges_method);

                    if (Tobject.IsAutoReversalJournal == true && isAdd)
                    {
                        _UnitOfWorkAsync.SaveChanges();
                        _journal.DocSubType = DocSubTypeConstants.Auto_Reversal;
                        _journal.DocumentState = JournalState.Posted;
                        _journal.CreationType = "Manual";
                        SaveAutoReversalJournal(Tobject, _journal, gstAccount, connectionString);
                    }
                    else
                        _UnitOfWorkAsync.SaveChanges();
                    if (isAdd && Tobject.TileAttachments != null && Tobject.TileAttachments.Count > 0)
                    {
                        string DocuNo = _commonApplicationService.StringCharactersReplaceFunction(_journal.DocNo);
                        //        _journal.DocNo.Replace('"', '_').Replace('\\', '_').Replace('/', '_')
                        //.Replace(':', '_').Replace('|', '_').Replace('<', '_').Replace('>', '_').Replace('*', '_').Replace('?', '_').Replace("'", "_");
                        string path = DocumentConstants.Journals + "/" + DocuNo;
                        SaveTailsAttachments(Tobject.CompanyId, path, Tobject.UserCreated, Tobject.TileAttachments);
                    }

                    #region Document Folder Rename

                    if (isUpdate == true && oldDocumentNo != Tobject.DocNo)
                        _commonApplicationService.ChangeFolderName(Tobject.CompanyId, Tobject.DocNo, oldDocumentNo, "Journals");

                    #endregion Document Folder Rename
                }
                catch (DbEntityValidationException e)
                {
                    LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                    foreach (var eve in e.EntityValidationErrors)
                    {
                        Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                            eve.Entry.Entity.GetType().Name, eve.Entry.State);
                        foreach (var ve in eve.ValidationErrors)
                        {
                            Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                                ve.PropertyName, ve.ErrorMessage);
                        }
                    }
                    throw;
                }
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_aveJournal_process);
                return _journal;
            }
            catch (Exception ex)
            {
                if (isAdd && isDocAdd && Tobject.IsDocNoEditable == false)
                {
                    AppaWorld.Bean.Common.SaveDocNoSequence(Tobject.CompanyId, Tobject.DocType, connectionString);
                }
                throw ex;
            }
        }

        public void SaveTailsAttachments(long CompanyId, string path, string usercreated, List<TailsModel> lsttailsattachments)
        {
            Tails tails = new Tails();
            tails.FileShareName = CompanyId;
            tails.CompanyId = CompanyId;
            tails.Path = path;
            tails.LstTailsModel = lsttailsattachments;
            tails.CursorName = DocumentConstants.CursorName;
            if (tails.LstTailsModel.Count() > 0)
            {
                var json = RestHelper.ConvertObjectToJason(tails);
                try
                {
                    //string url = "http://localhost:64453/";
                    string url = ConfigurationManager.AppSettings["AzureUrl"];
                    var response = RestSharpHelper.Post(url, "api/storage/tailsaddmodesave", json);
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        var data = JsonConvert.DeserializeObject<Tails>(response.Content);
                    }
                    else
                    {
                        throw new Exception(response.Content);
                    }
                }
                catch (Exception ex)
                {
                    var message = ex.Message;
                }
            }
        }

        public Journal SaveReversal(JournalSaveModel TObject, string connectionString)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_SaveReversal_method);
            Journal journal = _journalService.GetAllJournalById(TObject.Id, TObject.CompanyId);
            string type;
            if (TObject.ReversalDate < journal.DocDate)
            {
                throw new InvalidOperationException(JournalConstant.Reversal_date_must_be_greater_than_Doc_date);
            }
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Checked_through_GetJournalById_method_and_store_in_Journal);
            if (journal.DocType != DocTypeConstants.DoubtFulDebitNote && journal.DocumentState != JournalState.Posted)
            {
                throw new InvalidOperationException(JournalConstant.DocumentState_should_be_posted_only);
            }

            if (journal.DocSubType != DocTypeConstants.Revaluation)
            {
                if (journal != null)
                {
                    Guid newJournalId = Guid.NewGuid();
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_of_SaveReversal_and_check_journal_null_or_not);
                    type = "Created";
                    journal.DocumentState = JournalState.Posted;
                    journal.DocSubType = journal.DocType == DocTypeConstants.DoubtFulDebitNote ? DocTypeConstants.General : DocSubTypeConstants.Auto_Reversal;
                    journal.CreationType = /*"System"*/"Manual";
                    journal.ObjectState = ObjectState.Modified;
                    _journalService.Update(journal);

                    if (journal.JournalDetails.Any() && journal.DocType != DocTypeConstants.DoubtFulDebitNote)
                    {
                        foreach (var jDetail in journal.JournalDetails)
                        {
                            jDetail.DocSubType = DocSubTypeConstants.Auto_Reversal;
                            jDetail.ObjectState = ObjectState.Modified;
                            _journalDetailService.Update(jDetail);
                        }
                    }
                    Journal journal1 = new Journal();
                    //New Record Insert For Reversed
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.FillJournal_method_came);
                    FillJournal(journal1, journal);
                    journal1.ReverseParentId = journal.Id;
                    journal1.DocDate = TObject.ReversalDate;
                    journal1.PostingDate = TObject.ReversalDate;
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_FillJournal_method);
                    journal1.Id = newJournalId;
                    journal1.DocumentId = journal.DocType == DocTypeConstants.DoubtFulDebitNote ? journal.DocumentId : journal1.Id;
                    journal1.SystemReferenceNo = journal.DocType != DocTypeConstants.DoubtFulDebitNote ? _autoService.GetAutonumber(TObject.CompanyId, DocTypeConstants.JournalVocher, connectionString) /*GenerateAutoNumberForType(company.Id, DocTypeConstants.JournalVocher, DocSubTypeConstants.General, DocTypeConstants.JournalVocher, company.ShortName)*/ : journal.SystemReferenceNo /*+ "-R"*/;
                    journal1.ActualSysRefNo = journal1.SystemReferenceNo;
                    if (journal.ReverseParentRefId != null)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_condition_and_checking_ReverseParentRefId_is_null_or_not);
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_DocumentDescription_thru_GetJournalNewDocumentNo1_method);
                    }
                    journal1.DocNo = journal1.SystemReferenceNo;
                    journal1.ReversalDate = TObject.ReversalDate;
                    journal1.DocumentState = journal1.DocType == DocTypeConstants.DoubtFulDebitNote ? JournalState.Reversed : JournalState.Reversed;
                    journal1.ObjectState = ObjectState.Added;
                    _journalService.Insert(journal1);
                    SaveHistory(journal1, type);
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_List_of_JournalDetail_thru_GetAllJournalDetailsByid);
                    foreach (var journalDetail in journal.JournalDetails)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_foreach_loop);
                        JournalDetail jDModel = new JournalDetail();
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.FillJournalDetail_method_came);
                        FillJournalDetail(jDModel, journalDetail);
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_FillJournalDetail_method);
                        jDModel.Id = Guid.NewGuid();
                        jDModel.JournalId = journal1.Id;
                        jDModel.DocumentId = journal1.DocumentId;
                        jDModel.DocDate = journal1.DocDate;
                        jDModel.DocSubType = jDModel.DocType == DocTypeConstants.DoubtFulDebitNote ? "Allocation" : journal1.DocSubType;
                        jDModel.PostingDate = journal1.PostingDate;
                        jDModel.DocCurrency = journalDetail.DocCurrency;
                        jDModel.SystemRefNo = journal1.SystemReferenceNo;
                        jDModel.DocNo = journal1.DocNo;
                        jDModel.RecOrder = journalDetail.RecOrder;
                        jDModel.CorrAccountId = journalDetail.CorrAccountId;
                        jDModel.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(jDModel);

                    }
                }
            }
            else
            {
                journal.DocumentState = "Reversed";
                journal.ObjectState = ObjectState.Modified;
                _journalService.Update(journal);
            }
            try
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_try_block_and_will_execute_the_SaveChanges_method_of_SaveReversal);
                _UnitOfWorkAsync.SaveChanges();
                //update document history
                List<DocumentHistoryModel> lstdocumet = new List<DocumentHistoryModel>();
                if (journal.DocType == DocTypeConstants.DoubtFulDebitNote)
                {
                    try
                    {
                        lstdocumet = AppaWorld.Bean.Common.FillDocumentHistory(TObject.Id, journal.CompanyId, journal.DocumentId.Value, journal.DocType, journal.DocSubType, DoubtfulDebtState.NotAllocated, journal.DocCurrency, journal.GrandDocDebitTotal != null ? journal.GrandDocDebitTotal.Value : journal.GrandDocCreditTotal != null ? journal.GrandDocCreditTotal.Value : 0, journal.BalanceAmount.Value, journal.ExchangeRate != null ? journal.ExchangeRate.Value : 1, "System", journal.DocumentDescription, journal.PostingDate, /*journal.GrandDocDebitTotal != null ? -journal.GrandDocDebitTotal :*/ -journal.GrandDocCreditTotal, 0);
                        if (lstdocumet.Any())
                            AppaWorld.Bean.Common.SaveDocumentHistory(lstdocumet, connectionString);
                    }
                    catch (Exception ex)
                    {
                        //LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                    }
                }


            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
            return journal;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_SaveReversal);
        }

        #region Journal copy call commented
        //public JournalModel SaveCopy(JournalSaveModel TObject)
        //{
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_SaveCopy_method);
        //    string eventStorejournalCopy = "";
        //    Journal journal = _journalService.GetJournalById(TObject.Id, TObject.CompanyId);
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_value_from_GetJournalById_and_saveed_in_journal);
        //    string DocNo = "-C";
        //    string DocDescription = "Copy-";
        //    string type = "";
        //    //
        //    int i = 1;
        //    if (journal.DocumentState != JournalState.Posted && journal.DocumentState != JournalState.Reversed)
        //        throw new Exception(JournalConstant.DocumentState_should_be_Posted_or_Reversed_only);
        //    Journal journal1 = new Journal();
        //    JournalModel JM = new JournalModel();
        //    if (journal != null)
        //    {
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_if_block_of_SaveCopy_and_check_journal_is_null_or_not);
        //        eventStorejournalCopy = "new";
        //        type = "Copy";
        //        journal.DocumentState = JournalState.Posted;
        //        journal.ObjectState = ObjectState.Modified;
        //        _journalService.Update(journal);
        //        SaveHistory(journal, type);
        //        //New Record Insert For Reversed
        //        type = "Added";
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.FillJournal_method_came);
        //        FillJournal(journal1, journal);
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_FillJournal_method);
        //        journal1.Id = Guid.NewGuid();
        //        Company company = _companyService.GetById(TObject.CompanyId);
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_data_thru_GetById_and_save_in_Journal);
        //        journal1.SystemReferenceNo = GenerateAutoNumberForType(company.Id, DocTypeConstants.JournalVocher, DocSubTypeConstants.General, DocTypeConstants.JournalVocher, company.ShortName);
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_StstemRefNo_thru_GenerateAutoNumberForType_method);
        //        journal1.IsCopy = true;


        //        if (journal.IsCopy == true)
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_if_block_and_check_IsCopy_true_or_not);
        //            journal1.DocNo = GetJournalNewDocumentNo1(TObject.CompanyId, journal.DocNo);
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_Doc_no_thru_GetJournalNewDocumentNo1_method);
        //            string description1 = journal.DocumentDescription.Substring(0, 6);
        //            string description2 = journal.DocumentDescription.Substring(6);
        //            journal1.DocumentDescription = GetJournalNewDocumentNo1(TObject.CompanyId, description1) + description2;
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_DocumentDescription_thru_GetJournalNewDocumentNo1_method);
        //        }
        //        else
        //        {
        //            journal1.DocNo = journal.DocNo + DocNo + i;
        //            journal1.DocumentDescription = DocDescription + i + "-" + journal.DocumentDescription;
        //        }


        //        //
        //        journal1.DocumentState = JournalState.Posted;
        //        journal1.ObjectState = ObjectState.Added;
        //        _journalService.Insert(journal1);
        //        SaveHistory(journal1, type);
        //        var lstjournaldetail = _journalDetailService.GetAllJournalDetailsByid(TObject.Id);
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_ListJournalDetail_thru_GetAllJournalDetailsByid_method);
        //        foreach (var journalDetail in lstjournaldetail)
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_foreach_loop_journal_detail);
        //            JournalDetail jDModel = new JournalDetail();
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.FillJournalDetail_method_came);
        //            FillJournalDetail(jDModel, journalDetail);
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Out_from_FillJournalDetail_method);
        //            jDModel.Id = Guid.NewGuid();
        //            jDModel.JournalId = journal1.Id;
        //            jDModel.ObjectState = ObjectState.Added;
        //            _journalDetailService.Insert(jDModel);
        //        }
        //        var lstjournalGSTDetails = _journalGSTDetailService.GetAllJournalGSTDetails(TObject.Id);
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_ListJournalGSTDetail_thru_GetAllJournalGSTDetails_method);
        //        foreach (var JGSTD in lstjournalGSTDetails)
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_foreach_loop_of_JournalGSTDetail);
        //            JournalGSTDetail journalGSTDetail = new JournalGSTDetail();
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.FillGSTDetails_method_came);
        //            FillGSTDetails(journalGSTDetail, JGSTD);
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_FillGSTDetails_method);
        //            journalGSTDetail.JournalId = journal1.Id;
        //            journalGSTDetail.Id = Guid.NewGuid();
        //            journalGSTDetail.ObjectState = ObjectState.Added;
        //            _journalGSTDetailService.Insert(journalGSTDetail);
        //        }




        //        try
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_try_block_and_will_execute_the_SaveChanges_method_of_SaveCopy);
        //            _UnitOfWorkAsync.SaveChanges();
        //            JM = CreateJournal(journal1.Id, journal1.CompanyId);
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Event_Store_is_going_to_start);
        //            if (eventStorejournalCopy == "new")
        //                DomainEventChannel.Raise(new JournalCopyCreated(journal1));
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Event_Store_process_ended);
        //        }

        //        catch (DbEntityValidationException e)
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Catching_the_exception_thru_DbEntityValidationException_class_in_catch_block);
        //            foreach (var eve in e.EntityValidationErrors)
        //            {
        //                Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
        //                    eve.Entry.Entity.GetType().Name, eve.Entry.State);
        //                foreach (var ve in eve.ValidationErrors)
        //                {
        //                    Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
        //                        ve.PropertyName, ve.ErrorMessage);
        //                }
        //            }
        //            throw;
        //        }
        //    }
        //    return JM;
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.End_of_the_SaveCopy_method);
        //}
        #endregion

        public JournalModel SaveCopy(JournalSaveModel TObject, string ConnectionString)
        {
            JournalModel JM = new JournalModel();

            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_SaveCopy_method);
            //string eventStorejournalCopy = "";
            Journal journal = _journalService.GetJournalById(TObject.Id, TObject.CompanyId);
            JM.FinancialPeriodLockStartDate = _financialSettingService.GetFinancialOpenPeriodStarDate(TObject.CompanyId);
            JM.FinancialPeriodLockEndDate = _financialSettingService.GetFinancialOpenPeriodEndDate(TObject.CompanyId);
            //JM.FinancialStartDate = _financialSettingService.GetFinancialYearEndLockDate(TObject.CompanyId);
            //JM.FinancialEndDate = _financialSettingService.GetFinancialYearEndLockDate(TObject.CompanyId);
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_the_value_from_GetJournalById_and_saveed_in_journal);
            string DocNo = string.Empty;
            string DocDescription = string.Empty;
            if (TObject.IsCopyReversal != true)
            {
                JM.IsDocNoEditable = _autoNumberService.GetIsEditValue(TObject.CompanyId, DocTypeConstants.JournalVocher);
                //DocNo = "-C";
                DocDescription = "Copy-";
                if (JM.IsDocNoEditable == true)
                {
                    DocNo = _autoService.GetAutonumberInAddMode(TObject.CompanyId, DocTypeConstants.JournalVocher, ConnectionString);
                }
            }
            else
            {
                JM.IsDocNoEditable = _autoNumberService.GetIsEditValue(TObject.CompanyId, DocTypeConstants.JournalVocher);
                if (JM.IsDocNoEditable == true)
                {
                    DocNo = _autoService.GetAutonumberInAddMode(TObject.CompanyId, DocTypeConstants.JournalVocher, ConnectionString);
                }
            }
            //string desc = "Copy";
            //string type = "";
            //
            int i = 1;
            if (journal.DocumentState != JournalState.Posted && journal.DocumentState != JournalState.Reversed)
                throw new Exception(JournalConstant.DocumentState_should_be_Posted_or_Reversed_only);
            //Journal journal1 = new Journal();

            if (journal != null)
            {
                //JM = CreateJournal(journal1.Id, journal1.CompanyId);                
                JM.IsCopyReversal = TObject.IsCopyReversal;
                FillJournalModel(JM, journal);

                JM.Id = Guid.NewGuid();
                JM.ParentId = TObject.Id;
                JM.UserCreated = null;
                JM.CreatedDate = null;
                JM.ModifiedBy = null;
                JM.ModifiedDate = null;
                if (TObject.IsCopyReversal == true)
                    JM.DocumentState = JournalState.Posted;
                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_if_block_of_SaveCopy_and_check_journal_is_null_or_not);
                //eventStorejournalCopy = "new";
                //type = "Copy";
                //journal.DocumentState = JournalState.Posted;
                //journal.ObjectState = ObjectState.Modified;
                //_journalService.Update(journal);
                //SaveHistory(journal, type);
                ////New Record Insert For Reversed
                //type = "Added";
                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.FillJournal_method_came);
                //FillJournal(journal1, journal);
                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_FillJournal_method);
                //journal1.Id = Guid.NewGuid();
                //Company company = _companyService.GetById(TObject.CompanyId);
                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_data_thru_GetById_and_save_in_Journal);
                //journal1.SystemReferenceNo = GenerateAutoNumberForType(company.Id, DocTypeConstants.JournalVocher, DocSubTypeConstants.General, DocTypeConstants.JournalVocher, company.ShortName);
                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Got_the_StstemRefNo_thru_GenerateAutoNumberForType_method);

                JM.IsCopy = TObject.IsCopyReversal != true ? true : false;

                if (TObject.IsCopyReversal != true)
                {
                    if (journal.IsCopy == true)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_and_check_IsCopy_true_or_not);
                        //JM.DocNo = GetJournalNewDocumentNo1(TObject.CompanyId, journal.DocNo);

                        //JM.DocNo = journal.DocNo + DocNo + (journal.Counter + 1).ToString(); //Commented on 01/04/2020
                        JM.DocNo = JM.IsDocNoEditable == true ? DocNo : null;

                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_the_Doc_no_thru_GetJournalNewDocumentNo1_method);
                        //string description1 = journal.DocumentDescription.Substring(0, 6);
                        //string description2 = journal.DocumentDescription.Substring(6);
                        //JM.DocDescription = GetJournalNewDocumentNo1(TObject.CompanyId, description1) + description2;

                        //JM.DocDescription = DocDescription + (journal.Counter + 1).ToString() + "-" + journal.DocumentDescription;//commened on 01/04/2020
                        JM.DocDescription = journal.DocumentDescription;
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_the_DocumentDescription_thru_GetJournalNewDocumentNo1_method);
                    }
                    else
                    {
                        //JM.DocNo = journal.DocNo + DocNo + i;//commented on  01/04/2020
                        //JM.DocDescription = DocDescription + i + "-" + journal.DocumentDescription;
                        JM.DocNo = JM.IsDocNoEditable == true ? DocNo : null;
                        JM.DocDescription = journal.DocumentDescription;

                    }
                }
                else
                    JM.DocNo = DocNo;
            }
            return JM;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_SaveCopy_method);
        }



        public Journal SaveJournalVoid(DocumentVoidModel TObject)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_SaveJournalVoid_method);
            string DocNo = "-V";
            //string type = "Voided";
            Journal _document = _journalService.GetJournalById(TObject.Id, TObject.CompanyId);
            if (_journalService.IsVoid(TObject.CompanyId, TObject.Id))
                throw new Exception(CommonConstant.DocumentState_has_been_changed_please_kindly_refresh_the_screen);
            if (_document.JournalDetails.Any(s => s.ClearingState == JournalState.Cleared))
                throw new Exception(CommonConstant.The_State_of_the_transaction_has_been_changed_by_Clering_Bank_Reconciliation_CannotSave_The_Transaction);
            if (TObject.IsDelete != true)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_the_data_thru_GetJournalById_method_and_save_in_journal);
                if (_document == null)
                    throw new Exception(JournalConstant.Invalid_journal);
                else
                {
                    //Data concurrency verify
                    if (_document.DocumentState != JournalState.Posted)
                    {
                        string timeStamp = "0x" + string.Concat(Array.ConvertAll(_document.Version, x => x.ToString("X2")));
                        if (!timeStamp.Equals(TObject.Version))
                            throw new Exception(CommonConstant.Document_has_been_modified_outside);
                    }
                }
                //if (_document.DocumentState != JournalState.Posted)
                //    throw new Exception(JournalConstant.State_Should_Be_posted);


                //Need to verify the invoice is within Financial year
                if (!_financialSettingService.ValidateYearEndLockDate(_document.DocDate, TObject.CompanyId))
                {
                    throw new Exception(CommonConstant.Transaction_date_is_in_closed_financial_period_and_cannot_be_posted);
                }

                //Verify if the invoice is out of open financial period and lock password is entered and valid
                if (!_financialSettingService.ValidateFinancialOpenPeriod(_document.DocDate, TObject.CompanyId))
                {
                    if (String.IsNullOrEmpty(TObject.PeriodLockPassword))
                    {
                        throw new Exception(CommonConstant.Transaction_date_is_in_locked_accounting_period_and_cannot_be_posted);
                    }
                    else if (!_financialSettingService.ValidateFinancialLockPeriodPassword(_document.DocDate, TObject.PeriodLockPassword, TObject.CompanyId))
                    {
                        throw new Exception(CommonConstant.Invalid_Financial_Period_Lock_Password);
                    }
                }

                #region Commented_code

                //if (TObject.RecurringJournalId != null && TObject.DocumentState == JournalState.Parked)
                //{
                //    List<Journal> lstJournal = _journalService.GetJournalByCidandRecurringId(TObject.CompanyId, TObject.RecurringJournalId.Value);
                //    if (lstJournal.Any())
                //    {
                //        DateTime? parkedJournalEndaDate = new DateTime();
                //        DateTime? dateTime = new DateTime();

                //        Journal parkedJournal = lstJournal.Where(a => a.DocumentState == JournalState.Parked).FirstOrDefault();
                //        Journal recurringJournal = lstJournal.Where(a => a.DocumentState == JournalState.Recurring).FirstOrDefault();



                //        if (recurringJournal.FrequencyType == "Annually")
                //            parkedJournalEndaDate = parkedJournal.EndDate.Value.AddYears((recurringJournal.FrequencyValue).Value);
                //        else if (recurringJournal.FrequencyType == "Semi-Annually")
                //            parkedJournalEndaDate = parkedJournal.EndDate.Value.AddMonths((6 * (recurringJournal.FrequencyValue)).Value);
                //        else if (recurringJournal.FrequencyType == "Quarterly")
                //            parkedJournalEndaDate = parkedJournal.EndDate.Value.AddMonths((3 * (recurringJournal.FrequencyValue)).Value);
                //        else if (recurringJournal.FrequencyType == "Monthly")
                //            parkedJournalEndaDate = parkedJournal.EndDate.Value.AddMonths((1 * (recurringJournal.FrequencyValue)).Value);


                //        //_journal.NextDue = dateTime;

                //        if (recurringJournal.FrequencyEndDate >= parkedJournalEndaDate || recurringJournal.FrequencyEndDate == null)
                //        {
                //            recurringJournal.LastPosted = _document.PostingDate;

                //            if (recurringJournal.FrequencyType == "Annually")
                //                dateTime = recurringJournal.NextDue.Value.AddYears((recurringJournal.FrequencyValue).Value);
                //            else if (recurringJournal.FrequencyType == "Semi-Annually")
                //                dateTime = recurringJournal.NextDue.Value.AddMonths((6 * (recurringJournal.FrequencyValue)).Value);
                //            else if (recurringJournal.FrequencyType == "Quarterly")
                //                dateTime = recurringJournal.NextDue.Value.AddMonths((3 * (recurringJournal.FrequencyValue)).Value);
                //            else if (recurringJournal.FrequencyType == "Monthly")
                //                dateTime = recurringJournal.NextDue.Value.AddMonths((1 * (recurringJournal.FrequencyValue)).Value);
                //            if (recurringJournal.FrequencyEndDate >= dateTime)
                //                recurringJournal.NextDue = dateTime;

                //            //journal.NextDue = newJournal.NextDue;
                //            recurringJournal.ObjectState = ObjectState.Modified;
                //            _journalService.Update(recurringJournal);

                //            //new code added

                //            int? count = parkedJournal.Counter + 1;
                //            Journal newJournal = new Journal();
                //            newJournal.Id = Guid.NewGuid();
                //            newJournal.IsRecurringJournal = false;
                //            //newJournal.IsAutoReversalJournal = true;

                //            newJournal.DocCurrency = recurringJournal.DocCurrency;
                //            newJournal.CompanyId = recurringJournal.CompanyId;

                //            newJournal.ServiceCompanyId = recurringJournal.ServiceCompanyId;
                //            newJournal.IsAllowableNonAllowable = recurringJournal.IsAllowableNonAllowable;
                //            newJournal.ISAllowDisAllow = recurringJournal.ISAllowDisAllow;
                //            newJournal.IsBaseCurrencyRateChanged = recurringJournal.IsBaseCurrencyRateChanged;
                //            newJournal.IsGSTCurrencyRateChanged = recurringJournal.IsGSTCurrencyRateChanged;

                //            newJournal.IsMultiCurrency = recurringJournal.IsMultiCurrency;
                //            newJournal.NoSupportingDocument = recurringJournal.NoSupportingDocument;
                //            newJournal.IsNoSupportingDocument = recurringJournal.IsNoSupportingDocument;
                //            newJournal.DocumentDescription = recurringJournal.DocumentDescription != null ? recurringJournal.DocumentDescription + "-" + count : recurringJournal.DocumentDescription;

                //            newJournal.ExCurrency = recurringJournal.ExCurrency;
                //            newJournal.UserCreated = recurringJournal.UserCreated;
                //            //journalNew.GrandTotal = TObject.GrandTotal;
                //            newJournal.DueDate = null;
                //            newJournal.Version = recurringJournal.Version;
                //            newJournal.Remarks = recurringJournal.Remarks;
                //            newJournal.IsShow = recurringJournal.IsShow;

                //            //journalNew.Status = TObject.Status;

                //            newJournal.ExchangeRate = recurringJournal.ExchangeRate;
                //            newJournal.ExDurationFrom = recurringJournal.ExDurationFrom;
                //            newJournal.ExDurationTo = recurringJournal.ExDurationTo;
                //            newJournal.IsBaseCurrencyRateChanged = recurringJournal.IsBaseCurrencyRateChanged;

                //            newJournal.CreationType = "Manual";

                //            newJournal.IsGstSettings = recurringJournal.IsGstSettings;
                //            if (recurringJournal.IsGstSettings)
                //            {
                //                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_if_condition_and_checking_IsGstSettings_is_present_or_not);
                //                newJournal.GSTExCurrency = recurringJournal.GSTExCurrency;
                //                newJournal.GSTExchangeRate = recurringJournal.GSTExchangeRate;
                //                newJournal.GSTExDurationFrom = recurringJournal.GSTExDurationFrom;
                //                newJournal.GSTExDurationTo = recurringJournal.GSTExDurationTo;

                //            }
                //            newJournal.IsSegmentReporting = recurringJournal.IsSegmentReporting;


                //            newJournal.SegmentMasterid1 = recurringJournal.SegmentMasterid1;
                //            newJournal.SegmentDetailid1 = recurringJournal.SegmentDetailid1;
                //            newJournal.SegmentCategory1 = recurringJournal.SegmentCategory1;


                //            newJournal.SegmentMasterid2 = recurringJournal.SegmentMasterid2;
                //            newJournal.SegmentDetailid2 = recurringJournal.SegmentDetailid2;
                //            newJournal.SegmentCategory2 = recurringJournal.SegmentCategory2;

                //            newJournal.GrandDocDebitTotal = recurringJournal.GrandDocDebitTotal;
                //            newJournal.GrandDocCreditTotal = recurringJournal.GrandDocCreditTotal;
                //            newJournal.GrandBaseDebitTotal = recurringJournal.GrandBaseDebitTotal;
                //            newJournal.GrandBaseCreditTotal = recurringJournal.GrandBaseDebitTotal;

                //            //InsertJournal(newJournal, journalModel);
                //            //newJournal.DocumentDescription = journal.DocumentDescription;
                //            newJournal.Counter = count;
                //            newJournal.DocumentState = JournalState.Parked;
                //            newJournal.DocType = DocTypeConstants.JournalVocher;
                //            newJournal.DocSubType = "Recurring";
                //            newJournal.IsAutoReversalJournal = false;
                //            newJournal.DocNo = GetDocNoForParkedJournal(parkedJournal.DocNo, recurringJournal.CompanyId, parkedJournal.Counter, recurringJournal.DocNo);
                //            newJournal.DocDate = dateTime.Value;
                //            newJournal.PostingDate = dateTime;
                //            newJournal.EndDate = dateTime;
                //            newJournal.FrequencyEndDate = null;
                //            newJournal.FrequencyType = null;
                //            newJournal.Status = RecordStatusEnum.Active;
                //            newJournal.CreatedDate = DateTime.UtcNow;
                //            newJournal.UserCreated = recurringJournal.UserCreated;
                //            newJournal.ModifiedDate = null;
                //            newJournal.ModifiedBy = null;
                //            newJournal.RecurringJournalId = parkedJournal.RecurringJournalId;
                //            isParkedJournal = true;
                //            newJournal.SystemReferenceNo = GenerateAutoNumberForType(parkedJournal.CompanyId, DocTypeConstants.JournalVocher, DocSubTypeConstants.Auto_Reversal, "Parked Journal", null);
                //            newJournal.ActualSysRefNo = newJournal.SystemReferenceNo;
                //            //newJournal.SystemReferenceNo = journal.SystemReferenceNo;

                //            newJournal.ObjectState = ObjectState.Added;
                //            _journalService.Insert(newJournal);

                //            int? recOrder = 0;
                //            foreach (var detail in recurringJournal.JournalDetails)
                //            {
                //                recOrder++;
                //                JournalDetail journalDetail = new JournalDetail();
                //                journalDetail.Id = Guid.NewGuid();
                //                journalDetail.TaxType = detail.TaxType;
                //                journalDetail.TaxIdCode = detail.TaxIdCode;
                //                journalDetail.TaxId = detail.TaxId;
                //                journalDetail.TaxRate = detail.TaxRate;
                //                journalDetail.DocumentAmount = detail.DocumentAmount;
                //                journalDetail.AccountDescription = detail.AccountDescription;
                //                journalDetail.AllowDisAllow = detail.AllowDisAllow;
                //                journalDetail.BaseCredit = detail.BaseCredit;
                //                journalDetail.BaseDebit = detail.BaseDebit;
                //                journalDetail.BaseTaxCredit = detail.BaseTaxCredit;
                //                journalDetail.BaseTaxDebit = detail.BaseTaxDebit;
                //                journalDetail.PostingDate = recurringJournal.PostingDate;

                //                journalDetail.AccountName = detail.AccountName;
                //                journalDetail.SegmentCategory1 = recurringJournal.SegmentCategory1;
                //                journalDetail.SegmentCategory2 = recurringJournal.SegmentCategory2;
                //                journalDetail.SegmentMasterid1 = recurringJournal.SegmentMasterid1;
                //                journalDetail.SegmentMasterid2 = recurringJournal.SegmentMasterid2;
                //                journalDetail.SegmentDetailid1 = recurringJournal.SegmentDetailid1;
                //                journalDetail.SegmentDetailid2 = recurringJournal.SegmentDetailid2;
                //                journalDetail.COAId = detail.COAId;
                //                journalDetail.DocCredit = detail.DocCredit;
                //                journalDetail.DocCreditTotal = detail.DocCreditTotal;
                //                journalDetail.DocDebit = detail.DocDebit;
                //                journalDetail.DocDebitTotal = detail.DocDebitTotal;
                //                journalDetail.DocTaxCredit = detail.DocTaxCredit;
                //                journalDetail.DocTaxDebit = detail.DocTaxDebit;
                //                journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                //                journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
                //                journalDetail.IsPLAccount = detail.IsPLAccount;
                //                journalDetail.ExchangeRate = recurringJournal.ExchangeRate;
                //                journalDetail.EntityId = detail.EntityId;
                //                journalDetail.GSTExchangeRate = recurringJournal.GSTExchangeRate;
                //                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.End_of_the_FillJournalDetailmodel);


                //                //FillJournalDetailmodel(journalDetail, detail, _journal);
                //                //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_FillJournalDetailmodel_method);
                //                journalDetail.JournalId = newJournal.Id;
                //                //journalDetail.ServiceCompanyId = journalModel.ServiceCompanyMOdels.ServiceCompanyId;
                //                journalDetail.ServiceCompanyId = recurringJournal.ServiceCompanyId;
                //                journalDetail.DocDate = newJournal.DocDate;
                //                journalDetail.SystemRefNo = newJournal.SystemReferenceNo;
                //                journalDetail.DocNo = newJournal.DocNo;
                //                journalDetail.DocumentDetailId = new Guid();
                //                journalDetail.DocType = DocTypeConstants.JournalVocher;
                //                journalDetail.DocSubType = DocSubTypeConstants.Recurring;
                //                journalDetail.ObjectState = ObjectState.Added;
                //                journalDetail.RecOrder = recOrder;
                //                journalDetail.BaseCurrency = detail.BaseCurrency;
                //                journalDetail.DocCurrency = detail.DocCurrency;
                //                recOrder = journalDetail.RecOrder;
                //                journalDetail.ObjectState = ObjectState.Added;
                //                _journalDetailService.Insert(journalDetail);
                //            }
                //            if (recurringJournal.JournalGSTDetails != null)
                //            {
                //                foreach (var gstdetail in recurringJournal.JournalGSTDetails)
                //                {
                //                    JournalGSTDetail journalGSTDetail = new JournalGSTDetail();
                //                    journalGSTDetail.Id = Guid.NewGuid();
                //                    journalGSTDetail.JournalId = newJournal.Id;
                //                    journalGSTDetail.TaxAmount = gstdetail.TaxAmount;
                //                    //journalGSTDetail.TaxCode = gstdetail.TaxCode;
                //                    journalGSTDetail.TaxId = gstdetail.TaxId;
                //                    journalGSTDetail.TotalAmount = gstdetail.TotalAmount;
                //                    journalGSTDetail.ObjectState = ObjectState.Added;
                //                    _journalGSTDetailService.Insert(journalGSTDetail);
                //                }
                //            }
                //            _UnitOfWorkAsync.SaveChanges();
                //        }
                //    }
                //}

                #endregion Commented_code

                Journal _reverse = _journalService.GetJournalByReverseParentId(TObject.Id, TObject.CompanyId);
                if (_reverse != null)
                {
                    if (!_financialSettingService.ValidateFinancialOpenPeriod(Convert.ToDateTime(_document.ReversalDate), TObject.CompanyId))
                    {
                        if (String.IsNullOrEmpty(TObject.PeriodLockPassword))
                        {
                            throw new Exception(CommonConstant.Reversal_date_is_in_locked_accounting_period_and_cannot_be_posted);
                        }
                        else if (!_financialSettingService.ValidateFinancialLockPeriodPassword(Convert.ToDateTime(_document.ReversalDate), TObject.PeriodLockPassword, TObject.CompanyId))
                        {
                            throw new Exception(CommonConstant.Invalid_Financial_Period_Lock_Password);
                        }
                    }
                    if (_reverse.IsLocked == true)
                    {
                        throw new Exception(CommonConstant.Reverse_Doc_is_locked_Cant_void_posted_document);
                    }
                    if (_document.DocSubType == "Reversal")
                    {
                        _reverse.DocumentState = JournalState.Void;
                        _reverse.ModifiedBy = _reverse.UserCreated;
                        _reverse.ModifiedDate = DateTime.UtcNow;
                        _reverse.DocNo = _reverse.DocNo + DocNo;
                        _reverse.DocumentDescription = _reverse.DocumentDescription;
                        _reverse.ObjectState = ObjectState.Modified;
                    }
                }
                _document.InternalState = _document.DocumentState == JournalState.Recurring ? JournalState.Void : null;
                _document.DocumentState = JournalState.Void;
                _document.ModifiedBy = _document.UserCreated;
                _document.ModifiedDate = DateTime.UtcNow;
                _document.DocNo = _document.DocNo + DocNo;
                _document.DocumentDescription =/* DocDescription +*/ _document.DocumentDescription;
                _document.ObjectState = ObjectState.Modified;
                //SaveHistory(_document, type);
            }
            else
            {
                //_document.Status = RecordStatusEnum.Delete;
                _document.ModifiedBy = _document.UserCreated;
                _document.ModifiedDate = DateTime.UtcNow;
                _document.DocumentState = JournalState.Deleted;
                _document.ObjectState = ObjectState.Modified;
            }
            try
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_try_block_and_will_execute_SaveChanges_method_of_SaveJournalVoid);
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }

            return _document;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_SaveJournalVoid_method);
        }
        public Journal SavePostCallforParked(JournalSaveModel TObject)
        {
            string type = "Posted";
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_SavePostCallforParked_method);
            var getJournal = _journalService.GetJournalById(TObject.Id, TObject.CompanyId);
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_the_data_thru_GetJournalById_and_save_in_getJournal);
            if (getJournal != null)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_and_check_getJournal_is_null_or_not);
                if (getJournal.DocumentState != JournalState.Parked)
                    throw new Exception(JournalConstant.DocumentState_should_be_parked_only);
                if (!_financialSettingService.ValidateYearEndLockDate(getJournal.DocDate, TObject.CompanyId))
                {
                    throw new Exception(CommonConstant.Transaction_date_is_in_closed_financial_period_and_cannot_be_posted);
                }

                if (!_financialSettingService.ValidateFinancialOpenPeriod(getJournal.DocDate, TObject.CompanyId))
                {
                    if (String.IsNullOrEmpty(TObject.PeriodLockPassword))
                    {
                        throw new Exception(CommonConstant.Transaction_date_is_in_locked_accounting_period_and_cannot_be_posted);
                    }
                    else if (!_financialSettingService.ValidateFinancialLockPeriodPassword(getJournal.DocDate, TObject.PeriodLockPassword, TObject.CompanyId))
                    {
                        throw new Exception(CommonConstant.Invalid_Financial_Period_Lock_Password);
                    }
                }
                getJournal.DocumentState = JournalState.Posted;
                getJournal.ObjectState = ObjectState.Modified;
                _journalService.Update(getJournal);
                SaveHistory(getJournal, type);
            }
            try
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_try_block_and_execute_SaveChanges_method_of_SavePostCallforParked);
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw (ex);
            }
            return getJournal;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_SavePostCallforParked_method);
        }

        #region Commented_code
        //public Journal SaveRecurringJournal(Journal _journal, JournalModel journalModel, string shortName)
        //{
        //    #region Commented_Code
        //    //List<Journal> lstJournal = _journalService.GetAllRecurringJournal(_journal.CompanyId, _journal.Id);


        //    //if (lstJournal != null)
        //    //{
        //    //    _journal.IsRecurringJournal = false;
        //    //    _journal.IsAutoReversalJournal = true;

        //    //    InsertJournal(_journal, journalModel);

        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_InsertJournal_method);
        //    //    _journal.ModifiedBy = journalModel.ModifiedBy;
        //    //    _journal.ModifiedDate = DateTime.UtcNow;
        //    //    _journal.ObjectState = ObjectState.Modified;

        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.UpdateJournalDetails_method_came);
        //    //    UpdateJournalDetails(journalModel, _journal);


        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_UpdateJournalDetails_method);
        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.UpdateJournalGSTDetails_method_came);
        //    //    UpdateJournalGSTDetails(journalModel, _journal);
        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_UpdateJournalGSTDetails_method);
        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Calling_Update_method_through_JournalService);
        //    //    if (journalModel.IsPosted)
        //    //    {
        //    //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_in_if_condition_and_check_Tobject_IsPosted);
        //    //        _journal.DocumentState = JournalState.Posted;
        //    //        _journal.IsAutoReversalJournal = false;
        //    //    }
        //    //    _journalService.Update(_journal);
        //    //}
        //    //else
        //    //{
        //    //if (lstJournal.Any())
        //    //{
        //    //    foreach (var journal in lstJournal)
        //    //    {

        //    //newJournal.Id = Guid.NewGuid();
        //    //newJournal = journal;
        //    #endregion

        //    Journal newJournal = new Journal();
        //    newJournal.Id = Guid.NewGuid();
        //    newJournal.IsRecurringJournal = false;
        //    newJournal.IsRecurringJournal = journalModel.IsRecurringJournal = false;
        //    //newJournal.IsAutoReversalJournal = true;
        //    InsertJournal(newJournal, journalModel);

        //    newJournal.DocumentDescription = journalModel.DocDescription != null ? journalModel.DocDescription + "-" + 2 : journalModel.DocDescription;
        //    newJournal.DocumentState = JournalState.Parked;
        //    newJournal.DocSubType = DocSubTypeConstants.Recurring;
        //    newJournal.Counter = 2;
        //    newJournal.DocDate = _journal.NextDue.Value;
        //    newJournal.PostingDate = _journal.NextDue;
        //    newJournal.FrequencyEndDate = null;
        //    newJournal.FrequencyType = null;
        //    newJournal.Status = RecordStatusEnum.Active;
        //    newJournal.RecurringJournalId = _journal.Id;
        //    newJournal.CreatedDate = DateTime.UtcNow;
        //    newJournal.EndDate = _journal.NextDue;
        //    isParkedJournal = true;
        //    newJournal.ModifiedDate = null;
        //    newJournal.ModifiedBy = null;

        //    newJournal.SystemReferenceNo = GenerateAutoNumberForType(journalModel.CompanyId, DocTypeConstants.JournalVocher, DocSubTypeConstants.Auto_Reversal, "Parked Journal", shortName);
        //    newJournal.ActualSysRefNo = newJournal.SystemReferenceNo;
        //    //newJournal.SystemReferenceNo = journal.SystemReferenceNo;


        //    newJournal.DocNo = GetDocumentNo(journalModel, JournalState.Parked);


        //    newJournal.ObjectState = ObjectState.Added;
        //    _journalService.Insert(newJournal);


        //    int? recOrder = 0;
        //    foreach (var detail in journalModel.JournalDetailModels)
        //    {
        //        recOrder++;
        //        JournalDetail journalDetail = new JournalDetail();
        //        //journalDetail.Id = Guid.NewGuid();
        //        //journalDetail.JournalId = newJournal.Id;
        //        FillJournalDetailmodel(journalDetail, detail, _journal);
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_FillJournalDetailmodel_method);
        //        journalDetail.JournalId = newJournal.Id;
        //        journalDetail.ServiceCompanyId = journalModel.ServiceCompanyId;
        //        journalDetail.DocDate = journalModel.DocDate;
        //        journalDetail.SystemRefNo = newJournal.SystemReferenceNo;
        //        journalDetail.DocNo = newJournal.DocNo;
        //        journalDetail.DocumentDetailId = new Guid();
        //        journalDetail.DocType = DocTypeConstants.JournalVocher;
        //        journalDetail.DocSubType = DocSubTypeConstants.Recurring;
        //        journalDetail.ObjectState = ObjectState.Added;
        //        journalDetail.RecOrder = recOrder;
        //        journalDetail.BaseCurrency = journalModel.BaseCurrency;
        //        journalDetail.DocCurrency = journalModel.DocCurrency;
        //        recOrder = journalDetail.RecOrder;
        //        journalDetail.ObjectState = ObjectState.Added;
        //        _journalDetailService.Insert(journalDetail);
        //    }
        //    if (journalModel.JournalGSTDetails != null)
        //    {
        //        foreach (var gstdetail in journalModel.JournalGSTDetails)
        //        {
        //            //JournalGSTDetail gstDetail = new JournalGSTDetail();
        //            //gstDetail.Id = Guid.NewGuid();
        //            //gstDetail.JournalId = journal.Id;
        //            JournalGSTDetail journalGSTDetail = new JournalGSTDetail();
        //            journalGSTDetail.Id = Guid.NewGuid();
        //            journalGSTDetail.JournalId = newJournal.Id;
        //            journalGSTDetail.TaxAmount = gstdetail.TaxAmount;
        //            //journalGSTDetail.TaxCode = gstdetail.TaxCode;
        //            journalGSTDetail.TaxId = gstdetail.TaxId;
        //            journalGSTDetail.TotalAmount = gstdetail.TotalAmount;
        //            journalGSTDetail.ObjectState = ObjectState.Added;
        //            _journalGSTDetailService.Insert(journalGSTDetail);

        //        }
        //    }
        //    #region commented Code
        //    //}
        //    //DateTime? newDueDate = new DateTime();
        //    ////var journal = _journalService.GetJournalByCIDandDocSubType(journalModel.CompanyId, DocTypeConstants.JournalVocher, "Recurring", journalModel.DocNo);
        //    //Journal journal = _journalService.GetRecurringJournalByReccuringId(journalModel.CompanyId, _journal.Id);
        //    //if (journal != null)
        //    //{
        //    //    if (journal.FrequencyType == "Annually")
        //    //        newDueDate = newJournal.PostingDate.Value.AddYears((journal.FrequencyValue).Value);
        //    //    else if (journal.FrequencyType == "Semi-Annually")
        //    //        newDueDate = newJournal.PostingDate.Value.AddMonths((6 * (journal.FrequencyValue)).Value);
        //    //    else if (journal.FrequencyType == "Quarterly")
        //    //        newDueDate = newJournal.PostingDate.Value.AddMonths((3 * (journal.FrequencyValue)).Value);
        //    //    else if (journal.FrequencyType == "Monthly")
        //    //        newDueDate = newJournal.PostingDate.Value.AddMonths((1 * (journal.FrequencyValue)).Value);
        //    //    journal.NextDue = newDueDate;

        //    //    //journal.NextDue = _journal.NextDue.Value.AddMonths(month.Value);
        //    //    journal.ObjectState = ObjectState.Modified;
        //    //    _journalService.Update(journal);
        //    //}
        //    #endregion

        //    _UnitOfWorkAsync.SaveChanges();
        //    return _journal;
        //}
        //private void PostTheRecurringToParkedJournal(JournalModel journalModel, Journal _journal, string shortNmae)
        //{
        //    //var parkedJournal = _journalService.GetJournalByCIDandDocSubType(journalModel.CompanyId, DocTypeConstants.JournalVocher, "Auto-Reversal", journalModel.DocNo);
        //    DateTime? parkedJournalEndaDate = new DateTime();
        //    if (journalModel.RecurringJournalId != null)
        //    {
        //        Journal journal = _journalService.GetRecurringJournalByReccuringId(journalModel.CompanyId, journalModel.RecurringJournalId.Value);

        //        Journal newJournal = new Journal();
        //        if (journal != null)
        //        {
        //            DateTime? endDate = journalModel.EndDate;
        //            //newJournal.FrequencyValue = journal.FrequencyValue;
        //            ////newJournal.

        //            DateTime? dateTime = new DateTime();
        //            //if (journal.FrequencyEndDate >= journalModel.PostingDate || journalModel.FrequencyEndDate == null)
        //            //{
        //            if (journal.FrequencyType == "Annually")
        //                parkedJournalEndaDate = endDate.Value.AddYears((journal.FrequencyValue).Value);
        //            else if (journal.FrequencyType == "Semi-Annually")
        //                parkedJournalEndaDate = endDate.Value.AddMonths((6 * (journal.FrequencyValue)).Value);
        //            else if (journal.FrequencyType == "Quarterly")
        //                parkedJournalEndaDate = endDate.Value.AddMonths((3 * (journal.FrequencyValue)).Value);
        //            else if (journal.FrequencyType == "Monthly")
        //                parkedJournalEndaDate = endDate.Value.AddMonths((1 * (journal.FrequencyValue)).Value);

        //            dateTime = newJournal.PostingDate = newJournal.NextDue = journal.NextDue;
        //            //_journal.NextDue = dateTime;

        //            if (journal.FrequencyEndDate >= parkedJournalEndaDate || journal.FrequencyEndDate == null)
        //            {
        //                journal.LastPosted = journalModel.PostingDate;

        //                if (journal.FrequencyType == "Annually")
        //                    dateTime = journal.NextDue.Value.AddYears((journal.FrequencyValue).Value);
        //                else if (journal.FrequencyType == "Semi-Annually")
        //                    dateTime = journal.NextDue.Value.AddMonths((6 * (journal.FrequencyValue)).Value);
        //                else if (journal.FrequencyType == "Quarterly")
        //                    dateTime = journal.NextDue.Value.AddMonths((3 * (journal.FrequencyValue)).Value);
        //                else if (journal.FrequencyType == "Monthly")
        //                    dateTime = journal.NextDue.Value.AddMonths((1 * (journal.FrequencyValue)).Value);
        //                if (journal.FrequencyEndDate >= dateTime)
        //                    journal.NextDue = dateTime;



        //                //journal.NextDue = newJournal.NextDue;
        //                journal.ObjectState = ObjectState.Modified;
        //                _journalService.Update(journal);
        //                //newJournal.Id = Guid.NewGuid();
        //                SaveParkedJournalFromRecurring(_journal, journalModel, shortNmae, newJournal, journal, dateTime);
        //            }
        //            else
        //            {
        //                journal.LastPosted = journalModel.DocDate;
        //                journal.NextDue = null;
        //                journal.ObjectState = ObjectState.Modified;
        //                _journalService.Update(journal);
        //                _UnitOfWorkAsync.SaveChanges();
        //            }
        //        }

        //        //else
        //        //    journalNew.NextDue = TObject.NextDue;
        //        //journalNew.LastPosted = journalNew.NextDue > DateTime.UtcNow ? (DateTime?)null : DateTime.UtcNow;
        //    }
        //}
        #endregion

        #region commented_code

        //public Journal SaveParkedJournalFromRecurring(Journal _journal, JournalModel journalModel, string shortName, Journal newPJournal, Journal journal, DateTime? dateTime)
        //{
        //    int? count = journalModel.Counter + 1;
        //    Journal newJournal = new Journal();
        //    newJournal.Id = Guid.NewGuid();
        //    newJournal.IsRecurringJournal = false;
        //    newJournal.IsRecurringJournal = journalModel.IsRecurringJournal = false;
        //    //newJournal.IsAutoReversalJournal = true;

        //    newJournal.DocCurrency = journal.DocCurrency;
        //    newJournal.CompanyId = journal.CompanyId;

        //    newJournal.ServiceCompanyId = journal.ServiceCompanyId;
        //    newJournal.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
        //    newJournal.ISAllowDisAllow = journal.ISAllowDisAllow;
        //    newJournal.IsBaseCurrencyRateChanged = journal.IsBaseCurrencyRateChanged;
        //    newJournal.IsGSTCurrencyRateChanged = journal.IsGSTCurrencyRateChanged;

        //    newJournal.IsMultiCurrency = journalModel.ISMultiCurrency;
        //    newJournal.NoSupportingDocument = journal.NoSupportingDocument;
        //    newJournal.IsNoSupportingDocument = journal.IsNoSupportingDocument;
        //    newJournal.DocumentDescription = journal.DocumentDescription != null ? journal.DocumentDescription + "-" + count : journal.DocumentDescription;

        //    newJournal.ExCurrency = journal.ExCurrency;
        //    newJournal.UserCreated = journal.UserCreated;
        //    //journalNew.GrandTotal = TObject.GrandTotal;
        //    newJournal.DueDate = null;
        //    newJournal.Version = journal.Version;
        //    newJournal.Remarks = journal.Remarks;
        //    newJournal.IsShow = journal.IsShow;

        //    //journalNew.Status = TObject.Status;

        //    newJournal.ExchangeRate = journal.ExchangeRate;
        //    newJournal.ExDurationFrom = journal.ExDurationFrom;
        //    newJournal.ExDurationTo = journalModel.exDurationTo;
        //    newJournal.IsBaseCurrencyRateChanged = journal.IsBaseCurrencyRateChanged;

        //    newJournal.CreationType = "Manual";
        //    //journalNew.ReverseParentRefId = TObject.ReverseParentRefId;
        //    //journalNew.ReverseChildRefId = TObject.ReverseChildRefId;

        //    newJournal.IsGstSettings = journal.IsGstSettings;
        //    if (journal.IsGstSettings)
        //    {
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_if_condition_and_checking_IsGstSettings_is_present_or_not);
        //        newJournal.GSTExCurrency = journal.GSTExCurrency;
        //        newJournal.GSTExchangeRate = journal.GSTExchangeRate;
        //        newJournal.GSTExDurationFrom = journal.GSTExDurationFrom;
        //        newJournal.GSTExDurationTo = journal.GSTExDurationTo;

        //    }
        //    newJournal.IsSegmentReporting = journal.IsSegmentReporting;


        //    newJournal.SegmentMasterid1 = journal.SegmentMasterid1;
        //    newJournal.SegmentDetailid1 = journal.SegmentDetailid1;
        //    newJournal.SegmentCategory1 = journal.SegmentCategory1;


        //    newJournal.SegmentMasterid2 = journal.SegmentMasterid2;
        //    newJournal.SegmentDetailid2 = journal.SegmentDetailid2;
        //    newJournal.SegmentCategory2 = journal.SegmentCategory2;

        //    newJournal.GrandDocDebitTotal = journal.GrandDocDebitTotal;
        //    newJournal.GrandDocCreditTotal = journal.GrandDocCreditTotal;
        //    newJournal.GrandBaseDebitTotal = journal.GrandBaseDebitTotal;
        //    newJournal.GrandBaseCreditTotal = journal.GrandBaseDebitTotal;

        //    //InsertJournal(newJournal, journalModel);
        //    //newJournal.DocumentDescription = journal.DocumentDescription;
        //    newJournal.Counter = count;
        //    newJournal.DocumentState = JournalState.Parked;
        //    newJournal.DocType = DocTypeConstants.JournalVocher;
        //    newJournal.DocSubType = "Recurring";
        //    newJournal.IsAutoReversalJournal = false;
        //    newJournal.DocNo = GetDocNoForParkedJournal(journalModel.DocNo, journalModel.CompanyId, journalModel.Counter, journal.DocNo);
        //    newJournal.DocDate = dateTime.Value;
        //    newJournal.PostingDate = dateTime;
        //    newJournal.EndDate = dateTime;
        //    newJournal.FrequencyEndDate = null;
        //    newJournal.FrequencyType = null;
        //    newJournal.Status = RecordStatusEnum.Active;
        //    newJournal.CreatedDate = DateTime.UtcNow;
        //    newJournal.UserCreated = journalModel.UserCreated;
        //    newJournal.ModifiedDate = null;
        //    newJournal.ModifiedBy = null;
        //    newJournal.RecurringJournalId = journalModel.RecurringJournalId;
        //    isParkedJournal = true;
        //    newJournal.SystemReferenceNo = GenerateAutoNumberForType(journalModel.CompanyId, DocTypeConstants.JournalVocher, DocSubTypeConstants.Auto_Reversal, "Parked Journal", shortName);
        //    newJournal.ActualSysRefNo = newJournal.SystemReferenceNo;
        //    //newJournal.SystemReferenceNo = journal.SystemReferenceNo;

        //    newJournal.ObjectState = ObjectState.Added;
        //    _journalService.Insert(newJournal);



        //    int? recOrder = 0;
        //    foreach (var detail in journal.JournalDetails)
        //    {
        //        recOrder++;
        //        JournalDetail journalDetail = new JournalDetail();
        //        //journalDetail.Id = Guid.NewGuid();
        //        //journalDetail.JournalId = newJournal.Id;

        //        journalDetail.Id = Guid.NewGuid();
        //        //var tax = _taxCodeService.GetTaxById(detail.TaxId);
        //        //if (tax != null)
        //        //{
        //        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_if_condition_of_FillJournalDetailmodel_and_check_tax_null_or_not);
        //        //    journalDetail.TaxType = tax.TaxType;
        //        //    journalDetail.TaxIdCode = tax.Code;
        //        //}

        //        journalDetail.TaxType = detail.TaxType;
        //        journalDetail.TaxIdCode = detail.TaxIdCode;
        //        journalDetail.TaxId = detail.TaxId;
        //        journalDetail.TaxRate = detail.TaxRate;
        //        journalDetail.DocumentAmount = detail.DocumentAmount;
        //        journalDetail.AccountDescription = detail.AccountDescription;
        //        journalDetail.AllowDisAllow = detail.AllowDisAllow;
        //        journalDetail.BaseCredit = detail.BaseCredit;
        //        journalDetail.BaseDebit = detail.BaseDebit;
        //        journalDetail.BaseTaxCredit = detail.BaseTaxCredit;
        //        journalDetail.BaseTaxDebit = detail.BaseTaxDebit;
        //        journalDetail.PostingDate = journal.PostingDate;
        //        //var coa = _chartOfAccountService.GetChartOfAccountById(detail.COAId);
        //        //if (coa != null)
        //        //{
        //        //    //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_if_condition_of_FillJournalDetailmodel_and_check_coa_null_or_not);
        //        //    journalDetail.AccountName = coa.Name;

        //        //}
        //        journalDetail.AccountName = detail.AccountName;
        //        journalDetail.SegmentCategory1 = journal.SegmentCategory1;
        //        journalDetail.SegmentCategory2 = journal.SegmentCategory2;
        //        journalDetail.SegmentMasterid1 = journal.SegmentMasterid1;
        //        journalDetail.SegmentMasterid2 = journal.SegmentMasterid2;
        //        journalDetail.SegmentDetailid1 = journal.SegmentDetailid1;
        //        journalDetail.SegmentDetailid2 = journal.SegmentDetailid2;
        //        journalDetail.COAId = detail.COAId;
        //        journalDetail.DocCredit = detail.DocCredit;
        //        journalDetail.DocCreditTotal = detail.DocCreditTotal;
        //        journalDetail.DocDebit = detail.DocDebit;
        //        journalDetail.DocDebitTotal = detail.DocDebitTotal;
        //        journalDetail.DocTaxCredit = detail.DocTaxCredit;
        //        journalDetail.DocTaxDebit = detail.DocTaxDebit;
        //        journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
        //        journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
        //        journalDetail.IsPLAccount = detail.IsPLAccount;
        //        journalDetail.ExchangeRate = journal.ExchangeRate;
        //        journalDetail.EntityId = detail.EntityId;
        //        journalDetail.GSTExchangeRate = journal.GSTExchangeRate;
        //        //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.End_of_the_FillJournalDetailmodel);


        //        //FillJournalDetailmodel(journalDetail, detail, _journal);
        //        //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_FillJournalDetailmodel_method);
        //        journalDetail.JournalId = newJournal.Id;
        //        //journalDetail.ServiceCompanyId = journalModel.ServiceCompanyMOdels.ServiceCompanyId;
        //        journalDetail.ServiceCompanyId = journal.ServiceCompanyId;
        //        journalDetail.DocDate = newJournal.DocDate;
        //        journalDetail.SystemRefNo = newJournal.SystemReferenceNo;
        //        journalDetail.DocNo = newJournal.DocNo;
        //        journalDetail.DocumentDetailId = new Guid();
        //        journalDetail.DocType = DocTypeConstants.JournalVocher;
        //        journalDetail.DocSubType = DocSubTypeConstants.Recurring;
        //        journalDetail.ObjectState = ObjectState.Added;
        //        journalDetail.RecOrder = recOrder;
        //        journalDetail.BaseCurrency = detail.BaseCurrency;
        //        journalDetail.DocCurrency = detail.DocCurrency;
        //        recOrder = journalDetail.RecOrder;
        //        journalDetail.ObjectState = ObjectState.Added;
        //        _journalDetailService.Insert(journalDetail);
        //    }
        //    if (journal.JournalGSTDetails != null)
        //    {
        //        foreach (var gstdetail in journal.JournalGSTDetails)
        //        {
        //            //JournalGSTDetail gstDetail = new JournalGSTDetail();
        //            //gstDetail.Id = Guid.NewGuid();
        //            //gstDetail.JournalId = journal.Id;
        //            JournalGSTDetail journalGSTDetail = new JournalGSTDetail();
        //            journalGSTDetail.Id = Guid.NewGuid();
        //            journalGSTDetail.JournalId = newJournal.Id;
        //            journalGSTDetail.TaxAmount = gstdetail.TaxAmount;
        //            //journalGSTDetail.TaxCode = gstdetail.TaxCode;
        //            journalGSTDetail.TaxId = gstdetail.TaxId;
        //            journalGSTDetail.TotalAmount = gstdetail.TotalAmount;
        //            journalGSTDetail.ObjectState = ObjectState.Added;
        //            _journalGSTDetailService.Insert(journalGSTDetail);

        //        }
        //    }
        //    //}
        //    //int? month = null;
        //    //var journal = _journalService.GetJournalByCIDandDocSubType(journalModel.CompanyId, DocTypeConstants.JournalVocher, "Recurring", journalModel.DocNo);
        //    //if (journal != null)
        //    //{
        //    //    month = _journal.NextDue.Value.Month - journalModel.DocDate.Month;
        //    //    journal.NextDue = _journal.NextDue.Value.AddMonths(month.Value);
        //    //    journal.ObjectState = ObjectState.Modified;
        //    //    _journalService.Update(journal);
        //    //}


        //    _UnitOfWorkAsync.SaveChanges();


        //    return _journal;
        //}

        #endregion

        #region Commented_method
        //private void UpdateParkedJournal(Journal journal, JournalModel journalModel)
        //{
        //    if (journalModel.RecurringJournalId != null)
        //    {
        //        //DateTime postingDate = new DateTime();
        //        string systemRefernceNo = null;
        //        string docNo = null;

        //        Journal newJournal = _journalService.GetJournalByIdandRecurringId(journal.CompanyId, journalModel.RecurringJournalId.Value);
        //        //postingDate = newJournal.PostingDate.Value;
        //        if (newJournal != null)
        //        {
        //            docNo = journal.DocNo + "-" + newJournal.Counter;
        //            systemRefernceNo = newJournal.SystemReferenceNo;
        //            newJournal.IsRecurringJournal = journalModel.IsRecurringJournal = false;
        //            //newJournal.IsAutoReversalJournal = true;
        //            InsertJournal(newJournal, journalModel);

        //            newJournal.DocumentState = JournalState.Parked;
        //            newJournal.DocSubType = DocSubTypeConstants.Recurring;
        //            newJournal.DocDate = journal.NextDue.Value;
        //            newJournal.PostingDate = journal.NextDue;
        //            newJournal.FrequencyEndDate = null;
        //            newJournal.FrequencyType = null;
        //            newJournal.Status = RecordStatusEnum.Active;
        //            newJournal.SystemReferenceNo = systemRefernceNo;
        //            newJournal.ActualSysRefNo = systemRefernceNo;
        //            newJournal.DocNo = GetDocumentNo(journalModel, JournalState.Parked);
        //            newJournal.ModifiedDate = DateTime.UtcNow;
        //            newJournal.ModifiedBy = journalModel.ModifiedBy;
        //            //newJournal.SystemReferenceNo = journal.SystemReferenceNo;

        //            newJournal.ObjectState = ObjectState.Modified;
        //            _journalService.Update(newJournal);

        //            //return newJournal;
        //            if (journalModel.JournalDetailModels.Any())
        //            {
        //                UpdateParkedJournalDetails(journalModel, newJournal);
        //            }
        //            if (journalModel.JournalGSTDetails != null)
        //            {
        //                UpdateParkedJournalGSTDetails(journalModel, newJournal);
        //            }
        //            try
        //            {
        //                //_journalService.Update(newJournal);
        //                _UnitOfWorkAsync.SaveChanges();

        //                //DateTime? dateTime = new DateTime();

        //                //if (journal.FrequencyType == "Annually")
        //                //    dateTime = journal.NextDue.Value.AddYears((journal.FrequencyValue).Value);
        //                //else if (journal.FrequencyType == "Semi-Annually")
        //                //    dateTime = journal.NextDue.Value.AddMonths((6 * (journal.FrequencyValue)).Value);
        //                //else if (journal.FrequencyType == "Quarterly")
        //                //    dateTime = journal.NextDue.Value.AddMonths((3 * (journal.FrequencyValue)).Value);
        //                //else if (journal.FrequencyType == "Monthly")
        //                //    dateTime = journal.NextDue.Value.AddMonths((1 * (journal.FrequencyValue)).Value);

        //                //journal.NextDue = dateTime;
        //                //journal.ObjectState = ObjectState.Modified;
        //                //_journalService.Update(journal);

        //                //_UnitOfWorkAsync.SaveChanges();
        //            }
        //            catch (Exception ex)
        //            {
        //                throw ex;
        //            }

        //        }
        //        //return newJournal;
        //    }
        //}
        #endregion


        private void SaveAutoReversalJournal(JournalModel journalModel, Journal journal, ChartOfAccount gstAccount, string connectionString)
        {
            Journal newJournal = new Journal();
            newJournal.Id = Guid.NewGuid();
            newJournal.IsRecurringJournal = journalModel.IsRecurringJournal = false;
            InsertJournal(newJournal, journalModel);
            newJournal.DocumentDescription = journalModel.DocDescription;
            newJournal.DocumentId = newJournal.Id;
            newJournal.DocumentState = JournalState.Reversed;
            newJournal.DocType = DocTypeConstants.JournalVocher;
            newJournal.DocSubType = /*DocTypeConstants.General*/DocSubTypeConstants.Auto_Reversal;
            newJournal.DocDate = journalModel.ReversalDate.Value;
            newJournal.PostingDate = journalModel.ReversalDate;
            newJournal.FrequencyEndDate = null;
            newJournal.FrequencyType = null;
            newJournal.Status = RecordStatusEnum.Active;
            newJournal.CreatedDate = DateTime.UtcNow;
            newJournal.ModifiedDate = null;
            newJournal.ModifiedBy = null;
            newJournal.ReversalDate = null;
            newJournal.IsAutoReversalJournal = false;
            newJournal.ReverseParentId = journal.Id;
            newJournal.CreationType = "Manual";
            newJournal.SystemReferenceNo = _autoService.GetAutonumber(journalModel.CompanyId, DocTypeConstants.JournalVocher, connectionString);
            newJournal.ActualSysRefNo = newJournal.SystemReferenceNo;
            newJournal.DocNo = newJournal.SystemReferenceNo;
            List<JournalDetail> lstDetails = new List<JournalDetail>();
            int? recOrder = 0;
            foreach (var detail in journalModel.JournalDetailModels)
            {
                recOrder++;
                JournalDetail journalDetail = new JournalDetail();
                journalDetail.Id = Guid.NewGuid();
                journalDetail.DocumentId = newJournal.Id;
                journalDetail.TaxId = detail.TaxId;
                journalDetail.TaxRate = detail.TaxRate;
                journalDetail.DocumentAmount = detail.DocumentAmount;
                journalDetail.AccountDescription = detail.AccountDescription;
                journalDetail.AllowDisAllow = detail.AllowDisAllow;
                journalDetail.DocCredit = detail.DocDebit;
                journalDetail.DocCreditTotal = detail.DocDebitTotal;
                journalDetail.DocDebit = detail.DocCredit;
                journalDetail.DocDebitTotal = detail.DocCreditTotal;
                journalDetail.DocTaxCredit = detail.DocTaxDebit;
                journalDetail.DocTaxDebit = detail.DocTaxCredit;
                //newlly modified for Base calculation
                journalDetail.BaseCredit = journalDetail.DocCredit != null ? newJournal.ExCurrency != newJournal.DocCurrency ? (Math.Round((decimal)newJournal.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * newJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : journalDetail.DocCredit : null;
                journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                journalDetail.BaseDebit = journalDetail.DocDebit != null ? newJournal.ExCurrency != newJournal.DocCurrency ? (Math.Round((decimal)newJournal.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * newJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : journalDetail.DocDebit : null;
                journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
                journalDetail.BaseTaxCredit = journalDetail.DocTaxCredit != null ? (Math.Round((decimal)journal.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxCredit : (decimal)(journalDetail.DocTaxCredit * journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;
                journalDetail.BaseTaxDebit = journalDetail.DocTaxDebit != null ? (Math.Round((decimal)journal.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxDebit : (decimal)(journalDetail.DocTaxDebit * journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

                journalDetail.GSTDebit = journalDetail.DocTaxDebit != null ? Math.Round(((decimal)(journalDetail.DocTaxDebit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                journalDetail.GSTCredit = journalDetail.DocTaxCredit != null ? Math.Round(((decimal)(journalDetail.DocTaxCredit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                journalDetail.GSTTaxDebit = journalDetail.DocDebit != null ? Math.Round(((decimal)(journalDetail.DocDebit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                journalDetail.GSTTaxCredit = journalDetail.DocCredit != null ? Math.Round(((decimal)(journalDetail.DocCredit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                journalDetail.COAId = detail.COAId;
                journalDetail.IsPLAccount = detail.IsPLAccount;
                journalDetail.ExchangeRate = journal.ExchangeRate;
                journalDetail.EntityId = detail.EntityId;
                journalDetail.GSTExchangeRate = journal.GSTExchangeRate;

                journalDetail.JournalId = newJournal.Id;
                journalDetail.ServiceCompanyId = journalModel.ServiceCompanyId;
                journalDetail.DocDate = journalModel.ReversalDate;
                journalDetail.PostingDate = journalModel.ReversalDate;
                journalDetail.SystemRefNo = newJournal.SystemReferenceNo;
                journalDetail.DocNo = newJournal.DocNo;
                journalDetail.DocumentDetailId = Guid.NewGuid();
                journalDetail.DocType = DocTypeConstants.JournalVocher;
                journalDetail.DocSubType = DocSubTypeConstants.Auto_Reversal;
                journalDetail.ObjectState = ObjectState.Added;
                journalDetail.RecOrder = recOrder;
                journalDetail.BaseCurrency = journalModel.BaseCurrency;
                journalDetail.DocCurrency = journalModel.DocCurrency;
                recOrder = journalDetail.RecOrder;
                journalDetail.ObjectState = ObjectState.Added;
                _journalDetailService.Insert(journalDetail);
                lstDetails.Add(journalDetail);
                if (journalModel.IsGstSettings == true && detail.TaxRate != null)
                {
                    JournalDetail journalGstDetail = new JournalDetail();
                    journalGstDetail.Id = Guid.NewGuid();
                    FillJvGstDetail(newJournal, journalGstDetail, detail);
                    journalGstDetail.RecOrder = detail.RecOrder;
                    journalGstDetail.DocumentDetailId = journalDetail.Id;
                    if (gstAccount != null)
                    {
                        journalGstDetail.AccountName = gstAccount.Name;
                        journalGstDetail.COAId = gstAccount.Id;
                    }
                    journalGstDetail.ObjectState = ObjectState.Added;
                    _journalDetailService.Insert(journalGstDetail);
                    lstDetails.Add(journalGstDetail);
                }

            }
            decimal? baseDebitTotal = lstDetails.Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
            decimal? baseCreditTotal = lstDetails.Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
            if (baseDebitTotal != baseCreditTotal)
            {
                bool? isCredit = null;
                SaveBalancingBaseDebitandBaseCredit(baseDebitTotal, baseCreditTotal, journalModel, newJournal.Id, newJournal.DocNo, newJournal.DocSubType, out isCredit, false);

                if (isCredit == true)
                {
                    newJournal.GrandBaseDebitTotal = baseDebitTotal;
                    newJournal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                }
                else
                {
                    newJournal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                    newJournal.GrandBaseCreditTotal = baseCreditTotal;
                }
            }
            else
            {
                newJournal.GrandBaseDebitTotal = baseDebitTotal;
                newJournal.GrandBaseCreditTotal = baseCreditTotal;
            }
            newJournal.ObjectState = ObjectState.Added;
            _journalService.Insert(newJournal);

            _UnitOfWorkAsync.SaveChanges();
            #region Commented_code_for_analytics


            //if (newJournal.JournalDetails.Any())
            //{
            //    if (coa != null)
            //    {
            //        if (journalModel.JournalDetailModels.Count == 1)
            //        {
            //            foreach (var lstcoa in newJournal.JournalDetails.Where(a => (a.IsTax == false || a.IsTax == null)))
            //            {
            //                lstcoa.CorrAccountId = lstcoa.COAId;
            //                lstcoa.ObjectState = ObjectState.Modified;
            //                _journalDetailService.Update(lstcoa);
            //            }
            //        }
            //        else if (journalModel.JournalDetailModels.Count == 2)
            //        {
            //            long firstCoa = newJournal.JournalDetails.Where(a => (a.RecOrder == 1 || a.RecOrder == null) && (a.IsTax == false || a.IsTax == null)).Select(a => a.COAId).FirstOrDefault();
            //            long secondCoa = newJournal.JournalDetails.Where(a => (a.RecOrder == 2 || a.RecOrder == null) && (a.IsTax == false || a.IsTax == null)).Select(a => a.COAId).FirstOrDefault();
            //            foreach (var lstcoa in newJournal.JournalDetails.Where(a => (a.IsTax == false || a.IsTax == null)))
            //            {
            //                lstcoa.CorrAccountId = lstcoa.RecOrder == 1 ? secondCoa : firstCoa;
            //                //if (lstcoa.CorrAccountId == 0)
            //                //    lstcoa.CorrAccountId = _journal.JournalDetails.Where(a => a.RecOrder == null).Select(a => a.COAId).FirstOrDefault();
            //                lstcoa.ObjectState = ObjectState.Modified;
            //                _journalDetailService.Update(lstcoa);
            //            }
            //        }
            //        else
            //        {
            //            foreach (var lstcoa in newJournal.JournalDetails.Where(a => (a.IsTax == false || a.IsTax == null)))
            //            {
            //                lstcoa.CorrAccountId = coa.Id;
            //                lstcoa.ObjectState = ObjectState.Modified;
            //                _journalDetailService.Update(lstcoa);
            //            }
            //        }
            //    }
            //    _UnitOfWorkAsync.SaveChanges();
            //}
            #endregion
        }

        #endregion

        #region kendo grids
        public IQueryable<JournalModelK> GetAllPostedsK(long companyId)
        {
            List<JournalModelK> lstJournalF = new List<JournalModelK>();
            //var lstPostedJournals = _journalService.GetAllJVPostedByCompanyId(companyId);
            var lstPostedJournals = _journalService.GetAllPostedJournals(companyId);
            if (lstPostedJournals.Any())
            {
                try
                {
                    foreach (var journal in lstPostedJournals)
                    {
                        JournalModelK journalModel = new JournalModelK();
                        FillKendoMethod(journalModel, journal);
                        lstJournalF.Add(journalModel);
                    }
                }
                catch (Exception ex)
                {
                    LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                }
            }
            return lstJournalF.OrderByDescending(c => c.CreatedDate).AsQueryable();
            //return _journalService.GetaAllJournalPostedById(companyId);
        }

        public IQueryable<JournalModelParkedK> GetAllParkedsK(string username, long companyId)
        {
            //List<JournalModelParkedK> lstParkedJournal = new List<JournalModelParkedK>();
            //var lstParkedJournals = _journalService.GetaAllJournalParkedById(companyId).ToList();
            //if (lstParkedJournals.Any())
            //{
            //    try
            //    {
            //        foreach (var journal in lstParkedJournals)
            //        {
            //            JournalModelParkedK journalModel = new JournalModelParkedK();
            //            FillAllParkedKendo(journalModel, journal);
            //            lstParkedJournal.Add(journalModel);
            //        }
            //    }
            //    catch (Exception ex)
            //    {

            //    }
            //}
            //return lstParkedJournal.OrderBy(c => c.CreatedDate).AsQueryable();
            return _journalService.GetaAllJVParkedById(username, companyId);
        }

        //public IQueryable<JournalModelRecurringK> GetAllRecurringsK(long companyId)
        //{
        //    List<JournalModelRecurringK> lstRecuringJournal = new List<JournalModelRecurringK>();
        //    var lstRecuringJournals = _journalService.GetAllRecurringsByCompanyId(companyId);
        //    if (lstRecuringJournals.Any())
        //    {
        //        try
        //        {
        //            foreach (var journal in lstRecuringJournals)
        //            {
        //                JournalModelRecurringK journalModel = new JournalModelRecurringK();
        //                FillAllRecurringKendo(journalModel, journal);
        //                lstRecuringJournal.Add(journalModel);
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
        //        }
        //    }
        //    return lstRecuringJournal.OrderByDescending(c => c.CreatedDate).AsQueryable();
        //    //return _journalService.GetaAllJVRecurringById(companyId);
        //}
        public IQueryable<JournalModelRecurringK> GetAllRecurringsK(long companyId, string username)
        {
            return _journalService.GetAllRecurringsByCompanyId(companyId, username);
        }

        public IQueryable<JournalModelParkedK> GetAllVoidedJournalK(long companyId)
        {
            //List<JournalModelParkedK> lstParkedJournal = new List<JournalModelParkedK>();
            //var lstAllVoidsJournals = _journalService.GetAllJVVoidByCompanyId(companyId);
            //if (lstAllVoidsJournals.Any())
            //{
            //    try
            //    {
            //        foreach (var journal in lstAllVoidsJournals)
            //        {
            //            JournalModelParkedK journalModel = new JournalModelParkedK();
            //            FillAllParkedKendo(journalModel, journal);
            //            lstParkedJournal.Add(journalModel);
            //        }
            //    }
            //    catch (Exception ex)
            //    {

            //    }
            //}
            //return lstParkedJournal.OrderBy(c => c.CreatedDate).AsQueryable();
            return _journalService.GetaAllVoidedK(companyId);
        }

        public IQueryable<JournalModelK> GetAllPostedJournal(long companyId, Guid? recurringId)
        {
            return _journalService.GetAllPostedJournal(companyId, recurringId).AsQueryable();
        }

        //new modified KendoGrid
        public async Task<IQueryable<JournalModelK>> NewGetAllPostedJournalsK(long companyId, string userName)
        {
            return await _journalService.NewGetAllPostedjournals(companyId, userName);
        }
        #endregion

        #region Private Methods
        private string GetAutoNumberByEntityType(long companyId, Journal lastInvoice, string documentState, AppsWorld.JournalVoucherModule.Entities.AutoNumber _autoNo, ref bool? isEdit)
        {
            string outPutNumber = null;
            //isEdit = false;

            if (_autoNo != null)
            {
                if (_autoNo.IsEditable == true)
                {
                    outPutNumber = GetJournalNewDocumentNo(companyId, documentState);
                    //invDTO.IsEditable = true;
                    isEdit = true;
                }
                else
                {
                    //invDTO.IsEditable = false;
                    isEdit = false;
                    //List<Invoice> lstInvoice = _invoiceEntityService.GetAllInvoiceByCIDandType(companyid, DocTypeConstants.Invoice);
                    string autonoFormat = _autoNo.Format.Replace("{YYYY}", DateTime.UtcNow.Year.ToString()).Replace("{MM/YYYY}", string.Format("{0:00}", DateTime.UtcNow.Month) + "/" + DateTime.UtcNow.Year.ToString());
                    string number = "1";
                    if (lastInvoice != null)
                    {
                        if (_autoNo.Format.Contains("{MM/YYYY}"))
                        {
                            //var lastCreatedInvoice = lstInvoice.FirstOrDefault();
                            if (lastInvoice.CreatedDate.Value.Month != DateTime.UtcNow.Month)
                            {
                                //number = "1";
                                outPutNumber = autonoFormat + number.PadLeft(_autoNo.CounterLength.Value, '0');
                            }
                            else
                            {
                                string output = (Convert.ToInt32(_autoNo.GeneratedNumber) + 1).ToString();
                                outPutNumber = autonoFormat + output.PadLeft(_autoNo.CounterLength.Value, '0');
                            }
                        }
                        else
                        {
                            string output = (Convert.ToInt32(_autoNo.GeneratedNumber) + 1).ToString();
                            outPutNumber = autonoFormat + output.PadLeft(_autoNo.CounterLength.Value, '0');
                        }
                    }
                    else
                    {
                        string output = (Convert.ToInt32(_autoNo.GeneratedNumber)).ToString();
                        outPutNumber = autonoFormat + output.PadLeft(_autoNo.CounterLength.Value, '0');
                        //counter = Convert.ToInt32(value);
                    }
                }
            }
            return outPutNumber;
        }

        private void FillJournalModel(JournalModel journalModel, Journal journal)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournalModel_method);
            journalModel.Id = journal.Id;
            journalModel.CompanyId = journal.CompanyId;
            journalModel.CreatedDate = journal.CreatedDate;
            journalModel.IsLocked = journal.IsLocked;
            journalModel.DocCurrency = journal.DocSubType == DocTypeConstants.Revaluation ? journal.ExCurrency : journal.DocCurrency;
            journalModel.DocDate = journal.DocDate;
            journalModel.PostingDate = journal.PostingDate;
            journalModel.DocDescription = journal.DocumentDescription;
            journalModel.DocNo = journal.DocNo;
            journalModel.IsBaseCurrencyJV = journal.IsBaseCurrencyJV;
            journalModel.NextDue = journal.NextDue;
            journalModel.LastPosted = journal.LastPosted;
            journalModel.DocumentState = journal.DocumentState;
            journalModel.DocType = journal.DocType;
            journalModel.DocSubType = journal.DocSubType;
            journalModel.ExCurrency = journal.ExCurrency;
            journalModel.ExDurationFrom = journal.ExDurationFrom;
            journalModel.exDurationTo = journal.ExDurationTo;
            journalModel.ExchangeRate = journal.ExchangeRate != null ? journal.ExchangeRate : 0;
            journalModel.BaseCurrency = journal.ExCurrency;
            string DocuNo = _commonApplicationService.StringCharactersReplaceFunction(journal.DocNo);

            journalModel.Path = DocumentConstants.Journals + "/" + DocuNo;

            journalModel.IsWithdrawal = journal.IsWithdrawal;

            journalModel.GrandBaseCreditTotal = journalModel.IsCopyReversal != true ? Convert.ToDouble(journal.GrandBaseCreditTotal) : Convert.ToDouble(journal.GrandBaseDebitTotal);
            journalModel.GrandBaseDebitTotal = journalModel.IsCopyReversal != true ? Convert.ToDouble(journal.GrandBaseDebitTotal) : Convert.ToDouble(journal.GrandBaseCreditTotal);
            journalModel.GrandDocCreditTotal = journalModel.IsCopyReversal != true ? Convert.ToDouble(journal.GrandDocCreditTotal) : Convert.ToDouble(journal.GrandDocDebitTotal);
            journalModel.GrandDocDebitTotal = journalModel.IsCopyReversal != true ? Convert.ToDouble(journal.GrandDocDebitTotal) : Convert.ToDouble(journal.GrandDocCreditTotal);




            journalModel.ServiceCompanyId = journal.ServiceCompanyId;


            journalModel.SystemReferenceNumber = journal.SystemReferenceNo;
            journalModel.ActualSysRefNo = journal.SystemReferenceNo;
            journalModel.UserCreated = journal.UserCreated;
            journalModel.ModifiedBy = journal.ModifiedBy;
            journalModel.ModifiedDate = journal.ModifiedDate;
            journalModel.Version = "0x" + string.Concat(Array.ConvertAll(journal.Version, x => x.ToString("X2")));
            if (journal.IsAutoReversalJournal == true)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_and_checking_IsAutoReversalJournal_is_true_or_not);
                journalModel.ReversalDate = journal.DocType == DocTypeConstants.Revaluation ? journal.ReversalDate.Value.AddDays(1) : journal.ReversalDate;
            }
            journalModel.Remarks = journal.Remarks;
            journalModel.IsNoSupportingDocument = journal.IsNoSupportingDocs;
            journalModel.IsBaseCurrencyRateChanged = journal.IsBaseCurrencyRateChanged;
            journalModel.IsGSTCurrencyRateChanged = journal.IsGSTCurrencyRateChanged;
            journalModel.ISMultiCurrency = journal.IsMultiCurrency;
            journalModel.IsRecurringJournal = journal.IsRecurringJournal;
            journalModel.IsAutoReversalJournal = journal.IsAutoReversalJournal;
            journalModel.IsGstSettings = journal.IsGstSettings;
            journalModel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            journalModel.NoSupportingDocument = journal.NoSupportingDocument;
            journalModel.RecurringJournalName = journal.RecurringJournalName;
            journalModel.CreationType = journal.CreationType;
            journalModel.GSTTotalAmount = journal.GSTTotalAmount;
            journalModel.Status = journal.Status;
            journalModel.FrequencyValue = journal.FrequencyValue;
            journalModel.FrequencyType = journal.FrequencyType;
            journalModel.FrequencyEndDate = journal.FrequencyEndDate;
            journalModel.GstExchangeRate = journal.GSTExchangeRate;
            journalModel.GstdurationFrom = journal.GSTExDurationFrom;
            journalModel.GstDurationTo = journal.GSTExDurationTo;
            journalModel.exDurationTo = journal.ExDurationTo;
            journalModel.GstReportingCurrency = journal.GSTExCurrency;
            journalModel.BalanceAmount = journal.BalanceAmount;
            journalModel.BaseAmount = Math.Round((decimal)(journal.GrandBaseDebitTotal != null ? journal.GrandBaseDebitTotal : 0) * (decimal)(journal.ExchangeRate != null ? journal.ExchangeRate : 0), 2);
            journalModel.BankClearingDate = journal.BankClearingDate;
            if (journal.EntityId != null)
            {
                var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
                if (entity != null)
                {
                    journalModel.EntityName = entity.Name;
                    journalModel.VendorType = entity.VendorType;
                }
            }


            if (journal.DocSubType != DocTypeConstants.Revaluation)
            {
                if (journal.ReverseParentId != null)
                {
                    journalModel.ReverseParentRef = _journalService.GetJournalRefNo(journal.ReverseParentId.Value, journal.CompanyId);
                    journalModel.ReverseParentRefId = journal.ReverseParentId;
                }

            }
            else
            {
                journalModel.ReverseParentRefId = journal.ReverseParentRefId;
            }
            journalModel.IsPosted = false;
            //journalModel.ISAllowDisAllow = journal.ISAllowDisAllow;

            var lstJurnalDetail = _journalDetailService.GetAllJournalDetailsByid(journalModel.Id);
            //long roundingCOAID = _chartOfAccountService.GetByNameAndCompanyId(/*"Rounding Account"*/COANameConstants.Rounding, journalModel.CompanyId);
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Got_the_JournalDetail_thru_GetAllJournalDetailsByid_method);
            List<JournalDetailModel> lstjdModel = new List<JournalDetailModel>();
            foreach (var journalDetail in lstJurnalDetail/*.Where(a => a.COAId != roundingCOAID)*/)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_foreach_loop_of_ListJournalDetail);
                JournalDetailModel jDModel = new JournalDetailModel();
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.FillJournalDetailToModel_method_came);
                if (journalModel.IsCopyReversal != true)
                    FillJournalDetailToModel(jDModel, journalDetail, journal.IsBaseCurrencyJV);
                else
                {
                    if (journal.IsGstSettings == true)
                    {
                        List<TaxCode> lstTaxCode = _taxCodeService.GetTaxCodesByIds(journal.JournalDetails.Where(c => c.TaxId != null || c.TaxId != 0).Select(c => c.TaxId.Value).ToList());
                        if (lstTaxCode.Any())
                            FillJournalCoprReverseDetailToModel(jDModel, journalDetail, lstTaxCode, journal.IsBaseCurrencyJV);
                    }
                    else
                        FillJournalCoprReverseDetailToModel(jDModel, journalDetail, null, journal.IsBaseCurrencyJV);
                }
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_FillJournalDetailToModel_method);
                jDModel.JournalId = journalDetail.JournalId;
                lstjdModel.Add(jDModel);
            }
            journalModel.JournalDetailModels = lstjdModel.OrderBy(x => x.RecOrder).ToList();

            //List<JournalGSTDetail> lstjournalGstDetails = _journalGSTDetailService.GetAllJournalGSTDetails(journalModel.Id);
            //List<JournalGSTDetail> lstjournalGstDetails1 = new List<JournalGSTDetail>();
            //foreach (JournalGSTDetail jGstd in lstjournalGstDetails)
            //{
            //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Entered_into_foreach_loop_of_JournalGSTDetail);
            //    jGstd.TaxCodes = null;
            //    var taxidcode = _taxCodeService.GetTaxiId(jGstd.TaxId);
            //    jGstd.TaxCode = taxidcode.Code;
            //    jGstd.TaxIdCode = taxidcode.Code != "NA" ? taxidcode.Code + "-" + taxidcode.TaxRate + (taxidcode.TaxRate != null ? "%" : "NA") + "(" + taxidcode.TaxType[0] + ")" : taxidcode.Code;
            //    lstjournalGstDetails1.Add(jGstd);
            //}
            //journalModel.JournalGSTDetails = lstjournalGstDetails;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_FillJournalModel_method);
        }

        private void FillJournalDetailmodel(JournalDetail journalDetail, JournalDetailModel jDModel, Journal journal)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournalDetailmodel_method);
            journalDetail.Id = Guid.NewGuid();
            journalDetail.DocumentId = journal.Id;
            journalDetail.TaxId = jDModel.TaxId;
            journalDetail.TaxRate = jDModel.TaxRate;
            journalDetail.DocumentAmount = jDModel.DocumentAmount;
            journalDetail.AccountDescription = jDModel.AccountDescription;
            journalDetail.AllowDisAllow = jDModel.AllowDisAllow;

            journalDetail.DocCredit = journal.IsBaseCurrencyJV != true ? jDModel.DocCredit : null;
            journalDetail.DocCreditTotal = jDModel.DocCreditTotal;
            journalDetail.DocDebit = journal.IsBaseCurrencyJV != true ? jDModel.DocDebit : null;
            journalDetail.DocDebitTotal = jDModel.DocDebitTotal;
            journalDetail.DocTaxCredit = journal.IsBaseCurrencyJV != true ? jDModel.DocTaxCredit : null;
            journalDetail.DocTaxDebit = journal.IsBaseCurrencyJV != true ? jDModel.DocTaxDebit : null;

            //newlly modifeied code
            journalDetail.BaseCredit = journal.IsBaseCurrencyJV == true ? jDModel.DocCredit : journalDetail.DocCredit != null ? journal.ExCurrency != journal.DocCurrency ? (Math.Round(Convert.ToDecimal(journal.ExchangeRate) == null ? Convert.ToDecimal(journalDetail.DocCredit) : (decimal)(journalDetail.DocCredit * journal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : journalDetail.DocCredit : null;
            journalDetail.BaseCreditTotal = journalDetail.BaseCreditTotal;
            //journalDetail.BaseDebit = _journalNew.IsMultiCurrency == false ? detail.DocDebit : detail.BaseDebit;
            journalDetail.BaseDebit = journal.IsBaseCurrencyJV == true ? jDModel.DocDebit : journalDetail.DocDebit != null ? journal.ExCurrency != journal.DocCurrency ? (Math.Round(Convert.ToDecimal(journal.ExchangeRate) == null ? Convert.ToDecimal(journalDetail.DocDebit) : (decimal)(journalDetail.DocDebit * journal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : journalDetail.DocDebit : null;
            journalDetail.BaseDebitTotal = journalDetail.BaseDebitTotal;

            journalDetail.BaseTaxCredit = journal.IsBaseCurrencyJV == true ? jDModel.DocTaxCredit != null ? (Math.Round(Convert.ToDecimal(journal.GSTExchangeRate) == null ? Convert.ToDecimal(jDModel.DocTaxCredit) : Convert.ToDecimal(jDModel.DocTaxCredit * journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null :
                journalDetail.DocTaxCredit != null ? (Math.Round((decimal?)journal.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxCredit : (decimal)(journalDetail.DocTaxCredit * journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

            journalDetail.BaseTaxDebit = journal.IsBaseCurrencyJV == true ? jDModel.DocTaxDebit != null ? (Math.Round(Convert.ToDecimal(journal.GSTExchangeRate) == null ? Convert.ToDecimal(jDModel.DocTaxDebit) : Convert.ToDecimal(jDModel.DocTaxDebit * journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null : journalDetail.DocTaxDebit != null ? (Math.Round((decimal?)journal.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxDebit : (decimal)(journalDetail.DocTaxDebit * journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;


            journalDetail.GSTDebit = journalDetail.DocTaxDebit != null ? Math.Round(((decimal)(journalDetail.DocTaxDebit * (journal.GSTExchangeRate != null ? journal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
            journalDetail.GSTCredit = journalDetail.DocTaxCredit != null ? Math.Round(((decimal)(journalDetail.DocTaxCredit * (journal.GSTExchangeRate != null ? journal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

            journalDetail.GSTTaxDebit = journalDetail.DocDebit != null ? Math.Round(((decimal)(journalDetail.DocDebit * (journal.GSTExchangeRate != null ? journal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
            journalDetail.GSTTaxCredit = journalDetail.DocCredit != null ? Math.Round(((decimal)(journalDetail.DocCredit * (journal.GSTExchangeRate != null ? journal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

            journalDetail.PostingDate = journal.PostingDate;

            journalDetail.COAId = jDModel.COAId;

            journalDetail.IsPLAccount = jDModel.IsPLAccount;
            journalDetail.ExchangeRate = journal.ExchangeRate;
            journalDetail.EntityId = jDModel.EntityId;
            journalDetail.GSTExchangeRate = journal.GSTExchangeRate;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_FillJournalDetailmodel);
        }
        private void FillJvGstDetail(Journal oldJournal, JournalDetail journal, JournalDetailModel Jmodel)
        {
            journal.JournalId = oldJournal.Id;
            journal.DocumentId = oldJournal.Id;
            journal.Nature = oldJournal.Nature;
            journal.ServiceCompanyId = oldJournal.ServiceCompanyId;
            journal.DocNo = oldJournal.DocNo;
            journal.SystemRefNo = oldJournal.SystemReferenceNo;
            journal.DocType = DocTypeConstants.JournalVocher;
            journal.AccountDescription = oldJournal.DocumentDescription;
            journal.DocDate = oldJournal.DocDate.Date;
            journal.PostingDate = oldJournal.DocDate.Date;
            journal.DocSubType = oldJournal.DocSubType;
            journal.DocCurrency = oldJournal.DocCurrency;
            journal.BaseCurrency = oldJournal.ExCurrency;
            journal.ExchangeRate = oldJournal.ExchangeRate;
            journal.GSTExCurrency = oldJournal.GSTExCurrency;
            journal.GSTExchangeRate = oldJournal.GSTExchangeRate;
            if (Jmodel.TaxId != null)
            {
                TaxCode tax = _taxCodeService.GetTaxById(Jmodel.TaxId);
                journal.TaxId = tax.Id;
                journal.TaxRate = tax.TaxRate;
                journal.TaxType = tax.TaxType;
            }

            if (oldJournal.DocSubType == "Reversal" && oldJournal.DocumentState == "Reversed")
            {
                if (Jmodel.DocTaxDebit >= 0)
                {
                    journal.DocCredit = Jmodel.DocTaxDebit;
                    journal.BaseCredit = Math.Round((decimal)journal.ExchangeRate == null ? (decimal)journal.DocCredit : (decimal)(journal.DocCredit * oldJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                    journal.GSTCredit = journal.DocCredit == 0 ? 0 : journal.DocCredit * oldJournal.GSTExchangeRate;
                }
                if (Jmodel.DocTaxCredit >= 0)
                {
                    journal.DocDebit = Jmodel.DocTaxCredit;
                    journal.BaseDebit = Math.Round((decimal)journal.ExchangeRate == null ? (decimal)journal.DocDebit : (decimal)(journal.DocDebit * oldJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                    journal.GSTDebit = journal.DocDebit == 0 ? 0 : journal.DocDebit * oldJournal.GSTExchangeRate;
                }
            }
            else
            {
                if (Jmodel.DocTaxDebit >= 0)
                {
                    journal.DocDebit = oldJournal.IsBaseCurrencyJV != true ? Jmodel.DocTaxDebit : null;
                    journal.BaseDebit = Math.Round((decimal)journal.ExchangeRate == null ? (decimal)Jmodel.DocTaxDebit : (decimal)(Jmodel.DocTaxDebit * oldJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                    journal.GSTDebit = Jmodel.DocTaxDebit == 0 ? 0 : Jmodel.DocTaxDebit * oldJournal.GSTExchangeRate;
                }
                if (Jmodel.DocTaxCredit >= 0)
                {
                    journal.DocCredit = oldJournal.IsBaseCurrencyJV != true ? Jmodel.DocTaxCredit : null;
                    journal.BaseCredit = Math.Round((decimal)journal.ExchangeRate == null ? (decimal)Jmodel.DocTaxCredit : (decimal)(Jmodel.DocTaxCredit * oldJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                    journal.GSTCredit = Jmodel.DocTaxCredit == 0 ? 0 : Jmodel.DocTaxCredit * oldJournal.GSTExchangeRate;
                }
            }
            journal.IsTax = true;
        }

        private string GetJournalNewDocumentNo(long CompanyId, string documentState)
        {
            Journal journal = _journalService.CreateJournalDocNo(CompanyId, documentState);
            string strOldDocNo = String.Empty, strNewDocNo = String.Empty, strNewNo = String.Empty;
            if (journal != null)
            {
                string strOldNo = String.Empty;
                Journal duplicatJournal;
                int index;
                strOldDocNo = journal.DocNo != null ? journal.DocNo : string.Empty;

                for (int i = strOldDocNo.Length - 1; i >= 0; i--)
                {
                    if (Char.IsDigit(strOldDocNo[i]))
                        strOldNo = strOldDocNo[i] + strOldNo;
                    else
                        break;
                }
                long docNo = 0;
                try
                { docNo = long.Parse(strOldNo); }
                catch { }

                index = strOldDocNo.LastIndexOf(strOldNo);

                do
                {
                    docNo++;
                    strNewNo = docNo.ToString().PadLeft(strOldNo.Length, '0');
                    strNewDocNo = (docNo == 1) ? strOldDocNo + strNewNo : strOldDocNo.Substring(0, index) + strNewNo;

                    duplicatJournal = _journalService.GetDocNoByDocumentSate(strNewDocNo, CompanyId, documentState);
                } while (duplicatJournal != null);
            }
            return strNewDocNo;
        }
        private string GetJournalNewDocumentNo1(long CompanyId, string docno)
        {
            Journal journal = _journalService.CreateJournalDocNo(CompanyId);
            string strOldDocNo = String.Empty, strNewDocNo = String.Empty, strNewNo = String.Empty;
            if (journal != null)
            {
                string strOldNo = String.Empty;
                Journal duplicatJournal;
                int index;
                strOldDocNo = docno;

                for (int i = strOldDocNo.Length - 1; i >= 0; i--)
                {
                    if (Char.IsDigit(strOldDocNo[i]))
                        strOldNo = strOldDocNo[i] + strOldNo;
                    else
                        break;
                }
                long docNo = 0;
                try
                { docNo = long.Parse(strOldNo); }
                catch { }

                index = strOldDocNo.LastIndexOf(strOldNo);

                do
                {
                    docNo++;
                    strNewNo = docNo.ToString().PadLeft(strOldNo.Length, '0');
                    strNewDocNo = (docNo == 1) ? strOldDocNo + strNewNo : strOldDocNo.Substring(0, index) + strNewNo;

                    duplicatJournal = _journalService.GetDocNo(strNewDocNo, CompanyId);
                } while (duplicatJournal != null);
            }
            return strNewDocNo;
        }
        string value = "";
        public string GenerateAutoNumberForType(long companyId, string Type, string docSubtype, string entityType, string companyCode)
        {
            AutoNumber _autoNo = _autoNumberService.GetAutoNumber(companyId, entityType);
            string generatedAutoNumber = "";

            if (Type == DocTypeConstants.JournalVocher)
            {
                generatedAutoNumber = GenerateFromFormat(_autoNo.EntityType, _autoNo.Format, Convert.ToInt32(_autoNo.CounterLength), _autoNo.GeneratedNumber, companyId, docSubtype, Type, _autoNo, companyCode);

                if (_autoNo != null)
                {
                    _autoNo.GeneratedNumber = value;
                    _autoNo.IsDisable = true;
                    _autoNo.ObjectState = ObjectState.Modified;
                    _autoNumberService.Update(_autoNo);
                }
                var _autonumberCompany = _autoNumberCompanyService.GetAutoNumberCompany(_autoNo.Id);
                if (_autonumberCompany.Any())
                {
                    AutoNumberCompany _autoNumberCompanyNew = _autonumberCompany.FirstOrDefault();
                    _autoNumberCompanyNew.GeneratedNumber = value;
                    _autoNumberCompanyNew.AutonumberId = _autoNo.Id;
                    _autoNumberCompanyNew.ObjectState = ObjectState.Modified;
                    _autoNumberCompanyService.Update(_autoNumberCompanyNew);
                }
                else
                {
                    AutoNumberCompany _autoNumberCompanyNew = new AutoNumberCompany();
                    _autoNumberCompanyNew.GeneratedNumber = value;
                    _autoNumberCompanyNew.AutonumberId = _autoNo.Id;
                    _autoNumberCompanyNew.Id = Guid.NewGuid();
                    _autoNumberCompanyNew.ObjectState = ObjectState.Added;
                    _autoNumberCompanyService.Insert(_autoNumberCompanyNew);
                }
            }
            return generatedAutoNumber;
        }
        public string GenerateFromFormat(string Type, string companyFormatFrom, int counterLength, string IncreamentVal, long companyId, string docSubtype, string docType, AutoNumber autonumber, string Companycode = null)
        {
            List<Journal> lstJournal = null;
            int? currentMonth = 0;
            bool ifMonthExists = false;

            string documentState = "";
            string OutputNumber = "";
            string counter = "";
            string companyFormatHere = companyFormatFrom.ToUpper();

            if (companyFormatHere.Contains("{YYYY}"))
            {
                companyFormatHere = companyFormatHere.Replace("{YYYY}", DateTime.Now.Year.ToString());
            }
            else if (companyFormatHere.Contains("{MM/YYYY}"))
            {
                companyFormatHere = companyFormatHere.Replace("{MM/YYYY}", string.Format("{0:00}", DateTime.Now.Month) + "/" + DateTime.Now.Year.ToString());
                currentMonth = DateTime.Now.Month;
                ifMonthExists = true;
            }
            else if (companyFormatHere.Contains("{COMPANYCODE}"))
            {
                companyFormatHere = companyFormatHere.Replace("{COMPANYCODE}", Companycode);
            }
            int? lastCreatedDate = 0;
            int? lastCreatedYear = 0;
            double val = 0;
            if (docType == DocTypeConstants.JournalVocher)
            {
                //if (isParkedJournal == true)
                //{
                //    lstJournal = _journalService.GetJournalByCompanyIdAndDocSubType(companyId, docSubtype);
                //    List<Journal> lstParkedJournal = lstJournal.Where(a => a.DocSubType == docSubtype).OrderByDescending(a => a.CreatedDate).ToList();
                //    lastCreatedDate = lstParkedJournal.Select(a => a.CreatedDate.Value.Month).FirstOrDefault();
                //    lastCreatedYear = lstParkedJournal.Select(a => a.CreatedDate.Value.Year).FirstOrDefault();
                //}
                //if (isAutoReversal == true && isPosted == false)
                //{
                //    lstJournal = _journalService.GetJournalByCompanyIdAndDocSubType(companyId, docSubtype);
                //    List<Journal> lstParkedJournal = lstJournal.Where(a => a.DocSubType == docSubtype).OrderByDescending(a => a.CreatedDate).ToList();
                //    lastCreatedDate = lstParkedJournal.Select(a => a.CreatedDate.Value.Month).FirstOrDefault();
                //    lastCreatedYear = lstParkedJournal.Select(a => a.CreatedDate.Value.Year).FirstOrDefault();
                //}
                //else
                //{
                //    if (docSubtype == DocSubTypeConstants.General)
                //    {
                //        lstJournal = _journalService.GetAllPostedJournalByCid(companyId);
                //    }
                //    else
                //        lstJournal = _journalService.GetJournalByCompanyId(companyId, docSubtype == DocSubTypeConstants.Auto_Reversal ? documentState = JournalState.Parked : docSubtype == DocSubTypeConstants.Recurring ? documentState = JournalState.Recurring : documentState = JournalState.Posted);

                //    lastCreatedDate = lstJournal.Select(a => a.CreatedDate.Value.Month).FirstOrDefault();
                //    lastCreatedYear = lstJournal.Select(a => a.CreatedDate.Value.Year).FirstOrDefault();
                //}

                if (autonumber.EntityType == "Recurring Journal")
                {
                    lstJournal = _journalService.GetJournalByCompanyId(companyId, DocSubTypeConstants.Recurring, DocSubTypeConstants.Recurring);
                    lastCreatedDate = lstJournal.Select(a => a.CreatedDate.Value.Month).FirstOrDefault();
                    lastCreatedYear = lstJournal.Select(a => a.CreatedDate.Value.Year).FirstOrDefault();
                }
                else if (autonumber.EntityType == DocTypeConstants.JournalVocher)
                {
                    lstJournal = _journalService.GetAllPostedJournalByCid(companyId);
                    lastCreatedDate = lstJournal.Select(a => a.CreatedDate.Value.Month).FirstOrDefault();
                    lastCreatedYear = lstJournal.Select(a => a.CreatedDate.Value.Year).FirstOrDefault();
                }

                if (lstJournal.Any() && ifMonthExists)
                {
                    if (DateTime.Now.Year == lastCreatedYear)
                    {
                        if (lastCreatedDate == currentMonth)
                        {
                            //AutoNumber autonumber = _autoNumberService.GetAutoNumber(companyId, Type);
                            foreach (var journal in lstJournal)
                            {
                                if (journal.SystemReferenceNo != autonumber.Preview)
                                {
                                    val = Convert.ToUInt32(IncreamentVal);
                                    break;
                                }
                                else
                                {
                                    val = Convert.ToInt32(IncreamentVal) + 1;
                                    break;
                                }
                            }
                        }
                        else
                            val = 1;
                    }
                    val = 1;
                }
                else if (lstJournal.Any() && ifMonthExists == false)
                {
                    //AutoNumber autonumber = _autoNumberService.GetAutoNumber(companyId, Type);
                    foreach (var journal in lstJournal)
                    {
                        if (journal.SystemReferenceNo != autonumber.Preview)
                        {
                            val = Convert.ToInt32(IncreamentVal);
                            break;
                        }
                        else
                        {
                            val = Convert.ToInt32(IncreamentVal) + 1;
                            break;
                        }
                    }
                }
                else
                {
                    val = Convert.ToInt32(IncreamentVal);
                }
            }
            if (counterLength == 1)
                counter = string.Format("{0:0}", val);
            else if (counterLength == 2)
                counter = string.Format("{0:00}", val);
            else if (counterLength == 3)
                counter = string.Format("{0:000}", val);
            else if (counterLength == 4)
                counter = string.Format("{0:0000}", val);
            else if (counterLength == 5)
                counter = string.Format("{0:00000}", val);
            else if (counterLength == 6)
                counter = string.Format("{0:000000}", val);
            else if (counterLength == 7)
                counter = string.Format("{0:0000000}", val);
            else if (counterLength == 8)
                counter = string.Format("{0:00000000}", val);
            else if (counterLength == 9)
                counter = string.Format("{0:000000000}", val);
            else if (counterLength == 10)
                counter = string.Format("{0:0000000000}", val);

            value = counter;
            OutputNumber = companyFormatHere + counter;

            if (lstJournal.Any())
            {
                OutputNumber = GetNewNumber(lstJournal, Type, OutputNumber, counter, companyFormatHere, counterLength);
            }
            return OutputNumber;
        }
        private string GetNewNumber(List<Journal> lstJournal, string type, string outputNumber, string counter, string format, int counterLength)
        {
            string val1 = outputNumber;
            string val2 = "";
            var invoice = lstJournal.Where(a => a.SystemReferenceNo == outputNumber).FirstOrDefault();
            bool isNotexist = false;
            int i = Convert.ToInt32(counter);
            if (invoice != null)
            {
                while (isNotexist == false)
                {
                    i++;
                    string length = i.ToString();
                    value = length.PadLeft(counterLength, '0');
                    val2 = format + value;
                    var inv = lstJournal.Where(c => c.SystemReferenceNo == val2).FirstOrDefault();
                    if (inv == null)
                        isNotexist = true;
                }
                val1 = val2;

            }
            return val1;
        }

        #region JournalGSTDetails_commented_code
        //private void UpdateJournalGSTDetails(JournalModel TObject, Journal _journalNew)
        //{
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_UpdateJournalGSTDetails_method);
        //    foreach (JournalGSTDetail detail in TObject.JournalGSTDetails)
        //    {
        //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_foreach_loop_of_JournalGSTDetail);
        //        if (detail.RecordStatus == "Added")
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_if_condition_of_JournalGSTDetail_and_checking_RecordStatus_is_Added_or_not);
        //            detail.ObjectState = ObjectState.Added;
        //            _journalNew.JournalGSTDetails.Add(detail);
        //        }

        //        else if (detail.RecordStatus != "Added" && detail.RecordStatus != "Deleted")
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_else_if_condition_of_JournalGSTDetail_and_checking_RecordStatus_is_Added_and_Deleted);
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_GetJournalGSTDetailsById_method);
        //            JournalGSTDetail journalGSTDetail = _journalGSTDetailService.GetJournalGSTDetailsById(detail.Id);
        //            if (journalGSTDetail != null)
        //            {
        //                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_journalGSTDetail_null_or_not);
        //                journalGSTDetail.JournalId = detail.JournalId;
        //                journalGSTDetail.TaxId = detail.TaxId;
        //                journalGSTDetail.TaxAmount = detail.TaxAmount;
        //                //journalGSTDetail.TaxCode = detail.TaxCode;
        //                journalGSTDetail.TotalAmount = detail.TotalAmount;

        //                journalGSTDetail.Amount = detail.Amount;
        //                journalGSTDetail.ObjectState = ObjectState.Modified;

        //            }
        //        }
        //        else if (detail.RecordStatus == "Deleted")
        //        {
        //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_RecordStatus_deleted_or_not);
        //            JournalGSTDetail journalGSTDetail = _journalNew.JournalGSTDetails.Where(a => a.Id == detail.Id).FirstOrDefault();
        //            if (journalGSTDetail != null)
        //            {
        //                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_journalGSTDetail_null_or_not_in_if_condition);
        //                journalGSTDetail.ObjectState = ObjectState.Deleted;
        //            }
        //        }
        //    }
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_UpdateJournalGSTDetails_method);
        //}
        #endregion



        private void UpdateJournalDetails(JournalModel TObject, Journal _journalNew, List<Guid> jdNewLineIds, out int? order)
        {
            int? count = 0;
            order = 0;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.UpdateJournalDetails_method_came);
            foreach (JournalDetailModel detail in TObject.JournalDetailModels)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_foreach_loop_of_UpdateJournalDetails_method);
                if (detail.RecordStatus == "Added")
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_RecordStatus_is_added_or_not);
                    JournalDetail journalDetail = new JournalDetail();
                    journalDetail.Id = Guid.NewGuid();
                    journalDetail.DocumentId = _journalNew.Id;
                    journalDetail.AccountDescription = detail.AccountDescription;
                    journalDetail.AllowDisAllow = detail.AllowDisAllow;
                    journalDetail.ServiceCompanyId = _journalNew.ServiceCompanyId;
                    journalDetail.SystemRefNo = _journalNew.SystemReferenceNo;
                    journalDetail.DocSubType = _journalNew.DocSubType;
                    journalDetail.DocType = DocTypeConstants.JournalVocher;
                    journalDetail.DocNo = _journalNew.DocNo;
                    journalDetail.DocDate = _journalNew.DocDate.Date;
                    journalDetail.COAId = detail.COAId;
                    journalDetail.DocCredit = TObject.IsBaseCurrencyJV != true ? detail.DocCredit : null;
                    journalDetail.DocCreditTotal = detail.DocCreditTotal;
                    journalDetail.DocDebit = TObject.IsBaseCurrencyJV != true ? detail.DocDebit : null;
                    journalDetail.DocDebitTotal = detail.DocDebitTotal;
                    journalDetail.DocTaxCredit = TObject.IsBaseCurrencyJV != true ? detail.DocTaxCredit : null;
                    journalDetail.DocTaxDebit = TObject.IsBaseCurrencyJV != true ? detail.DocTaxDebit : null;
                    journalDetail.BaseCredit = TObject.IsBaseCurrencyJV == true ? detail.DocCredit : journalDetail.DocCredit != null ? TObject.BaseCurrency != TObject.DocCurrency ? (Math.Round((decimal)TObject.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * TObject.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : detail.DocCredit : null;
                    journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                    journalDetail.BaseDebit = TObject.IsBaseCurrencyJV == true ? detail.DocDebit : journalDetail.DocDebit != null ? TObject.BaseCurrency != TObject.DocCurrency ? (Math.Round((decimal)TObject.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * TObject.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : detail.DocDebit : null;
                    journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
                    journalDetail.BaseTaxCredit = TObject.IsBaseCurrencyJV == true ? detail.DocTaxCredit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)detail.DocTaxCredit : (decimal)(detail.DocTaxCredit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null : journalDetail.DocTaxCredit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)journalDetail.DocTaxCredit : (decimal)(journalDetail.DocTaxCredit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

                    journalDetail.BaseTaxDebit = TObject.IsBaseCurrencyJV == true ? detail.DocTaxDebit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)detail.DocTaxDebit : (decimal)(detail.DocTaxDebit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null : journalDetail.DocTaxDebit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)journalDetail.DocTaxDebit : (decimal)(journalDetail.DocTaxDebit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

                    journalDetail.GSTDebit = journalDetail.DocTaxDebit != null ? Math.Round(((decimal)(journalDetail.DocTaxDebit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                    journalDetail.GSTCredit = journalDetail.DocTaxCredit != null ? Math.Round(((decimal)(journalDetail.DocTaxCredit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                    journalDetail.GSTTaxDebit = journalDetail.DocDebit != null ? Math.Round(((decimal)(journalDetail.DocDebit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                    journalDetail.GSTTaxCredit = journalDetail.DocCredit != null ? Math.Round(((decimal)(journalDetail.DocCredit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;


                    journalDetail.RecOrder = count = count == 0 ? TObject.JournalDetailModels.Max(c => c.RecOrder) + 1 : count;
                    count++;
                    order = count;
                    journalDetail.JournalId = detail.JournalId;
                    journalDetail.IsPLAccount = detail.IsPLAccount;
                    journalDetail.ExchangeRate = _journalNew.ExchangeRate;
                    journalDetail.GSTExchangeRate = _journalNew.GSTExchangeRate;
                    journalDetail.TaxId = detail.TaxId;
                    journalDetail.TaxRate = detail.TaxRate;
                    journalDetail.EntityId = detail.EntityId;
                    journalDetail.DocCurrency = TObject.DocCurrency;
                    journalDetail.BaseCurrency = TObject.BaseCurrency;
                    journalDetail.TaxType = detail.TaxType;
                    journalDetail.PostingDate = _journalNew.DocDate;
                    journalDetail.DocumentDetailId = new Guid();
                    journalDetail.ObjectState = ObjectState.Added;
                    _journalNew.JournalDetails.Add(journalDetail);
                    jdNewLineIds.Add(journalDetail.Id);
                }
                else if (detail.RecordStatus != "Added" && detail.RecordStatus != "Deleted")
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_else_if_condition_and_checking_RecordStatus_is_added_and_deleted);
                    JournalDetail journalDetail = _journalDetailService.GetJournalDetailsById(detail.Id);
                    if (journalDetail != null)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_journalDetail_is_null_or_not);
                        journalDetail.AccountDescription = detail.AccountDescription;
                        journalDetail.AllowDisAllow = detail.AllowDisAllow;
                        journalDetail.ServiceCompanyId = _journalNew.ServiceCompanyId;
                        journalDetail.SystemRefNo = _journalNew.SystemReferenceNo;
                        journalDetail.DocType = DocTypeConstants.JournalVocher;
                        journalDetail.DocSubType = _journalNew.DocSubType;
                        journalDetail.DocNo = _journalNew.DocNo;
                        journalDetail.DocDate = _journalNew.DocDate.Date;
                        journalDetail.COAId = detail.COAId;
                        journalDetail.DocCredit = TObject.IsBaseCurrencyJV != true ? detail.DocCredit : null;
                        journalDetail.DocCreditTotal = detail.DocCreditTotal;
                        journalDetail.DocDebit = TObject.IsBaseCurrencyJV != true ? detail.DocDebit : null;
                        journalDetail.DocDebitTotal = detail.DocDebitTotal;
                        journalDetail.DocTaxCredit = TObject.IsBaseCurrencyJV != true ? detail.DocTaxCredit : null;
                        journalDetail.DocTaxDebit = TObject.IsBaseCurrencyJV != true ? detail.DocTaxDebit : null;
                        journalDetail.DocCurrency = TObject.DocCurrency;
                        journalDetail.BaseCurrency = TObject.BaseCurrency;
                        journalDetail.ExchangeRate = _journalNew.ExchangeRate;
                        journalDetail.GSTExchangeRate = _journalNew.GSTExchangeRate;
                        journalDetail.JournalId = detail.JournalId;
                        journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                        journalDetail.BaseDebitTotal = detail.BaseDebitTotal;

                        journalDetail.BaseCredit = TObject.IsBaseCurrencyJV == true ? detail.DocCredit : journalDetail.DocCredit != null ? TObject.BaseCurrency != TObject.DocCurrency ? (Math.Round((decimal)TObject.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * TObject.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : detail.DocCredit : null;

                        journalDetail.BaseDebit = TObject.IsBaseCurrencyJV == true ? detail.DocDebit : journalDetail.DocDebit != null ? TObject.BaseCurrency != TObject.DocCurrency ? (Math.Round((decimal)TObject.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * TObject.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : detail.DocDebit : null;

                        journalDetail.BaseTaxCredit = TObject.IsBaseCurrencyJV == true ? detail.DocTaxCredit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)detail.DocTaxCredit : (decimal)(detail.DocTaxCredit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null : journalDetail.DocTaxCredit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)journalDetail.DocTaxCredit : (decimal)(journalDetail.DocTaxCredit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

                        journalDetail.BaseTaxDebit = TObject.IsBaseCurrencyJV == true ? detail.DocTaxDebit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)detail.DocTaxDebit : (decimal)(detail.DocTaxDebit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null : journalDetail.DocTaxDebit != null ? (Math.Round((decimal?)TObject.GstExchangeRate == null ? (decimal)journalDetail.DocTaxDebit : (decimal)(journalDetail.DocTaxDebit * TObject.GstExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

                        journalDetail.GSTDebit = journalDetail.DocTaxDebit != null ? Math.Round(((decimal)(journalDetail.DocTaxDebit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                        journalDetail.GSTCredit = journalDetail.DocTaxCredit != null ? Math.Round(((decimal)(journalDetail.DocTaxCredit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                        journalDetail.GSTTaxDebit = journalDetail.DocDebit != null ? Math.Round(((decimal)(journalDetail.DocDebit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                        journalDetail.GSTTaxCredit = journalDetail.DocCredit != null ? Math.Round(((decimal)(journalDetail.DocCredit * (TObject.GstExchangeRate != null ? TObject.GstExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                        journalDetail.TaxId = detail.TaxId;
                        journalDetail.TaxRate = detail.TaxRate;
                        journalDetail.IsPLAccount = detail.IsPLAccount;
                        journalDetail.EntityId = detail.EntityId;
                        journalDetail.PostingDate = _journalNew.DocDate;
                        journalDetail.DocumentDetailId = new Guid();
                        journalDetail.TaxType = detail.TaxType;
                        journalDetail.ObjectState = ObjectState.Modified;

                    }
                }
                else if (detail.RecordStatus == "Deleted")
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_else_if_condition_and_checking_RecordStatus_is_deleted_or_not);
                    JournalDetail journalDetail = _journalDetailService.GetJournalDetailsById(detail.Id);
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_in_through_JournalDetail_and_store_into_journalDetail);
                    if (journalDetail != null)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_in_JournalDetail_is_null_or_not);
                        journalDetail.ObjectState = ObjectState.Deleted;
                    }
                }
                //Added for Rounding account order issue
                if (order == 0 || order == null)
                    order = TObject.JournalDetailModels.Max(d => d.RecOrder) + 1;
            }
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_UpdateJournalDetails_method);
        }

        private void InsertJournal(Journal journalNew, JournalModel TObject)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_InsertJournal_method);
            journalNew.DocNo = TObject.DocNo;
            journalNew.DocumentDescription = TObject.DocDescription;
            journalNew.DocType = DocTypeConstants.JournalVocher;
            journalNew.DocCurrency = TObject.DocCurrency;
            journalNew.DocDate = TObject.DocDate.Date;
            journalNew.PostingDate = TObject.DocDate.Date;
            journalNew.CompanyId = TObject.CompanyId;
            journalNew.CreatedDate = TObject.CreatedDate;
            journalNew.ActualSysRefNo = TObject.ActualSysRefNo;
            journalNew.IsShow = true;
            journalNew.ExCurrency = TObject.BaseCurrency;
            journalNew.IsBaseCurrencyRateChanged = TObject.IsBaseCurrencyRateChanged;
            journalNew.IsGSTCurrencyRateChanged = TObject.IsGSTCurrencyRateChanged;
            journalNew.IsMultiCurrency = TObject.ISMultiCurrency;
            journalNew.NoSupportingDocument = TObject.NoSupportingDocument;
            journalNew.IsNoSupportingDocs = TObject.IsNoSupportingDocument;
            journalNew.ModifiedBy = TObject.ModifiedBy;
            journalNew.ModifiedDate = TObject.ModifiedDate;
            journalNew.UserCreated = TObject.UserCreated;
            journalNew.DueDate = null;
            journalNew.Remarks = TObject.Remarks;
            journalNew.SystemReferenceNo = TObject.SystemReferenceNumber;
            journalNew.ExchangeRate = TObject.ExchangeRate;
            journalNew.ExDurationFrom = TObject.ExDurationFrom;
            journalNew.ExDurationTo = TObject.exDurationTo;
            journalNew.IsBaseCurrencyRateChanged = TObject.IsBaseCurrencyRateChanged;
            journalNew.IsRecurringJournal = TObject.IsRecurringJournal;
            journalNew.RecurringJournalName = TObject.RecurringJournalName;
            journalNew.IsAutoReversalJournal = TObject.IsAutoReversalJournal;
            journalNew.ServiceCompanyId = TObject.ServiceCompanyId;
            journalNew.ReversalDate = TObject.ReversalDate;
            journalNew.CreationType = TObject.DocSubType == DocTypeConstants.Claim ? "System" : "Manual";
            journalNew.GSTExCurrency = TObject.GstReportingCurrency;
            journalNew.IsGstSettings = TObject.IsGstSettings;
            if (TObject.IsGstSettings == true)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_IsGstSettings_is_present_or_not);
                journalNew.GSTExchangeRate = TObject.GstExchangeRate;
                journalNew.GSTExDurationFrom = TObject.GstdurationFrom;
                journalNew.GSTExDurationTo = TObject.GstDurationTo;

            }
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_GetModuleStatus_method_through_CompanySettingService_and_store_into_IsSegmentReporting);

            journalNew.GrandDocCreditTotal = (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocCredit)) + (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocTaxCredit));
            journalNew.GrandDocDebitTotal = (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocDebit)) + (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocTaxDebit));

            journalNew.GrandBaseCreditTotal = journalNew.GrandDocCreditTotal != null ? journalNew.ExchangeRate != null ? Math.Round(((decimal)journalNew.GrandDocCreditTotal * (decimal)journalNew.ExchangeRate), 2, MidpointRounding.AwayFromZero) : journalNew.GrandDocCreditTotal : 0;
            journalNew.GrandBaseDebitTotal = journalNew.GrandDocDebitTotal != null ? journalNew.ExchangeRate != null ? Math.Round(((decimal)journalNew.GrandDocDebitTotal * (decimal)journalNew.ExchangeRate), 2, MidpointRounding.AwayFromZero) : journalNew.GrandDocDebitTotal : 0;

            if (journalNew.GrandDocCreditTotal != journalNew.GrandDocDebitTotal)
            {
                throw new Exception(JournalConstant.Total_debit_must_equal_to_total_credit);
            }

            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_InsertJournal_method);
        }
        private void ReversalDetails(JournalDetail _journalDetail, JournalDetailModel _detailModel)
        {
            _journalDetail.AccountDescription = _detailModel.AccountDescription;
            _journalDetail.AllowDisAllow = _detailModel.AllowDisAllow;
            _journalDetail.COAId = _detailModel.COAId;

            _journalDetail.DocCredit = _detailModel.DocDebit;
            _journalDetail.DocCreditTotal = _detailModel.DocDebitTotal;
            _journalDetail.DocDebit = _detailModel.DocCredit;
            _journalDetail.DocDebitTotal = _detailModel.DocCreditTotal;
            _journalDetail.DocTaxCredit = _detailModel.DocTaxDebit;
            _journalDetail.DocTaxDebit = _detailModel.DocTaxCredit;

            _journalDetail.BaseCreditTotal = _detailModel.BaseCreditTotal;
            _journalDetail.BaseDebitTotal = _detailModel.BaseDebitTotal;
            _journalDetail.TaxId = _detailModel.TaxId;
            _journalDetail.TaxRate = _detailModel.TaxRate;
            _journalDetail.EntityId = _detailModel.EntityId;
            _journalDetail.TaxType = _detailModel.TaxType;
            _journalDetail.IsPLAccount = _detailModel.IsPLAccount;
        }
        private void UpdateReversalDetail(JournalModel TObject, Journal reversal, List<Guid> jdNewLineIds, out int? order)
        {

            #region Update Reverse Journal Model

            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_InsertJournal_method);
            reversal.DocumentDescription = TObject.DocDescription;
            reversal.DocCurrency = TObject.DocCurrency;
            reversal.ServiceCompanyId = TObject.ServiceCompanyId;
            reversal.DocDate = Convert.ToDateTime(TObject.ReversalDate);
            reversal.IsShow = true;
            reversal.ExCurrency = TObject.BaseCurrency;
            reversal.IsBaseCurrencyRateChanged = TObject.IsBaseCurrencyRateChanged;
            reversal.IsGSTCurrencyRateChanged = TObject.IsGSTCurrencyRateChanged;
            reversal.IsMultiCurrency = TObject.ISMultiCurrency;
            reversal.NoSupportingDocument = TObject.NoSupportingDocument;
            reversal.IsNoSupportingDocs = TObject.IsNoSupportingDocument;
            reversal.ModifiedBy = TObject.ModifiedBy;
            reversal.ModifiedDate = TObject.ModifiedDate;
            reversal.DueDate = null;
            reversal.Remarks = TObject.Remarks;
            reversal.ExchangeRate = TObject.ExchangeRate;
            reversal.ExDurationFrom = TObject.ExDurationFrom;
            reversal.ExDurationTo = TObject.exDurationTo;
            reversal.IsBaseCurrencyRateChanged = TObject.IsBaseCurrencyRateChanged;
            reversal.IsRecurringJournal = TObject.IsRecurringJournal;
            reversal.RecurringJournalName = TObject.RecurringJournalName;
            reversal.GSTExCurrency = TObject.GstReportingCurrency;
            reversal.IsGstSettings = TObject.IsGstSettings;
            if (TObject.IsGstSettings == true)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_IsGstSettings_is_present_or_not);
                reversal.GSTExchangeRate = TObject.GstExchangeRate;
                reversal.GSTExDurationFrom = TObject.GstdurationFrom;
                reversal.GSTExDurationTo = TObject.GstDurationTo;

            }
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_GetModuleStatus_method_through_CompanySettingService_and_store_into_IsSegmentReporting);

            reversal.GrandDocCreditTotal = (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocCredit)) + (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocTaxCredit));
            reversal.GrandDocDebitTotal = (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocDebit)) + (TObject.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocTaxDebit));

            reversal.GrandBaseCreditTotal = reversal.GrandDocCreditTotal != null ? reversal.ExchangeRate != null ? Math.Round(((decimal)reversal.GrandDocCreditTotal * (decimal)reversal.ExchangeRate), 2, MidpointRounding.AwayFromZero) : reversal.GrandDocCreditTotal : 0;
            reversal.GrandBaseDebitTotal = reversal.GrandDocDebitTotal != null ? reversal.ExchangeRate != null ? Math.Round(((decimal)reversal.GrandDocDebitTotal * (decimal)reversal.ExchangeRate), 2, MidpointRounding.AwayFromZero) : reversal.GrandDocDebitTotal : 0;

            if (reversal.GrandDocCreditTotal != reversal.GrandDocDebitTotal)
            {
                throw new Exception(JournalConstant.Total_debit_must_equal_to_total_credit);
            }
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_InsertJournal_method);
            reversal.ObjectState = ObjectState.Modified;
            #endregion

            #region Update Journal Detail For Reversal

            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_else_if_condition_and_checking_RecordStatus_is_added_and_deleted);
            order = 0;
            int? count = 0;
            foreach (var detail in TObject.JournalDetailModels)
            {
                JournalDetail reverseDetail = reversal.JournalDetails.FirstOrDefault(x => x.RecOrder == detail.RecOrder);
                if (detail.RecordStatus == "Added")
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_RecordStatus_is_added_or_not);
                    JournalDetail journalDetail = new JournalDetail();
                    ReversalDetails(journalDetail, detail);

                    journalDetail.JournalId = detail.JournalId;
                    journalDetail.Id = Guid.NewGuid();
                    journalDetail.DocumentId = reversal.Id;
                    journalDetail.ServiceCompanyId = reversal.ServiceCompanyId;
                    journalDetail.SystemRefNo = reversal.SystemReferenceNo;
                    journalDetail.DocSubType = reversal.DocSubType;
                    journalDetail.DocType = DocTypeConstants.JournalVocher;
                    journalDetail.DocNo = reversal.DocNo;
                    journalDetail.DocDate = reversal.DocDate;

                    journalDetail.BaseCredit = journalDetail.DocCredit != null ? reversal.ExCurrency != reversal.DocCurrency ? (Math.Round((decimal)reversal.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * reversal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : journalDetail.DocCredit : null;
                    journalDetail.BaseDebit = journalDetail.DocDebit != null ? reversal.ExCurrency != reversal.DocCurrency ? (Math.Round((decimal)reversal.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * reversal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : journalDetail.DocDebit : null;
                    journalDetail.BaseTaxCredit = journalDetail.DocTaxCredit != null ? (Math.Round((decimal)reversal.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxCredit : (decimal)(journalDetail.DocTaxCredit * reversal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;
                    journalDetail.BaseTaxDebit = journalDetail.DocTaxDebit != null ? (Math.Round((decimal)reversal.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxDebit : (decimal)(journalDetail.DocTaxDebit * reversal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;

                    journalDetail.GSTDebit = journalDetail.DocTaxDebit != null ? Math.Round(((decimal)(journalDetail.DocTaxDebit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                    journalDetail.GSTCredit = journalDetail.DocTaxCredit != null ? Math.Round(((decimal)(journalDetail.DocTaxCredit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                    journalDetail.GSTTaxDebit = journalDetail.DocDebit != null ? Math.Round(((decimal)(journalDetail.DocDebit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                    journalDetail.GSTTaxCredit = journalDetail.DocCredit != null ? Math.Round(((decimal)(journalDetail.DocCredit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                    journalDetail.RecOrder = count = count == 0 ? TObject.JournalDetailModels.Max(c => c.RecOrder) + 1 : count;
                    count++;
                    order = count;

                    journalDetail.ExchangeRate = reversal.ExchangeRate;
                    journalDetail.GSTExchangeRate = reversal.GSTExchangeRate;
                    journalDetail.DocCurrency = TObject.DocCurrency;
                    journalDetail.BaseCurrency = TObject.BaseCurrency;

                    journalDetail.PostingDate = reversal.DocDate;
                    journalDetail.DocumentDetailId = Guid.NewGuid();
                    journalDetail.ObjectState = ObjectState.Added;
                    reversal.JournalDetails.Add(journalDetail);
                    jdNewLineIds.Add(journalDetail.Id);
                }
                else if (detail.RecordStatus != "Added" && detail.RecordStatus != "Deleted")
                {
                    if (reverseDetail != null)
                    {
                        ReversalDetails(reverseDetail, detail);
                        reverseDetail.ServiceCompanyId = TObject.ServiceCompanyId;
                        reverseDetail.DocumentAmount = detail.DocumentAmount;
                        reverseDetail.DocCurrency = TObject.DocCurrency;

                        reverseDetail.BaseCredit = reverseDetail.DocCredit != null ? reversal.ExCurrency != reversal.DocCurrency ? (Math.Round((decimal)reversal.ExchangeRate == null ? (decimal)reverseDetail.DocCredit : (decimal)(reverseDetail.DocCredit * reversal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : reverseDetail.DocCredit : null;
                        reverseDetail.BaseDebit = reverseDetail.DocDebit != null ? reversal.ExCurrency != reversal.DocCurrency ? (Math.Round((decimal)reversal.ExchangeRate == null ? (decimal)reverseDetail.DocDebit : (decimal)(reverseDetail.DocDebit * reversal.ExchangeRate), 2, MidpointRounding.AwayFromZero)) : reverseDetail.DocDebit : null;
                        reverseDetail.BaseTaxCredit = reverseDetail.DocTaxCredit != null ? (Math.Round((decimal)reversal.GSTExchangeRate == null ? (decimal)reverseDetail.DocTaxCredit : (decimal)(reverseDetail.DocTaxCredit * reversal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;
                        reverseDetail.BaseTaxDebit = reverseDetail.DocTaxDebit != null ? (Math.Round((decimal)reversal.GSTExchangeRate == null ? (decimal)reverseDetail.DocTaxDebit : (decimal)(reverseDetail.DocTaxDebit * reversal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero)) : (decimal?)null;
                        reverseDetail.GSTDebit = reverseDetail.DocTaxDebit != null ? Math.Round(((decimal)(reverseDetail.DocTaxDebit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                        reverseDetail.GSTCredit = reverseDetail.DocTaxCredit != null ? Math.Round(((decimal)(reverseDetail.DocTaxCredit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                        reverseDetail.GSTTaxDebit = reverseDetail.DocDebit != null ? Math.Round(((decimal)(reverseDetail.DocDebit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                        reverseDetail.GSTTaxCredit = reverseDetail.DocCredit != null ? Math.Round(((decimal)(reverseDetail.DocCredit * (reversal.GSTExchangeRate != null ? reversal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                        reverseDetail.ExchangeRate = reversal.ExchangeRate;
                        reverseDetail.GSTExchangeRate = reversal.GSTExchangeRate;
                        reverseDetail.PostingDate = reversal.DocDate;
                        reverseDetail.DocumentDetailId = Guid.NewGuid();
                        reverseDetail.JournalId = reversal.Id;

                        reverseDetail.ObjectState = ObjectState.Modified;
                    }
                }
                else if (detail.RecordStatus == "Deleted")
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_else_if_condition_and_checking_RecordStatus_is_deleted_or_not);
                    JournalDetail journalDetail = _journalDetailService.GetJournalDetailsById(reverseDetail.Id);
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_in_through_JournalDetail_and_store_into_journalDetail);
                    if (journalDetail != null)
                    {
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_in_JournalDetail_is_null_or_not);
                        journalDetail.ObjectState = ObjectState.Deleted;
                    }
                }
                if (order == 0 || order == null)
                    order = TObject.JournalDetailModels.Max(d => d.RecOrder) + 1;
            }

            #endregion
        }


        private bool IsDocumentNumberExists(string DocType, string DocNo, Guid id, long companyId, string docSubtype)
        {
            string DocumentVoidState = "";
            switch (DocType)
            {
                case DocTypeConstants.JournalVocher:
                    DocumentVoidState = JournalState.Void;
                    break;

            }
            Journal doc = _journalService.GetByDocTypeId(id, DocType, DocNo, companyId, docSubtype);
            return doc != null;
        }
        private void FillJournal(Journal journal1, Journal journal)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournal_method);
            journal1.CompanyId = journal.CompanyId;
            journal1.IsBaseCurrencyJV = journal.IsBaseCurrencyJV;
            journal1.CreatedDate = DateTime.UtcNow;
            journal1.DocCurrency = journal.DocCurrency;
            journal1.DocDate = journal.DocDate;
            journal1.PostingDate = journal.DocDate.Date;
            journal1.DueDate = null;
            journal1.EntityId = journal.EntityId;
            //journal1.DocumentDescription = journal.DocumentDescription;
            //journal1.DocNo = journal.DocNo;
            journal1.DocumentState = journal.DocumentState;
            journal1.DocType = journal.DocType;
            //journal1.DocSubType = /*journal.DocSubType*/DocTypeConstants.General;
            journal1.DocSubType = journal.DocType == DocTypeConstants.DoubtFulDebitNote ? "Allocation" : DocSubTypeConstants.Auto_Reversal;
            journal1.ExchangeRate = journal.ExchangeRate;
            journal1.ExCurrency = journal.ExCurrency;
            //journal1.ExDurationFrom = journal.ExDurationFrom;
            //journal1.ExDurationTo = journal.ExDurationTo;
            //journal1.ExchangeRate = journal.ExchangeRate;
            journal1.GSTExchangeRate = journal.GSTExchangeRate;
            journal1.GSTExCurrency = journal.GSTExCurrency;
            //journal1.GSTExDurationFrom = journal.GSTExDurationFrom;
            //journal1.GSTExDurationTo = journal.GSTExDurationTo;
            journal1.GSTTotalAmount = journal.GSTTotalAmount;
            //journal1.SegmentCategory1 = journal.SegmentCategory1;
            //journal1.SegmentCategory2 = journal.SegmentCategory2;
            //journal1.SegmentDetailid1 = journal.SegmentDetailid1;
            //journal1.SegmentDetailid2 = journal.SegmentDetailid2;
            //journal1.SegmentMasterid1 = journal.SegmentMasterid1;
            //journal1.SegmentMasterid2 = journal.SegmentMasterid2;
            journal1.ServiceCompanyId = journal.ServiceCompanyId;
            journal1.Status = journal.Status;
            journal1.SystemReferenceNo = journal.SystemReferenceNo;
            journal1.UserCreated = journal.UserCreated;
            //journal1.Version = journal.Version;
            journal1.ReversalDate = journal.ReversalDate;
            journal1.Remarks = journal.Remarks;
            journal1.RecurringJournalName = journal.RecurringJournalName;
            journal1.FrequencyEndDate = journal.FrequencyEndDate;
            journal1.FrequencyType = journal.FrequencyType;
            journal1.FrequencyValue = journal.FrequencyValue;
            journal1.IsNoSupportingDocument = journal.IsNoSupportingDocument;
            journal1.IsBaseCurrencyRateChanged = journal.IsBaseCurrencyRateChanged;
            journal1.IsGSTCurrencyRateChanged = journal.IsGSTCurrencyRateChanged;
            journal1.IsMultiCurrency = journal.IsMultiCurrency;
            journal1.IsRecurringJournal = journal.IsRecurringJournal;
            //journal1.IsSegmentReporting = journal.IsSegmentReporting;
            journal1.IsNoSupportingDocs = journal.IsNoSupportingDocs;
            journal1.IsAutoReversalJournal = journal.IsAutoReversalJournal;
            journal1.IsGstSettings = journal.IsGstSettings;
            journal1.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            journal1.CreationType = journal.DocType == DocTypeConstants.DoubtFulDebitNote ? "System" : "Manual";
            journal1.GrandBaseCreditTotal = journal.GrandBaseCreditTotal;
            journal1.GrandBaseDebitTotal = journal.GrandBaseDebitTotal;
            journal1.GrandDocCreditTotal = journal.GrandDocCreditTotal;
            journal1.GrandDocDebitTotal = journal.GrandDocDebitTotal;
            journal1.NoSupportingDocument = journal.NoSupportingDocument;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.FillJournal_method_ended);
        }
        private void FillJournalDetail(JournalDetail jDModel, JournalDetail journalDetail)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournalDetail_method);
            jDModel.ObjectState = journalDetail.ObjectState;
            jDModel.DocType = journalDetail.DocType;
            //jDModel.DocSubType = journalDetail.DocSubType;
            jDModel.DocumentId = journalDetail.DocumentId;
            jDModel.BaseCurrency = journalDetail.BaseCurrency;
            jDModel.ExchangeRate = journalDetail.ExchangeRate;
            jDModel.Remarks = journalDetail.Remarks;
            jDModel.DocCurrency = journalDetail.DocCurrency;
            jDModel.ServiceCompanyId = journalDetail.ServiceCompanyId;
            jDModel.BaseAmount = journalDetail.BaseAmount;
            jDModel.IsTax = journalDetail.IsTax;
            jDModel.TaxId = journalDetail.TaxId;
            jDModel.TaxRate = journalDetail.TaxRate;
            jDModel.TaxType = journalDetail.TaxType;
            jDModel.DocumentDetailId = Guid.Empty;
            jDModel.AccountDescription = journalDetail.AccountDescription;
            jDModel.AllowDisAllow = journalDetail.AllowDisAllow;
            jDModel.BaseCredit = journalDetail.BaseDebit;
            jDModel.BaseCreditTotal = journalDetail.BaseDebitTotal;
            jDModel.BaseDebit = journalDetail.BaseCredit;
            jDModel.BaseDebitTotal = journalDetail.BaseCreditTotal;
            jDModel.BaseTaxCredit = journalDetail.BaseTaxDebit;
            jDModel.BaseTaxDebit = journalDetail.BaseTaxCredit;
            jDModel.EntityId = journalDetail.EntityId;
            //jDModel.ChartOfAccount = journalDetail.ChartOfAccount;
            jDModel.COAId = journalDetail.COAId;
            jDModel.DocCredit = journalDetail.DocDebit;
            jDModel.DocCreditTotal = journalDetail.DocDebitTotal;
            jDModel.DocDebit = journalDetail.DocCredit;
            jDModel.DocDebitTotal = journalDetail.DocCreditTotal;
            jDModel.DocTaxCredit = journalDetail.DocTaxDebit;
            jDModel.DocTaxDebit = journalDetail.DocTaxCredit;
            jDModel.GSTDebit = journalDetail.GSTCredit;
            jDModel.GSTCredit = journalDetail.GSTDebit;
            jDModel.GSTTaxDebit = journalDetail.GSTTaxCredit;
            jDModel.GSTTaxCredit = journalDetail.GSTTaxDebit;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_FillJournalDetail_method);
        }
        //private void FillGSTDetails(JournalGSTDetail journalGSTDetail, JournalGSTDetail JGSTD)
        //{
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillGSTDetails_method);
        //    journalGSTDetail.TaxAmount = JGSTD.TaxAmount;
        //    //journalGSTDetail.TaxCode = JGSTD.TaxCode;
        //    journalGSTDetail.TaxId = JGSTD.TaxId;
        //    journalGSTDetail.TotalAmount = JGSTD.TaxAmount;
        //    journalGSTDetail.Amount = JGSTD.Amount;
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_FillGSTDetails_method);
        //}
        private void FillJournalDetailToModel(JournalDetailModel journalDetailModel, JournalDetail jvDetail)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournalDetailToModel_method);
            journalDetailModel.Id = jvDetail.Id;
            var tax = _taxCodeService.GetTaxById(jvDetail.TaxId);
            if (tax != null)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_of_FillJournalDetailToModel_and_check_tax_is_null_or_not);
                journalDetailModel.TaxType = tax.TaxType;
                journalDetailModel.TaxCode = tax.Code;
                journalDetailModel.TaxName = tax.Name;
                journalDetailModel.TaxRate = tax.TaxRate;
                journalDetailModel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA")/* + "(" + tax.TaxType[0] + ")" */: tax.Code;
            }
            //commented code 
            //BeanEntity entity = _beanEntityService.GetEntityById(jvDetail.EntityId);
            //if (entity != null)
            //{
            //    journalDetailModel.EntityId = entity.Id;
            //    journalDetailModel.EntityName = entity.Name;
            //}
            journalDetailModel.EntityId = jvDetail.EntityId;
            journalDetailModel.TaxId = jvDetail.TaxId;
            //journalDetailModel.TaxRate = jvDetail.TaxRate;
            journalDetailModel.AccountDescription = jvDetail.AccountDescription;
            journalDetailModel.AllowDisAllow = jvDetail.AllowDisAllow;
            journalDetailModel.BaseCredit = jvDetail.BaseCredit;
            journalDetailModel.BaseDebit = jvDetail.BaseDebit;
            journalDetailModel.BaseTaxCredit = jvDetail.BaseTaxCredit;
            journalDetailModel.BaseTaxDebit = jvDetail.BaseTaxDebit;
            //var coa = _chartOfAccountService.GetChartOfAccountById(jvDetail.COAId);
            //if (coa != null)
            //{
            //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_of_FillJournalDetailToModel_and_checking_coa_is_null_or_not);
            //    journalDetailModel.AccountName = coa.Name;
            //}
            journalDetailModel.COAId = jvDetail.COAId;
            journalDetailModel.DocCredit = jvDetail.DocCredit;
            journalDetailModel.DocCreditTotal = jvDetail.DocCreditTotal;
            journalDetailModel.DocDebit = jvDetail.DocDebit;
            journalDetailModel.DocDebitTotal = jvDetail.DocDebitTotal;
            journalDetailModel.DocTaxCredit = jvDetail.DocTaxCredit;
            journalDetailModel.DocTaxDebit = jvDetail.DocTaxDebit;
            journalDetailModel.BaseCreditTotal = jvDetail.BaseCreditTotal;
            journalDetailModel.BaseDebitTotal = jvDetail.BaseDebitTotal;
            journalDetailModel.RecOrder = jvDetail.RecOrder;
            journalDetailModel.IsPLAccount = jvDetail.IsPLAccount;
            //journalDetailModel.ClearingState = jvDetail.ClearingState;
            journalDetailModel.ClearingStatus = jvDetail.ClearingStatus;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_FillJournalDetailToModel_method);
        }
        private void FillJournalDetailToModel(JournalDetailModel journalDetailModel, JournalDetail jvDetail, bool? IsBaseCurrencyJV)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournalDetailToModel_method);
            journalDetailModel.Id = jvDetail.Id;
            var tax = _taxCodeService.GetTaxById(jvDetail.TaxId);
            if (tax != null)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_of_FillJournalDetailToModel_and_check_tax_is_null_or_not);
                journalDetailModel.TaxType = tax.TaxType;
                journalDetailModel.TaxCode = tax.Code;
                journalDetailModel.TaxName = tax.Name;
                journalDetailModel.TaxRate = tax.TaxRate;
                journalDetailModel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA")/* + "(" + tax.TaxType[0] + ")" */: tax.Code;
            }
            //commented code 
            //BeanEntity entity = _beanEntityService.GetEntityById(jvDetail.EntityId);
            //if (entity != null)
            //{
            //    journalDetailModel.EntityId = entity.Id;
            //    journalDetailModel.EntityName = entity.Name;
            //}
            journalDetailModel.EntityId = jvDetail.EntityId;
            journalDetailModel.TaxId = jvDetail.TaxId;
            //journalDetailModel.TaxRate = jvDetail.TaxRate;
            journalDetailModel.AccountDescription = jvDetail.AccountDescription;
            journalDetailModel.AllowDisAllow = jvDetail.AllowDisAllow;
            journalDetailModel.BaseCredit = jvDetail.BaseCredit;
            journalDetailModel.BaseDebit = jvDetail.BaseDebit;
            journalDetailModel.BaseTaxCredit = jvDetail.BaseTaxCredit;
            journalDetailModel.BaseTaxDebit = jvDetail.BaseTaxDebit;
            //var coa = _chartOfAccountService.GetChartOfAccountById(jvDetail.COAId);
            //if (coa != null)
            //{
            //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_of_FillJournalDetailToModel_and_checking_coa_is_null_or_not);
            //    journalDetailModel.AccountName = coa.Name;
            //}
            journalDetailModel.COAId = jvDetail.COAId;
            journalDetailModel.DocCredit = IsBaseCurrencyJV != true ? jvDetail.DocCredit : jvDetail.BaseCredit;
            journalDetailModel.DocCreditTotal = jvDetail.DocCreditTotal;
            journalDetailModel.DocDebit = IsBaseCurrencyJV != true ? jvDetail.DocDebit : jvDetail.BaseDebit;
            journalDetailModel.DocDebitTotal = jvDetail.DocDebitTotal;
            journalDetailModel.DocTaxCredit = IsBaseCurrencyJV != true ? jvDetail.DocTaxCredit : (jvDetail.GSTExchangeRate != 1 && jvDetail.BaseTaxCredit != null) ? Math.Round(Convert.ToDecimal(jvDetail.BaseTaxCredit / jvDetail.GSTExchangeRate), 2, MidpointRounding.AwayFromZero) : jvDetail.BaseTaxCredit;
            journalDetailModel.DocTaxDebit = IsBaseCurrencyJV != true ? jvDetail.DocTaxDebit : (jvDetail.GSTExchangeRate != 1 && jvDetail.BaseTaxDebit != null) ? Math.Round(Convert.ToDecimal(jvDetail.BaseTaxDebit / jvDetail.GSTExchangeRate), 2, MidpointRounding.AwayFromZero) : jvDetail.BaseTaxDebit;
            journalDetailModel.BaseCreditTotal = jvDetail.BaseCreditTotal;
            journalDetailModel.BaseDebitTotal = jvDetail.BaseDebitTotal;
            journalDetailModel.RecOrder = jvDetail.RecOrder;
            journalDetailModel.IsPLAccount = jvDetail.IsPLAccount;
            //journalDetailModel.ClearingState = jvDetail.ClearingState;
            journalDetailModel.ClearingStatus = jvDetail.ClearingStatus;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_FillJournalDetailToModel_method);
        }

        private void FillJournalCoprReverseDetailToModel(JournalDetailModel journalDetailModel, JournalDetail jvDetail, List<TaxCode> lstTaxCode, bool? isBaseCurrencyJV)
        {
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_FillJournalDetailToModel_method);
            journalDetailModel.Id = jvDetail.Id;
            if (lstTaxCode != null)
            {
                TaxCode tax = lstTaxCode.Where(c => c.Id == jvDetail.TaxId).FirstOrDefault();
                if (tax != null)
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_of_FillJournalDetailToModel_and_check_tax_is_null_or_not);
                    journalDetailModel.TaxType = tax.TaxType;
                    journalDetailModel.TaxCode = tax.Code;
                    journalDetailModel.TaxName = tax.Name;
                    journalDetailModel.TaxRate = tax.TaxRate;
                    journalDetailModel.TaxId = tax.Id;
                    journalDetailModel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA")/* + "(" + tax.TaxType[0] + ")" */: tax.Code;
                }
            }
            journalDetailModel.EntityId = jvDetail.EntityId;

            //journalDetailModel.TaxIdCode = jvDetail.TaxIdCode;
            //journalDetailModel.TaxRate = jvDetail.TaxRate;
            journalDetailModel.AccountDescription = jvDetail.AccountDescription;
            journalDetailModel.AllowDisAllow = jvDetail.AllowDisAllow;
            journalDetailModel.BaseCredit = jvDetail.BaseDebit;
            journalDetailModel.BaseDebit = jvDetail.BaseCredit;
            journalDetailModel.BaseTaxCredit = jvDetail.BaseTaxDebit;
            journalDetailModel.BaseTaxDebit = jvDetail.BaseTaxCredit;
            journalDetailModel.COAId = jvDetail.COAId;
            journalDetailModel.DocCredit = isBaseCurrencyJV != true ? jvDetail.DocDebit : jvDetail.BaseDebit;
            journalDetailModel.DocCreditTotal = jvDetail.DocDebitTotal;
            journalDetailModel.DocDebit = isBaseCurrencyJV != true ? jvDetail.DocCredit : jvDetail.BaseCredit;
            journalDetailModel.DocDebitTotal = jvDetail.DocCreditTotal;
            journalDetailModel.DocTaxCredit = isBaseCurrencyJV != true ? jvDetail.DocTaxDebit : jvDetail.BaseTaxDebit;
            journalDetailModel.DocTaxDebit = isBaseCurrencyJV != true ? jvDetail.DocTaxCredit : jvDetail.BaseTaxCredit;
            journalDetailModel.BaseCreditTotal = jvDetail.BaseCreditTotal;
            journalDetailModel.BaseDebitTotal = jvDetail.BaseDebitTotal;
            journalDetailModel.RecOrder = jvDetail.RecOrder;
            journalDetailModel.IsPLAccount = jvDetail.IsPLAccount;
            //journalDetailModel.ClearingState = jvDetail.ClearingState;
            journalDetailModel.ClearingStatus = jvDetail.ClearingStatus;
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_FillJournalDetailToModel_method);
        }

        private void FillKendoMethod(JournalModelK journalModel, Journal journal)
        {
            journalModel.Id = journal.Id;
            journalModel.CompanyId = journal.CompanyId;
            journalModel.CreatedDate = journal.CreatedDate;
            journalModel.DocCurrency = journal.DocSubType == DocTypeConstants.Revaluation ? journal.ExCurrency : journal.DocCurrency;
            journalModel.DocDate = journal.DocDate;
            //journalModel.PostingDate = journal.PostingDate;
            //journalModel.DocDescription = journal.DocumentDescription == null || journal.DocumentDescription == string.Empty ? journal.Remarks : journal.DocumentDescription;
            journalModel.DocNo = journal.DocNo;
            journalModel.DocumentState = (journal.ClearingStatus != null && journal.ClearingStatus != string.Empty) ? journal.ClearingStatus : journal.DocumentState;
            journalModel.DocType = journal.DocType;
            journalModel.DocSubType = journal.DocSubType;
            journalModel.DocumentId = journal.DocumentId;
            journalModel.IsSystem = journal.CreationType == "System" ? true : false;
            //journalModel.BaseCurrency = journal.ExCurrency;

            journalModel.GrandBaseCreditTotal = Convert.ToDouble(journal.GrandBaseCreditTotal);
            journalModel.GrandBaseDebitTotal = Convert.ToDouble(journal.GrandBaseDebitTotal);
            journalModel.GrandDocCreditTotal = Convert.ToDouble(journal.GrandDocCreditTotal);
            journalModel.GrandDocDebitTotal = Convert.ToDouble(journal.GrandDocDebitTotal);

            //journalModel.GrandBaseCreditTotal = (double?)(journal.DocType == DocTypeConstants.BillCreditMemo || journal.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.Withdrawal || journalModel.DocType == DocTypeConstants.Payment || journalModel.DocType == DocTypeConstants.CashPayment ? journal.GrandBaseCreditTotal : journal.GrandBaseDebitTotal);
            //journalModel.GrandBaseDebitTotal = (double?)(journal.DocType == DocTypeConstants.BillCreditMemo || journal.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.Withdrawal || journalModel.DocType == DocTypeConstants.Payment || journalModel.DocType == DocTypeConstants.CashPayment ? journal.GrandBaseCreditTotal : journal.GrandBaseDebitTotal);
            //journalModel.GrandDocCreditTotal = (double?)(journal.DocType == DocTypeConstants.BillCreditMemo || journal.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.Withdrawal || journalModel.DocType == DocTypeConstants.Payment || journalModel.DocType == DocTypeConstants.CashPayment ? journal.GrandDocCreditTotal : journal.GrandDocDebitTotal);
            //journalModel.GrandDocDebitTotal = (double?)(journal.DocType == DocTypeConstants.BillCreditMemo || journal.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.Withdrawal || journalModel.DocType == DocTypeConstants.Payment || journalModel.DocType == DocTypeConstants.CashPayment ? journal.GrandDocCreditTotal : journal.GrandDocDebitTotal);


            //if (journal.DocSubType == "Application" || journal.DocSubType == "CM Application")
            //{
            //    journalModel.GrandBaseDebitTotal = (double?)journal.GrandBaseDebitTotal;
            //    journalModel.GrandDocDebitTotal = (double?)journal.GrandDocDebitTotal;
            //}
            //if (journal.DocType == DocTypeConstants.JournalVocher && journal.DocSubType == "General")
            //{
            //    journalModel.GrandDocCreditTotal = (double?)journal.GrandDocCreditTotal;
            //    journalModel.GrandDocDebitTotal = (double?)journal.GrandDocDebitTotal;
            //    journalModel.GrandBaseCreditTotal = journal.DocCurrency == journal.ExCurrency ? (double?)journal.GrandDocCreditTotal : (double?)journal.GrandBaseCreditTotal;
            //    journalModel.GrandBaseDebitTotal = journal.DocCurrency == journal.ExCurrency ? (double?)journal.GrandDocDebitTotal : (double?)journal.GrandBaseDebitTotal;
            //}
            //if (journal.DocType == DocTypeConstants.GLClearing)
            //{
            //    journalModel.GrandDocCreditTotal = Math.Abs(Math.Round((double)journal.AllocatedAmount, 2));
            //    journalModel.GrandDocDebitTotal = Math.Abs(Math.Round((double)journal.AllocatedAmount, 2));
            //    journalModel.GrandBaseCreditTotal = Math.Abs(Math.Round((double)journal.AllocatedAmount, 2));
            //    journalModel.GrandBaseDebitTotal = Math.Abs(Math.Round((double)journal.AllocatedAmount, 2));
            //}
            //if (journal.DocSubType == DocTypeConstants.OpeningBalance)
            //{
            //    journalModel.GrandDocCreditTotal = Math.Round((double)(journal.GrandDocCreditTotal != null ? journal.GrandDocCreditTotal : 0), 2);
            //    journalModel.GrandDocDebitTotal = Math.Round((double)(journal.GrandDocDebitTotal != null ? journal.GrandDocDebitTotal : 0), 2);
            //    journalModel.GrandBaseCreditTotal = Math.Round((double)(journal.GrandBaseCreditTotal != null ? journal.GrandBaseCreditTotal : 0), 2);
            //    journalModel.GrandBaseDebitTotal = Math.Round((double)(journal.GrandBaseDebitTotal != null ? journal.GrandBaseDebitTotal : 0), 2);
            //}
            //if (journal.DocType == DocTypeConstants.BankTransfer)
            //{
            //    //journalModel.GrandDocCreditTotal = journal.IsWithdrawal == true ? Math.Round((double)(journal.GrandDocCreditTotal != null ? journal.GrandDocCreditTotal : 0), 2) : 0;
            //    //journalModel.GrandDocDebitTotal = journal.IsWithdrawal == false ? Math.Round((double)(journal.GrandDocDebitTotal != null ? journal.GrandDocDebitTotal : 0), 2) : 0;
            //    journalModel.GrandDocCreditTotal = journal.GrandDocCreditTotal != null ? (double)journal.GrandDocCreditTotal : 0;
            //    journalModel.GrandDocDebitTotal = journal.GrandDocDebitTotal != null ? (double)journal.GrandDocDebitTotal : 0;
            //    journalModel.GrandBaseCreditTotal = journal.GrandDocCreditTotal != null ? (double)journal.GrandDocCreditTotal : 0;
            //    journalModel.GrandBaseDebitTotal = journal.GrandDocDebitTotal != null ? (double)journal.GrandDocDebitTotal : 0;
            //}


            if (journal.DocSubType == DocTypeConstants.Revaluation)
            {
                journalModel.GrandDocCreditTotal = journal.GrandDocCreditTotal != null ? (double)journal.GrandDocCreditTotal : 0;
                journalModel.GrandDocDebitTotal = journal.GrandDocDebitTotal != null ? (double)journal.GrandDocDebitTotal : 0;
                journalModel.GrandBaseCreditTotal = journal.GrandBaseCreditTotal != null ? (double)journal.GrandBaseCreditTotal : 0;
                journalModel.GrandBaseDebitTotal = journal.GrandBaseDebitTotal != null ? (double)journal.GrandBaseDebitTotal : 0;
                //journalModel.DocDescription = journal.DocumentState == "Reversed" ? DocTypeConstants.Revaluation + "-" + journal.DocDate.ToString("dd/MM/yyyy") : DocTypeConstants.Revaluation + "-" + journal.DocDate.ToString("dd/MM/yyyy") + "(" + "Reversal" + ")";
                //journalModel.DocNo = journal.DocumentState == "Reversed" ? DocTypeConstants.Revaluation + "-" + journal.DocDate.ToString("dd/MM/yyyy") : DocTypeConstants.Revaluation + "-" + journal.DocDate.ToString("dd/MM/yyyy") + "-R";
            }
            //journalModel.ServiceCompanyMOdels.ServiceCompanyId = journal.ServiceCompanyId;

            var company = _companyService.GetById(journal.ServiceCompanyId);
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Get_company_thru_ServiceCompanyId);
            if (company != null)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_and_check_company_is_null_or_not);
                //journalModel.ServiceCompanyMOdels.ServiceCompanyName = company.ShortName;
            }
            //if (journal.EntityId != null)
            //{
            //    var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
            //    if (entity != null)
            //    {
            //        journalModel.EntityName = entity.Name;
            //        journalModel.VendorType = entity.VendorType;
            //    }
            //}
            //journalModel.Status = journal.Status;
            //var termsOfPymt = _termsOfPaymentService.GetById(journal.CreditTermsId);
            journalModel.SystemReferenceNumber = journal.SystemReferenceNo;
            journalModel.UserCreated = journal.UserCreated;
            journalModel.ModifiedBy = journal.ModifiedBy;
            journalModel.ModifiedDate = journal.ModifiedDate;
            //journalModel.CustCreditTerms = termsOfPymt != null && termsOfPymt.TermsType == "Customer" ? termsOfPymt.Name : string.Empty;
            //journalModel.VenCreditTerms = termsOfPymt != null && termsOfPymt.TermsType == "Vendor" ? termsOfPymt.Name : string.Empty;
            //journalModel.Repeating = journal.IsRepeatingInvoice;
            //journalModel.ReceiptrefNo = (journal.DocType == DocTypeConstants.Receipt || journal.DocType == DocTypeConstants.CashSale) ? journal.TransferRefNo : string.Empty;
            //journalModel.PaymentRefNo = journal.DocType == DocTypeConstants.Payment ? journal.TransferRefNo : string.Empty;
            //journalModel.TransferRefNo = journal.DocType == DocTypeConstants.BankTransfer ? journal.TransferRefNo : string.Empty;
            //journalModel.DepositRefNo = journal.DocType == DocTypeConstants.Deposit ? journal.TransferRefNo : string.Empty;
            //journalModel.WithdrawalRefNo = journal.DocType == DocTypeConstants.Withdrawal ? journal.TransferRefNo : string.Empty;
            //journalModel.CPRefNo = journal.DocType == DocTypeConstants.CashPayment ? journal.TransferRefNo : string.Empty;
            //journalModel.PONo = journal.PoNo;
            //journalModel.CreationType = journal.CreationType;
            //journalModel.NoSupportingDocument = journal.NoSupportingDocument;
            journalModel.Status = journal.Status;
            if (journal.DocType == DocTypeConstants.Invoice || journal.DocType == DocTypeConstants.DebitNote || journal.DocType == DocTypeConstants.Bills || journal.DocType == DocTypeConstants.PayrollBill)
            {
                journalModel.BalanceAmount = journal.BalanceAmount;
                //journalModel.BaseBalance = Math.Round((decimal)((journal.BalanceAmount != null ? journalModel.BalanceAmount : 0) * (journal.ExchangeRate != null ? journal.ExchangeRate : 1)), 2);
            }
            journalModel.BaseAmount = (double)((journal.GrandBaseDebitTotal == 0 || journal.GrandBaseDebitTotal == null) ? journal.GrandDocDebitTotal : journal.GrandBaseDebitTotal);
            //journalModel.BankClearingDate = journal.ClearingDate;
            journalModel.ExchangeRate = (journal.ExchangeRate).ToString();
            //journalModel.Mode = journal.ModeOfReceipt;

        }
        private void FillAllParkedKendo(JournalModelParkedK journalModel, Journal journal)
        {
            journalModel.Id = journal.Id;
            journalModel.CompanyId = journal.CompanyId;
            journalModel.CreatedDate = journal.CreatedDate;
            journalModel.DocCurrency = journal.DocSubType == DocTypeConstants.Revaluation ? journal.ExCurrency : journal.DocCurrency;
            journalModel.DocDate = journal.DocDate;
            journalModel.PostingDate = journal.PostingDate;
            journalModel.DocDescription = journal.DocumentDescription;
            journalModel.SystemReferenceNumber = journal.SystemReferenceNo;
            journalModel.DocNo = journal.DocNo;
            journalModel.DocumentState = journal.DocumentState;
            journalModel.NoSupportingDocument = journal.NoSupportingDocument;
            journalModel.DocType = journal.DocType;
            journalModel.DocSubType = journal.DocSubType;
            journalModel.BaseCurrency = journal.ExCurrency;
            var company = _companyService.GetById(journal.ServiceCompanyId);
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Get_company_thru_ServiceCompanyId);
            if (company != null)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_and_check_company_is_null_or_not);
                //journalModel.ServiceCompanyMOdels.ServiceCompanyName = company.ShortName;
            }
            journalModel.ExchangeRate = (journal.ExchangeRate).ToString();
            journalModel.GrandDocCreditTotal = journal.GrandDocCreditTotal != null ? (double)journal.GrandDocCreditTotal : 0;
            journalModel.GrandDocDebitTotal = journal.GrandDocDebitTotal != null ? (double)journal.GrandDocDebitTotal : 0;
            journalModel.GrandBaseCreditTotal = journal.GrandDocCreditTotal != null ? (double)journal.GrandDocCreditTotal : 0;
            journalModel.GrandBaseDebitTotal = journal.GrandDocDebitTotal != null ? (double)journal.GrandDocDebitTotal : 0;
        }
        private void FillAllRecurringKendo(JournalModelRecurringK journalModel, Journal journal)
        {
            journalModel.Id = journal.Id;
            journalModel.CompanyId = journal.CompanyId;
            journalModel.CreatedDate = journal.CreatedDate;
            journalModel.DocCurrency = journal.DocSubType == DocTypeConstants.Revaluation ? journal.ExCurrency : journal.DocCurrency;
            journalModel.DocDescription = journal.DocumentDescription;
            journalModel.SystemReferenceNumber = journal.SystemReferenceNo;
            journalModel.DocType = journal.DocType;
            journalModel.DocSubType = journal.DocSubType;
            journalModel.Version = "0x" + string.Concat(Array.ConvertAll(journal.Version, x => x.ToString("X2")));
            //var company = _companyService.GetById(journal.ServiceCompanyId);
            //LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Get_company_thru_ServiceCompanyId);
            //if (company != null)
            //{
            //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entered_into_if_block_and_check_company_is_null_or_not);
            //    journalModel.ServiceCompanyMOdels.ServiceCompanyName = company.ShortName;
            //}
            if (journal.EntityId != null)
            {
                var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
                if (entity != null)
                {
                    journalModel.EntityName = entity.Name;
                    journalModel.VendorType = entity.VendorType;
                }
            }
            //journalModel.Status = journal.Status;
            var termsOfPymt = _termsOfPaymentService.GetById(journal.CreditTermsId);
            journalModel.UserCreated = journal.UserCreated;
            journalModel.ModifiedBy = journal.ModifiedBy;
            journalModel.IsLocked = journal.IsLocked;
            journalModel.ModifiedDate = journal.ModifiedDate;
            journalModel.CustCreditTerms = termsOfPymt != null && termsOfPymt.TermsType == "Customer" ? termsOfPymt.Name : string.Empty;
            journalModel.VenCreditTerms = termsOfPymt != null && termsOfPymt.TermsType == "Vendor" ? termsOfPymt.Name : string.Empty;
            journalModel.Repeating = journal.IsRepeatingInvoice;
            //journalModel.DocTotal = Math.Round((decimal)(journal.BalanceAmount != null ? journal.BalanceAmount : 0) * (decimal)(journal.ExchangeRate != null ? journal.ExchangeRate : 1), 2);
            journalModel.GrandDocDebitTotal = journal.GrandDocDebitTotal;//changed by lokanath
            journalModel.Status = journal.Status;
            journalModel.RecurringJournalName = journal.RecurringJournalName;
            journalModel.LastPosted = journal.LastPosted;
            journalModel.NextDue = journal.NextDue;
            journalModel.EndDate = journal.EndDate;
            journalModel.FrequencyEndDate = journal.FrequencyEndDate;
            journalModel.FrequencyType = journal.FrequencyType;
            journalModel.FrequencyValue = journal.FrequencyValue;
            journalModel.DocumentState = journal.DocumentState;
            journalModel.DocNo = journal.DocNo;
            journalModel.InternalState = journal.InternalState;
            journalModel.DocDate = journal.DocDate;
        }

        private string GetDocNoForPostedJournal(JournalModel Tobject)
        {
            List<string> lstDocNo = _journalService.GetPostedJournalDocNo(Tobject.CompanyId, JournalState.Posted);
            string documentNo = null;
            string newDocNo = null;
            if (lstDocNo.Any())
            {
                int count = 0;
                string docNo = Tobject.DocNo;
                bool isExist = lstDocNo.Where(a => a.Equals(docNo)).Any();
                while (isExist)
                {
                    count++;
                    documentNo = Tobject.DocNo + "-" + count;
                    if ((lstDocNo.Where(a => a.Equals(documentNo)).Any()) == false)
                        isExist = false;
                }
                newDocNo = documentNo ?? docNo;
            }
            else
                newDocNo = Tobject.DocNo;
            return newDocNo;
        }

        private string GetDocNoForParkedJournal(string DocNo, long companyId, int? counter, string recDocNo)
        {
            List<string> lstDocNo = _journalService.GetPostedJournalDocNo(companyId, JournalState.Parked);
            int? count = counter;
            int? val = count + 1;
            int i = 0;
            string docNo = null;
            string documentNo = null;
            bool isExist = false;
            if (lstDocNo.Any())
            {
                count++;
                docNo = recDocNo + "-" + count;
                isExist = lstDocNo.Where(a => a.Equals(docNo)).Any();
                while (isExist)
                {
                    i++;
                    docNo = null;
                    docNo = recDocNo + "-" + count + "-" + i;
                    if (lstDocNo.Where(a => a.Equals(docNo)).Any() == false)
                    {
                        isExist = false;
                    }
                }
                documentNo = docNo ?? DocNo;

            }
            else
                documentNo = recDocNo + "-" + val;

            return documentNo;
        }

        private string GetDocumentNo(JournalModel tObject, string documentState)
        {
            string documentNumber = null;
            int count = 1;
            bool isExist = false;

            string newDocNo = null;
            string docNo = null;
            string documentNo = null;


            if (documentState == JournalState.Parked)
            {
                docNo = tObject.DocNo + "-" + 2;
                documentNo = tObject.DocNo + "-" + 2;
            }
            else
            {
                docNo = tObject.DocNo + "-" + 1;
                documentNo = tObject.DocNo + "-" + 1;
            }

            List<string> lstDocNo = _journalService.GetPostedJournalDocNo(tObject.CompanyId, documentState);

            isExist = lstDocNo.Where(a => a.Equals(docNo)).Any();
            if (isExist)
            {
                documentNumber = docNo + "-" + count;
                isExist = lstDocNo.Where(a => a.Equals(documentNumber)).Any();
                while (isExist)
                {
                    documentNumber = null;
                    count++;
                    documentNumber = docNo + "-" + count;
                    if (lstDocNo.Where(a => a.Equals(documentNumber)).Any() == false)
                        isExist = false;
                }
                newDocNo = documentNumber;
            }
            else
                newDocNo = docNo;

            return newDocNo;
        }

        private void UpdateParkedJournalDetails(JournalModel TObject, Journal _journalNew, string ConnectionString)
        {
            SqlConnection con = new SqlConnection(ConnectionString);
            con.Open();
            SqlCommand cmd = new SqlCommand("PROC_ParkedJournal_DELETE", con);
            cmd.CommandTimeout = 30;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Id", _journalNew.Id);
            cmd.Parameters.AddWithValue("@IsGst", false);
            int deletedRowCount = cmd.ExecuteNonQuery();
            con.Close();

            int? recordOrder = 0;
            foreach (JournalDetailModel detail in TObject.JournalDetailModels)
            {
                recordOrder++;
                if (detail.RecordStatus != "Deleted")
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_RecordStatus_is_added_or_not);
                    JournalDetail journalDetail = new JournalDetail();
                    journalDetail.Id = Guid.NewGuid();
                    journalDetail.AccountDescription = detail.AccountDescription;
                    journalDetail.AllowDisAllow = detail.AllowDisAllow;
                    journalDetail.BaseCredit = detail.BaseCredit;
                    journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                    journalDetail.BaseDebit = detail.BaseDebit;
                    journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
                    journalDetail.BaseTaxCredit = detail.BaseTaxCredit;
                    journalDetail.BaseTaxDebit = detail.BaseTaxDebit;
                    journalDetail.ServiceCompanyId = _journalNew.ServiceCompanyId;
                    journalDetail.SystemRefNo = _journalNew.SystemReferenceNo;
                    journalDetail.DocSubType = DocSubTypeConstants.Recurring;
                    journalDetail.DocType = DocTypeConstants.JournalVocher;
                    journalDetail.DocNo = _journalNew.DocNo;
                    journalDetail.DocDate = _journalNew.DocDate;
                    //journalDetail.ChartOfAccount = detail.ChartOfAccount;
                    journalDetail.COAId = detail.COAId;
                    journalDetail.DocCredit = detail.DocCredit;
                    journalDetail.DocCreditTotal = detail.DocCreditTotal;
                    journalDetail.DocDebit = detail.DocDebit;
                    journalDetail.DocDebitTotal = detail.DocDebitTotal;
                    journalDetail.DocTaxCredit = detail.DocTaxCredit;
                    journalDetail.DocTaxDebit = detail.DocTaxDebit;
                    journalDetail.RecOrder = recordOrder;
                    recordOrder = journalDetail.RecOrder;
                    journalDetail.JournalId = _journalNew.Id;
                    journalDetail.IsPLAccount = detail.IsPLAccount;
                    //journalDetail.ObjectState = detail.ObjectState;
                    //journalDetail.TaxCode = detail.TaxCode;
                    journalDetail.ExchangeRate = _journalNew.ExchangeRate;
                    journalDetail.GSTExchangeRate = _journalNew.GSTExchangeRate;
                    journalDetail.TaxId = detail.TaxId;
                    journalDetail.EntityId = detail.EntityId;
                    journalDetail.DocCurrency = TObject.DocCurrency;
                    journalDetail.BaseCurrency = TObject.BaseCurrency;
                    journalDetail.TaxType = detail.TaxType;
                    journalDetail.TaxRate = detail.TaxRate;
                    journalDetail.PostingDate = _journalNew.PostingDate;
                    //journalDetail.SegmentCategory1 = _journalNew.SegmentCategory1;
                    //journalDetail.SegmentCategory2 = _journalNew.SegmentCategory2;
                    //journalDetail.SegmentMasterid1 = _journalNew.SegmentMasterid1;
                    //journalDetail.SegmentMasterid2 = _journalNew.SegmentMasterid2;
                    //journalDetail.SegmentDetailid1 = _journalNew.SegmentDetailid1;
                    //journalDetail.SegmentDetailid2 = _journalNew.SegmentDetailid2;
                    journalDetail.DocumentDetailId = new Guid();
                    journalDetail.ObjectState = ObjectState.Added;
                    _journalDetailService.Insert(journalDetail);
                    //_journalNew.JournalDetails.Add(journalDetail);
                }
            }
        }

        #region Commented_code
        //private void UpdateParkedJournalGSTDetails(JournalModel TObject, Journal _journalNew)
        //{
        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_UpdateJournalGSTDetails_method);

        //    if (TObject.JournalGSTDetails.Any())
        //    {
        //        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["AppsWorldDBContext"].ConnectionString);
        //        con.Open();
        //        SqlCommand cmd = new SqlCommand("PROC_ParkedJournal_DELETE", con);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@Id", _journalNew.Id);
        //        cmd.Parameters.AddWithValue("@IsGst", true);
        //        int deletedRowCount = cmd.ExecuteNonQuery();
        //        con.Close();


        //        foreach (JournalGSTDetail detail in TObject.JournalGSTDetails)
        //        {
        //            if (detail.RecordStatus != "Deleted")
        //            {
        //                JournalGSTDetail journalGSTDetail = new JournalGSTDetail();
        //                journalGSTDetail.Id = Guid.NewGuid();
        //                journalGSTDetail.JournalId = _journalNew.Id;
        //                journalGSTDetail.TaxId = detail.TaxId;
        //                journalGSTDetail.TaxAmount = detail.TaxAmount;
        //                //journalGSTDetail.TaxCode = detail.TaxCode;
        //                journalGSTDetail.TotalAmount = detail.TotalAmount;
        //                journalGSTDetail.Amount = detail.Amount;
        //                journalGSTDetail.ObjectState = ObjectState.Added;
        //                _journalGSTDetailService.Insert(journalGSTDetail);
        //                //_journalNew.JournalGSTDetails.Add(journalGSTDetail);
        //            }
        //        }

        //    }
        //    #region commentedCode
        //    //foreach (JournalGSTDetail detail in TObject.JournalGSTDetails)
        //    //{
        //    //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_foreach_loop_of_JournalGSTDetail);
        //    //    if (detail.RecordStatus == "Added")
        //    //    {
        //    //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_if_condition_of_JournalGSTDetail_and_checking_RecordStatus_is_Added_or_not);
        //    //        detail.ObjectState = ObjectState.Added;
        //    //        _journalNew.JournalGSTDetails.Add(detail);
        //    //    }

        //    //    else if (detail.RecordStatus != "Added" && detail.RecordStatus != "Deleted")
        //    //    {
        //    //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Enter_into_else_if_condition_of_JournalGSTDetail_and_checking_RecordStatus_is_Added_and_Deleted);
        //    //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_GetJournalGSTDetailsById_method);
        //    //        JournalGSTDetail journalGSTDetail = _journalGSTDetailService.GetJournalGSTDetailsById(detail.Id);
        //    //        if (journalGSTDetail != null)
        //    //        {
        //    //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_journalGSTDetail_null_or_not);
        //    //            journalGSTDetail.JournalId = detail.JournalId;
        //    //            journalGSTDetail.TaxId = detail.TaxId;
        //    //            journalGSTDetail.TaxAmount = detail.TaxAmount;
        //    //            //journalGSTDetail.TaxCode = detail.TaxCode;
        //    //            journalGSTDetail.TotalAmount = detail.TotalAmount;

        //    //            journalGSTDetail.Amount = detail.Amount;
        //    //            journalGSTDetail.ObjectState = ObjectState.Modified;

        //    //        }
        //    //    }
        //    //    else if (detail.RecordStatus == "Deleted")
        //    //    {
        //    //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_RecordStatus_deleted_or_not);
        //    //        JournalGSTDetail journalGSTDetail = _journalNew.JournalGSTDetails.Where(a => a.Id == detail.Id).FirstOrDefault();
        //    //        if (journalGSTDetail != null)
        //    //        {
        //    //            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Checking_in_journalGSTDetail_null_or_not_in_if_condition);
        //    //            journalGSTDetail.ObjectState = ObjectState.Deleted;
        //    //        }
        //    //    }
        //    //}
        //    #endregion

        //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Come_out_from_UpdateJournalGSTDetails_method);
        //}
        #endregion


        private void AddGSTLineItem(JournalModel Tobject, Journal _journal, List<Guid> lstJDIds)
        {
            int i = 0;
            ChartOfAccount gstAccount = _chartOfAccountService.GetByName(COANameConstants.TaxPayableGST, Tobject.CompanyId);
            foreach (JournalDetailModel detail in Tobject.JournalDetailModels.Where(c => c.RecordStatus != "Deleted" && c.TaxRate != null).ToList())
            {

                JournalDetail journalDetail = new JournalDetail();
                journalDetail.Id = Guid.NewGuid();
                journalDetail.DocumentId = _journal.Id;
                FillJvGstDetail(_journal, journalDetail, detail);
                journalDetail.RecOrder = detail.RecOrder;
                journalDetail.DocumentDetailId = detail.RecordStatus != "Added" ? detail.Id : lstJDIds[i];
                if (gstAccount != null)
                {
                    journalDetail.AccountName = gstAccount.Name;
                    journalDetail.COAId = gstAccount.Id;
                }
                journalDetail.ObjectState = ObjectState.Added;
                _journalDetailService.Insert(journalDetail);
                if (detail.RecordStatus == "Added")
                    i++;
            }
        }

        private void AddJDetail(JournalModel TObject, Journal _journalNew, TaxCode taxCode)
        {
            foreach (var detail in TObject.JournalDetailModels)
            {
                JournalDetail journalDetail = _journalDetailService.GetJournalDetailsById(detail.Id);
                if (journalDetail != null)
                {
                    journalDetail.AccountDescription = detail.AccountDescription;
                    journalDetail.AllowDisAllow = detail.AllowDisAllow;
                    journalDetail.BaseCredit = detail.BaseCredit;
                    journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                    journalDetail.BaseDebit = detail.BaseDebit;
                    journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
                    journalDetail.BaseTaxCredit = detail.BaseTaxCredit;
                    journalDetail.BaseTaxDebit = detail.BaseTaxDebit;
                    journalDetail.ServiceCompanyId = _journalNew.ServiceCompanyId;
                    journalDetail.SystemRefNo = _journalNew.SystemReferenceNo;
                    journalDetail.DocType = DocTypeConstants.JournalVocher;
                    journalDetail.DocSubType = DocSubTypeConstants.General;
                    journalDetail.DocNo = _journalNew.DocNo;
                    journalDetail.DocDate = _journalNew.DocDate;
                    //journalDetail.ChartOfAccount = detail.ChartOfAccount;
                    journalDetail.COAId = detail.COAId;
                    journalDetail.DocCredit = detail.DocCredit;
                    journalDetail.DocCreditTotal = detail.DocCreditTotal;
                    journalDetail.DocDebit = detail.DocDebit;
                    journalDetail.DocDebitTotal = detail.DocDebitTotal;
                    journalDetail.DocTaxCredit = detail.DocTaxCredit;
                    journalDetail.DocTaxDebit = detail.DocTaxDebit;
                    journalDetail.DocCurrency = TObject.DocCurrency;
                    journalDetail.BaseCurrency = TObject.BaseCurrency;
                    journalDetail.ExchangeRate = _journalNew.ExchangeRate;
                    journalDetail.GSTExchangeRate = _journalNew.GSTExchangeRate;
                    journalDetail.JournalId = detail.JournalId;
                    //journalDetail.ObjectState = detail.ObjectState;
                    //journalDetail.TaxCode = detail.TaxCode;
                    //journalDetail.SegmentCategory1 = _journalNew.SegmentCategory1;
                    //journalDetail.SegmentCategory2 = _journalNew.SegmentCategory2;
                    //journalDetail.SegmentMasterid1 = _journalNew.SegmentMasterid1;
                    //journalDetail.SegmentMasterid2 = _journalNew.SegmentMasterid2;
                    //journalDetail.SegmentDetailid1 = _journalNew.SegmentDetailid1;
                    //journalDetail.SegmentDetailid2 = _journalNew.SegmentDetailid2;
                    journalDetail.TaxId = taxCode.Id;
                    journalDetail.TaxRate = taxCode.TaxRate;
                    journalDetail.IsPLAccount = detail.IsPLAccount;
                    journalDetail.EntityId = detail.EntityId;
                    journalDetail.PostingDate = _journalNew.DocDate;
                    journalDetail.DocumentDetailId = new Guid();
                    journalDetail.TaxType = detail.TaxType;
                    journalDetail.ObjectState = ObjectState.Modified;
                }
            }
        }
        #endregion

        #region Delete call
        public string DeleteJournal(Guid id, long companyId)
        {
            Journal journal = _journalService.GetJournalById(id, companyId);
            if (journal != null)
            {
                //if (journal.DocumentState != JournalState.Void)
                //	throw new Exception(JournalConstant.Delete_aplicable_void_records_only);

                List<JournalDetail> jds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                if (jds.Any())
                {
                    foreach (var jd in jds)
                    {
                        jd.ObjectState = ObjectState.Deleted;
                        _journalDetailService.Delete(jd);
                    }
                }
                //List<JournalGSTDetail> jgstds = _journalGSTDetailService.GetAllJournalGSTDetails(id);
                //if (jgstds.Any())
                //{
                //    foreach (var jgstd in jgstds)
                //    {
                //        jgstd.ObjectState = ObjectState.Deleted;
                //        _journalGSTDetailService.Delete(jgstd);
                //    }
                //}
                journal.ObjectState = ObjectState.Deleted;
                _journalService.Delete(journal);
            }
            else
                throw new Exception(JournalConstant.Invalid_journal);
            try
            {
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
            return "Deleted succsessfully";
        }

        #endregion

        #region posting Save
        public Journal SavePosting(JVVModel journalModel, string ConnectionString)
        {
            var AdditionalInfo = new Dictionary<string, object>();
            AdditionalInfo.Add("Data", JsonConvert.SerializeObject(journalModel));
            Ziraff.FrameWork.Logging.LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, "ObjectSave", AdditionalInfo);

            Guid? entityId = null;
            Guid? journalId = null;


            #region For_Bank_Rec_Update
            long? oldServEntityId = null;
            long? oldCoaId = null;
            DateTime? oldDocDate = null;
            decimal? oldTotalAmount = null;
            long? newServEntityId = null;
            long? newCoaId = null;
            DateTime? newDocDate = null;
            decimal? newTotalAmount = null;
            bool? isAdd = null;
            #endregion


            //AutoNumber _autoNo = _autoNumberService.GetAutoNumber(journalModel.CompanyId, journalModel.DocType);
            //if (_autoNo != null)
            //{
            //    _autoNo.IsDisable = true;
            //    _autoNo.ObjectState = ObjectState.Modified;
            //    _autoNumberService.Update(_autoNo);
            //}

            Journal journal = new Journal();
            if (journalModel.DocType == "Transfer")
            {
                journal = _journalService.GetByTransferdocumentId(journalModel.DocumentId, journalModel.CompanyId, journalModel.IsWithdrawal);
            }
            //if (journalModel.DocType == "Revaluation")
            //{
            //    journal = _journalService.GetByTransferdocumentId(journalModel.DocumentId, journalModel.CompanyId, journalModel.SystemReferenceNo);
            //}
            else
            {
                journal = _journalService.GetBydocumentId(journalModel.DocumentId, journalModel.CompanyId);

            }
            var basecredit = journalModel.JVVDetailModels.Sum(c => Math.Abs(c.BaseCredit == null ? 0 : Math.Abs(c.BaseCredit.Value)));
            var basedebit = journalModel.JVVDetailModels.Sum(c => Math.Abs(c.BaseDebit == null ? 0 : c.BaseDebit.Value));
            decimal diff = 0;
            if (basecredit != basedebit)
            {
                JVVDetailModel detail = new JVVDetailModel();
                if (basecredit > basedebit)
                {
                    diff = (basecredit - basedebit);
                    detail.BaseDebit = diff;

                }
                if (basecredit < basedebit)
                {
                    diff = (basedebit - basecredit);
                    detail.BaseCredit = diff;
                }
                if (diff <= Convert.ToDecimal(0.1))
                {
                    long account1 = _chartOfAccountService.GetByNameAndCompanyId(/*"Rounding Account"*/COANameConstants.Rounding, journalModel.CompanyId); //? COANameConstants//);
                    if (account1 != 0)
                    {
                        detail.AccountDescription = journalModel.DocumentDescription;//Cindi changes for Rounding account
                        detail.COAId = account1;
                        detail.DocumentId = journalModel.Id;
                        detail.BaseCurrency = journalModel.ExCurrency != null ? journalModel.ExCurrency : journalModel.BaseCurrency;
                        detail.DocCurrency = journalModel.DocCurrency;
                        detail.IsTax = false;
                        detail.ServiceCompanyId = journalModel.ServiceCompanyId;
                        detail.DocDate = journalModel.DocDate;
                        detail.PostingDate = journalModel.PostingDate;
                        detail.DocType = journalModel.DocType;
                        detail.EntityId = journalModel.EntityId;
                        detail.DocSubType = journalModel.DocSubType;
                        detail.DocNo = journalModel.DocNo;
                        detail.DocumentDetailId = Guid.NewGuid();
                        detail.RecOrder = (journalModel.JVVDetailModels.Count + 1);
                    }
                    journalModel.JVVDetailModels.Add(detail);
                }
            }
            if (journalModel.DocType == DocTypeConstants.Receipt || journalModel.DocType == DocTypeConstants.BillPayment)
            {
                decimal? docCredit = journalModel.JVVDetailModels.Sum(c => Math.Abs(c.DocCredit == null ? 0 : (decimal)c.DocCredit));
                decimal? docDebit = journalModel.JVVDetailModels.Sum(c => Math.Abs(c.DocDebit == null ? 0 : (decimal)c.DocDebit));
                decimal? diffAmt = 0;
                if (docCredit != docDebit)
                {
                    JVVDetailModel detail = new JVVDetailModel();
                    if (docCredit > docDebit)
                    {
                        diffAmt = (docCredit - docDebit);
                        detail.DocDebit = diffAmt;
                    }
                    if (docCredit < docDebit)
                    {
                        diffAmt = (docCredit - docDebit);
                        detail.DocCredit = diffAmt;
                    }
                    if (diffAmt <= Convert.ToDecimal(0.1))
                    {
                        long account1 = _chartOfAccountService.GetByNameAndCompanyId(COANameConstants.Rounding, journalModel.CompanyId);
                        if (account1 != 0)
                        {
                            detail.AccountDescription = journalModel.DocumentDescription;//Cindi changes for Rounding account
                            detail.COAId = account1;
                            detail.DocumentId = journalModel.Id;
                            detail.BaseCurrency = journalModel.ExCurrency != null ? journalModel.ExCurrency : journalModel.BaseCurrency;
                            detail.DocCurrency = journalModel.DocCurrency;
                            detail.IsTax = false;
                            detail.ServiceCompanyId = journalModel.ServiceCompanyId;
                            detail.DocDate = journalModel.DocDate;
                            detail.PostingDate = journalModel.PostingDate;
                            detail.DocType = journalModel.DocType;
                            detail.EntityId = journalModel.EntityId;
                            detail.DocSubType = journalModel.DocSubType;
                            detail.DocNo = journalModel.DocNo;
                            detail.DocumentDetailId = Guid.NewGuid();
                            detail.RecOrder = (journalModel.JVVDetailModels.Count + 1);
                        }
                        journalModel.JVVDetailModels.Add(detail);
                    }
                }
            }
            //if (journalModel.DocSubType == "Opening Balance")
            //{
            //    Company company = _companyService.GetById(journalModel.CompanyId);
            //    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService,JournalLoggingValidation.Get_Company_through_GetById_method);
            //    journalModel.SystemReferenceNo = GenerateAutoNumberForType(company.Id, DocTypeConstants.JournalVocher, company.ShortName);
            //}
            if (journalModel.DocType == DocTypeConstants.Receipt || journalModel.DocType == DocTypeConstants.BillPayment /*journalModel.DocType == DocTypeConstants.Payment*/ || journalModel.DocSubType == DocTypeConstants.Revaluation /*|| journalModel.DocType == DocTypeConstants.PayrollPayment*/ || journalModel.DocType == DocTypeConstants.BankTransfer || journalModel.DocSubType == DocTypeConstants.Application)
            {
                if (journalModel.IsFirst != null)
                {
                    if (journalModel.IsFirst == true)
                    {
                        List<Journal> lst = new List<Journal>();
                        lst = _journalService.GetListBydocumentId(journalModel.DocumentId, journalModel.CompanyId);
                        foreach (var data in lst)
                        {
                            if (data != null)
                            {
                                oldServEntityId = data.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                                oldCoaId = data.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                                oldDocDate = data.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.PostingDate).FirstOrDefault();
                                oldTotalAmount = data.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                                newServEntityId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                                newCoaId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                                newDocDate = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDate).FirstOrDefault();
                                newTotalAmount = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                                isAdd = false;
                                DeleteJournal(data.Id, data.CompanyId);
                            }
                        }
                    }
                }
            }
            else if (journalModel.DocSubType == DocTypeConstants.OpeningBalance)
            {
                Journal obJournal = _journalService.CheckOpeningbalance(journalModel.DocSubType, journalModel.CompanyId, journalModel.ServiceCompanyId);
                if (obJournal != null)
                {
                    oldServEntityId = obJournal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                    oldCoaId = obJournal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                    oldDocDate = obJournal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.PostingDate).FirstOrDefault();
                    oldTotalAmount = obJournal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                    newServEntityId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                    newCoaId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                    newDocDate = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDate).FirstOrDefault();
                    newTotalAmount = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                    isAdd = false;
                    DeleteJournal(obJournal.Id, obJournal.CompanyId);
                }
            }
            else //(journalModel.DocType != DocTypeConstants.Receipt && journalModel.DocType != DocTypeConstants.Payment)
            {
                if (journal != null)
                {
                    oldServEntityId = journal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                    oldCoaId = journal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                    oldDocDate = journal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.PostingDate).FirstOrDefault();
                    oldTotalAmount = journal.JournalDetails.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                    newServEntityId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                    newCoaId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                    newDocDate = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDate).FirstOrDefault();
                    newTotalAmount = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                    isAdd = false;
                    List<JournalDetail> lstOldDetail = null;
                    FillJournalModel(journal, journalModel, false, journalModel.DocType);
                    //if (journalModel.DocType != DocTypeConstants.BankTransfer)
                    lstOldDetail = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                    //else
                    //    lstOldDetail = _journalDetailService.GetAllBTJournalDetails(journalModel.ActualSysRefNo);
                    if (lstOldDetail.Any())
                    {
                        foreach (var jDetail in lstOldDetail)
                        {
                            jDetail.ObjectState = ObjectState.Deleted;
                            _journalDetailService.Delete(jDetail);
                        }
                    }
                    _UnitOfWorkAsync.SaveChanges();
                    UpdatePostJournalDetails(journal, journalModel, false, journalModel.DocType);
                }
                else
                {
                    Journal journal1 = new Journal();
                    FillJournalModel(journal1, journalModel, true, journalModel.DocType);
                    UpdatePostJournalDetails(journal1, journalModel, true, journalModel.DocType);
                    newServEntityId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                    newCoaId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                    newDocDate = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDate).FirstOrDefault();
                    newTotalAmount = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                    oldServEntityId = newServEntityId;
                    oldCoaId = newCoaId;
                    oldDocDate = newDocDate;
                    oldTotalAmount = newTotalAmount;

                    isAdd = true;
                }
            }
            if (journalModel.DocType == DocTypeConstants.Receipt || journalModel.DocType == DocTypeConstants.BillPayment /*journalModel.DocType == DocTypeConstants.Payment*/ || journalModel.DocSubType == DocTypeConstants.OpeningBalance || journalModel.DocSubType == DocTypeConstants.Revaluation /*|| journalModel.DocType == DocTypeConstants.PayrollPayment */|| journalModel.DocType == DocTypeConstants.BankTransfer || journalModel.DocSubType == DocTypeConstants.Application)
            {
                Journal journal1 = new Journal();
                FillJournalModel(journal1, journalModel, true, journalModel.DocType);
                journalId = journal1.Id;
                UpdatePostJournalDetails(journal1, journalModel, true, journalModel.DocType);
                newServEntityId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.ServiceCompanyId).FirstOrDefault();
                newCoaId = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault();
                newDocDate = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDate).FirstOrDefault();
                newTotalAmount = journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.DocDebit ?? c.DocCredit).FirstOrDefault();
                oldServEntityId = newServEntityId;
                oldCoaId = newCoaId;
                oldDocDate = newDocDate;
                oldTotalAmount = newTotalAmount;
                isAdd = true;
            }

            try
            {
                if (journalModel.DocSubType == DocTypeConstants.OpeningBalance)
                {
                    OpeningBalance ob = _billService.GetOBByServiceCompanyId(journalModel.CompanyId, journalModel.ServiceCompanyId, DocTypeConstants.OpeningBalance);
                    if (ob != null)
                    {
                        ob.PostedId = journalId;
                        ob.ObjectState = ObjectState.Modified;
                    }
                }
                _UnitOfWorkAsync.SaveChanges();

                #region Customer_Entity_Balance_Updation
                try
                {
                    if (journalModel.DocType == DocTypeConstants.Invoice || journalModel.DocType == DocTypeConstants.DebitNote || journalModel.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.Receipt)
                    {
                        decimal? creditLimitValue = _beanEntityService.GetCteditLimitsValue(journalModel.EntityId.Value);
                        using (con = new SqlConnection(ConnectionString))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            cmd = new SqlCommand("Bean_SoaSummaryForEntity", con);
                            cmd.CommandTimeout = 0;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@EntityId", journalModel.EntityId.ToString());
                            cmd.Parameters.AddWithValue("@companyId", journalModel.CompanyId);
                            dr = cmd.ExecuteReader();
                            //con.Close();
                            if (dr.HasRows)
                            {
                                if (dr.Read())
                                {
                                    decimal? amount = dr["GrossBalance"] != DBNull.Value ? Convert.ToDecimal(dr["GrossBalance"]) : (decimal?)null;
                                    decimal? netamount = dr["NetBalance"] != DBNull.Value ? Convert.ToDecimal(dr["NetBalance"]) : (decimal?)null;
                                    dr.Close();
                                    //string data = $"Update Bean.Entity set CustBal={amount} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";


                                    if (creditLimitValue != null)
                                    {
                                        creditLimitValue = creditLimitValue - amount;
                                    }


                                    string data = null;
                                    if (amount == null)
                                    {
                                        if (creditLimitValue != null)
                                            data = $"Update Bean.Entity set CustBal = Null,CreditLimitValue={creditLimitValue} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                        else
                                            data = $"Update Bean.Entity set CustBal = Null where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                    }
                                    else
                                    {
                                        if (creditLimitValue != null)
                                            data = $"Update Bean.Entity set CustBal= {netamount},CreditLimitValue={creditLimitValue} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                        else
                                            data = $"Update Bean.Entity set CustBal= {netamount} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                    }

                                    if (con.State != ConnectionState.Open)
                                        con.Open();
                                    cmd = new SqlCommand(data, con);
                                    cmd.ExecuteNonQuery();

                                }
                            }
                            con.Close();
                            if (entityId != null)
                            {
                                if (entityId != journalModel.EntityId)
                                {
                                    creditLimitValue = _beanEntityService.GetCteditLimitsValue(entityId.Value);
                                    if (con.State != ConnectionState.Open)
                                        con.Open();
                                    cmd = new SqlCommand("Bean_SoaSummaryForEntity", con);
                                    cmd.CommandTimeout = 0;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@EntityId", entityId.ToString());
                                    cmd.Parameters.AddWithValue("@companyId", journalModel.CompanyId);
                                    dr = cmd.ExecuteReader();
                                    //con.Close();
                                    if (dr.HasRows)
                                    {
                                        if (dr.Read())
                                        {
                                            decimal? amount = dr["GrossBalance"] != DBNull.Value ? Convert.ToDecimal(dr["GrossBalance"]) : (decimal?)null;
                                            decimal? netamount = dr["NetBalance"] != DBNull.Value ? Convert.ToDecimal(dr["NetBalance"]) : (decimal?)null;
                                            dr.Close();

                                            if (creditLimitValue != null)
                                            {
                                                creditLimitValue = creditLimitValue - amount;
                                            }

                                            string data = null;
                                            if (amount == null)
                                            {
                                                if (creditLimitValue != null)
                                                    data = $"Update Bean.Entity set CustBal = Null,CreditLimitValue={creditLimitValue} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                                else
                                                    data = $"Update Bean.Entity set CustBal = Null where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                            }
                                            else
                                            {
                                                if (creditLimitValue != null)
                                                    data = $"Update Bean.Entity set CustBal= {netamount},CreditLimitValue={creditLimitValue} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                                else
                                                    data = $"Update Bean.Entity set CustBal= {netamount} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                            }


                                            if (con.State != ConnectionState.Open)
                                                con.Open();
                                            cmd = new SqlCommand(data, con);
                                            cmd.ExecuteNonQuery();
                                        }
                                    }
                                    con.Close();
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {

                    //throw;
                }

                #endregion Customer_Entity_Balance_Updation

                #region Update_Brc_flag
                try
                {
                    if (journalModel.DocType == DocTypeConstants.Receipt || journalModel.DocType == DocTypeConstants.BillPayment || journalModel.DocType == DocTypeConstants.Withdrawal || journalModel.DocType == DocTypeConstants.BankTransfer || journalModel.DocType == DocTypeConstants.Deposit || journalModel.DocType == DocTypeConstants.CashPayment || journalModel.DocType == DocTypeConstants.CashSale)
                    {
                        if (journalModel.JVVDetailModels.Select(c => c.DocumentDetailId == new Guid()).FirstOrDefault() != null)
                        {
                            //old code commnted by lokanath
                            //BankReconciliation brc = _cashSaleService.GetBRByCOAID(journalModel.JVVDetailModels.Where(c => c.DocumentDetailId == new Guid()).Select(c => c.COAId).FirstOrDefault(), journalModel.ServiceCompanyId, journalModel.CompanyId);
                            //if (brc != null)
                            //{
                            //    brc.IsReRunBR = true;
                            //    brc.ObjectState = ObjectState.Modified;
                            //}
                            using (con = new SqlConnection(ConnectionString))
                            {
                                if (con.State != ConnectionState.Open)
                                    con.Open();
                                cmd = new SqlCommand("Bean_Update_BRC_Re_Run", con);
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@CompanyId", journalModel.CompanyId);
                                cmd.Parameters.AddWithValue("@OldServEntityId", oldServEntityId);
                                cmd.Parameters.AddWithValue("@NewServEntityId", newServEntityId);
                                cmd.Parameters.AddWithValue("@OldCoaId", oldCoaId);
                                cmd.Parameters.AddWithValue("@NewCoaId", newCoaId);
                                cmd.Parameters.AddWithValue("@OldDocdate", oldDocDate);
                                cmd.Parameters.AddWithValue("@NewDocDate", newDocDate);
                                cmd.Parameters.AddWithValue("@OldDocAmount", oldTotalAmount);
                                cmd.Parameters.AddWithValue("@NewDocAmount", newTotalAmount);
                                cmd.Parameters.AddWithValue("@IsAdd", isAdd);
                                int i = cmd.ExecuteNonQuery();
                                con.Close();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {

                    //throw;
                }

                #endregion

                #region Document_History_Updation

                List<DocumentHistoryModel> lstdocumet = new List<DocumentHistoryModel>();
                if (journalModel.DocType == DocTypeConstants.Invoice || journalModel.DocType == DocTypeConstants.DebitNote || journalModel.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.BillCreditMemo || journalModel.DocType == DocTypeConstants.Bills || journalModel.DocType == DocTypeConstants.DoubtFulDebitNote || (journalModel.DocSubType != DocTypeConstants.Application && (journalModel.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.BillCreditMemo)) || (journalModel.DocSubType != DocTypeConstants.Allocation && (journalModel.DocType == DocTypeConstants.DoubtFulDebitNote)))
                {
                    try
                    {
                        lstdocumet = AppaWorld.Bean.Common.FillDocumentHistory(journalModel.DocumentId, journalModel.CompanyId, journalModel.DocumentId, journalModel.DocType, journalModel.DocSubType, journalModel.DocumentState, journalModel.DocCurrency, journalModel.GrandDocDebitTotal != null ? journalModel.GrandDocDebitTotal : journalModel.GrandDocCreditTotal, journalModel.BalanceAmount.Value, journalModel.ExchangeRate.Value, (journalModel.DocumentState == InvoiceStates.NotPaid || journalModel.DocumentState == InvoiceStates.NotApplied) && journalModel.ModifiedBy == null ? journalModel.UserCreated : journalModel.ModifiedBy, journalModel.DocumentDescription, (journalModel.DocumentState == InvoiceStates.NotPaid || journalModel.DocumentState == InvoiceStates.NotApplied || journalModel.DocumentState == DoubtfulDebtState.NotAllocated) ? (DateTime?)journalModel.PostingDate : (DateTime?)null, (journalModel.DocumentState == InvoiceStates.NotPaid || journalModel.DocumentState == InvoiceStates.NotApplied || journalModel.DocumentState == DoubtfulDebtState.NotAllocated) ? journalModel.GrandDocDebitTotal != null ? journalModel.GrandDocDebitTotal : journalModel.GrandDocCreditTotal : 0, 0);
                        if (lstdocumet.Any())
                            AppaWorld.Bean.Common.SaveDocumentHistory(lstdocumet, ConnectionString);
                    }
                    catch (Exception ex)
                    {
                        //LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                    }
                }
                else
                {
                    if (journalModel.DocType != DocTypeConstants.BillPayment && journalModel.DocType != DocTypeConstants.BankTransfer && journalModel.DocType != DocTypeConstants.Receipt)
                    {
                        try
                        {
                            //documentHistoryModel.BalanceAmount = 0;
                            lstdocumet = AppaWorld.Bean.Common.FillDocumentHistory(journalModel.DocumentId, journalModel.CompanyId, journalModel.DocumentId, journalModel.DocType, journalModel.DocSubType, journalModel.DocumentState, journalModel.DocCurrency, journalModel.GrandDocDebitTotal != null ? journalModel.GrandDocDebitTotal : journalModel.GrandDocCreditTotal, 0, journalModel.ExchangeRate.Value, journalModel.DocumentState == InvoiceStates.Posted && journalModel.ModifiedBy == null ? journalModel.UserCreated : journalModel.ModifiedBy, journalModel.DocumentDescription, journalModel.PostingDate, 0, 0);
                            if (lstdocumet.Any())
                                AppaWorld.Bean.Common.SaveDocumentHistory(lstdocumet, ConnectionString);
                        }
                        catch (Exception ex)
                        {
                            //LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                        }
                    }
                }

                #endregion Document_History_Updation
            }
            catch (DbEntityValidationException e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                foreach (var eve in e.EntityValidationErrors)
                {
                    Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }
            return journal;
        }
        public Journal SaveRevaluationPosting(JVVModel journalModel)
        {
            if (journalModel.IsDelete == true)
            {
                List<Journal> lstjournal = _journalService.GetListBydocumentId(journalModel.DocumentId, journalModel.CompanyId);
                if (lstjournal.Any())
                {
                    foreach (var journal in lstjournal)
                    {
                        if (journal != null)
                        {
                            DeleteJournal(journal.Id, journal.CompanyId);
                        }
                    }
                }
            }
            Journal journal1 = new Journal();
            FillJournalModel(journal1, journalModel, true, DocTypeConstants.Revaluation);
            UpdateRevaluationPostJournalDetails(journal1, journalModel, true, journalModel.DocType);
            try
            {
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (DbEntityValidationException e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                foreach (var eve in e.EntityValidationErrors)
                {
                    Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }
            return journal1;
        }

        private void FillJournalModel(Journal journal, JVVModel journalModel, bool isNew, string type)
        {
            journal.BalancingItemPayDRAmount = journalModel.BalancingItemPayDRAmount;
            journal.BalancingItemPayDRCurrency = journalModel.BalancingItemPayDRCurrency;
            journal.BalancingItemReciveCRAmount = journalModel.BalancingItemReciveCRAmount;
            journal.BalancingItemReciveCRCurrency = journalModel.BalancingItemReciveCRCurrency;
            journal.BankCharges = journalModel.BankCharges;
            //journal.PostingDate = journalModel.DocSubType == DocTypeConstants.Bills ? journalModel.PostingDate : journalModel.DocDate;
            journal.PostingDate = journalModel.PostingDate;
            journal.BankChargesCurrency = journalModel.BankChargesCurrency;
            journal.BankReceiptAmmount = journalModel.BankReceiptAmmount;
            journal.BankReceiptAmmountCurrency = journalModel.BankReceiptAmmountCurrency;
            journal.COAId = journalModel.COAId;
            journal.CompanyId = journalModel.CompanyId;
            journal.Nature = journalModel.Nature;
            journal.CreditTermsId = journalModel.CreditTermsId;
            journal.IsBalancing = journalModel.IsBalancing;
            // journal.Company=journalModel.
            journal.CreatedDate = journalModel.CreatedDate;
            journal.CreationType = "System";
            journal.DocCurrency = journalModel.DocCurrency;
            journal.DocDate = journalModel.DocDate.Date;
            journal.DocNo = journalModel.DocNo;
            journal.DocSubType = journalModel.DocSubType;
            journal.DocType = journalModel.DocType;
            journal.ClearingStatus = journalModel.ClearingStatus;
            journal.DocumentDescription = journalModel.DocumentDescription;
            if (/*journalModel.DocSubType == DocTypeConstants.Payment || journalModel.DocSubType == DocTypeConstants.PayrollPayment*/journalModel.DocType == DocTypeConstants.BillPayment)
                journal.ExCurrency = journalModel.ExCurrency;
            else
                journal.ExCurrency = journalModel.BaseCurrency;
            journal.DocumentId = journalModel.DocumentId;
            journal.DocumentState = journalModel.DocumentState;
            journal.DueDate = journalModel.DueDate != null ? journalModel.DueDate : null;
            journal.EntityId = journalModel.EntityId;
            journal.EntityType = journalModel.EntityType;
            journal.ExcessPaidByClient = journalModel.ExcessPaidByClient;
            journal.ExcessPaidByClientAmmount = journalModel.ExcessPaidByClientAmmount;
            journal.ExcessPaidByClientCurrency = journalModel.ExcessPaidByClientCurrency;
            journal.ExchangeRate = journalModel.ExchangeRate;
            journal.ClearingDate = journalModel.ClearingDate;
            journal.AllocatedAmount = journalModel.AllocatedAmount;
            journal.ExDurationFrom = journalModel.ExDurationFrom;
            journal.ExDurationTo = journalModel.ExDurationTo;
            journal.FrequencyEndDate = journalModel.FrequencyEndDate;
            journal.FrequencyType = journalModel.FrequencyType;
            journal.FrequencyValue = journalModel.FrequencyValue;
            journal.GrandBaseCreditTotal = journalModel.GrandBaseCreditTotal;
            journal.GrandBaseDebitTotal = journalModel.GrandBaseDebitTotal;
            journal.GrandDocCreditTotal = journalModel.GrandDocCreditTotal;
            journal.GrandDocDebitTotal = journalModel.GrandDocDebitTotal;
            journal.GSTDeRegistrationDate = journalModel.GSTDeRegistrationDate;
            journal.GSTExchangeRate = journalModel.GSTExchangeRate;
            journal.GSTExCurrency = journalModel.GSTExCurrency;
            journal.GSTExDurationFrom = journalModel.GSTExDurationFrom;
            journal.GSTExDurationTo = journalModel.GSTExDurationTo;
            journal.GSTTotalAmount = journalModel.GSTTotalAmount;
            journal.BalanceAmount = journalModel.BalanceAmount;
            if (isNew)
                journal.Id = Guid.NewGuid();
            journal.IsAllowableNonAllowable = journalModel.IsAllowableNonAllowable;
            journal.IsAutoReversalJournal = journalModel.IsAutoReversalJournal;
            journal.IsBaseCurrencyRateChanged = journalModel.IsBaseCurrencyRateChanged;
            journal.IsCopy = journalModel.IsCopy;
            journal.IsGSTApplied = journalModel.IsGSTApplied;
            journal.IsGSTCurrencyRateChanged = journalModel.IsGSTCurrencyRateChanged;
            journal.IsGSTDeRegistration = journalModel.IsGSTDeRegistration;
            journal.IsGstSettings = journalModel.IsGstSettings;
            journal.IsMultiCurrency = journalModel.IsMultiCurrency;
            journal.IsNoSupportingDocs = journalModel.IsNoSupportingDocs;
            journal.IsNoSupportingDocument = journalModel.IsNoSupportingDocument;
            journal.IsRepeatingInvoice = journalModel.IsRepeatingInvoice;
            journal.RepEveryPeriod = journalModel.RepEveryPeriod;
            journal.RepEveryPeriodNo = journalModel.RepEveryPeriodNo;
            journal.EndDate = journalModel.EndDate;
            journal.IsRecurringJournal = journalModel.IsRecurringJournal;
            //journal.IsSegmentReporting = journalModel.IsSegmentReporting;
            journal.ModeOfReceipt = journalModel.ModeOfReceipt;
            journal.ModifiedBy = journalModel.ModifiedBy;
            journal.ModifiedDate = journalModel.ModifiedDate;
            journal.NoSupportingDocument = journalModel.NoSupportingDocument;
            journal.PoNo = journalModel.PONo;
            //journal.PostingDate = journalModel.PostingDate;
            journal.ReceiptApplicationAmmount = journalModel.ReceiptApplicationAmmount;
            journal.ReceiptApplicationCurrency = journalModel.ReceiptApplicationCurrency;
            journal.RecurringJournalName = journalModel.RecurringJournalName;
            journal.Remarks = journalModel.Remarks;
            journal.ReversalDate = journalModel.ReversalDate;
            journal.ReverseChildRefId = journalModel.ReverseChildRefId;
            journal.ReverseParentRefId = journalModel.ReverseParentRefId;
            //journal.SegmentCategory1 = journalModel.SegmentCategory1;
            //journal.SegmentCategory2 = journalModel.SegmentCategory2;
            //journal.SegmentDetailid1 = journalModel.SegmentDetailid1;
            //journal.SegmentDetailid2 = journalModel.SegmentDetailid2;
            //journal.SegmentMasterid1 = journalModel.SegmentMasterid1;
            //journal.SegmentMasterid2 = journalModel.SegmentMasterid2;
            journal.ServiceCompanyId = journalModel.ServiceCompanyId;
            journal.TransferRefNo = journalModel.TransferRefNo;
            journal.Status = journalModel.Status;
            journal.IsWithdrawal = journalModel.IsWithdrawal;
            journal.IsShow = true;
            if (journalModel.DocType == "Transfer")
            {
                journal.IsShow = journalModel.IsWithdrawal == true ? true : false;
            }
            //if (type == "Revaluation")
            //{
            //    Company journals = _companyService.GetById(journalModel.CompanyId);
            //    journal.SystemReferenceNo = GenerateAutoNumberForType(journals.Id, DocTypeConstants.Revaluation, journals.ShortName);
            //}
            journal.SystemReferenceNo = journalModel.SystemReferenceNo;
            journal.ActualSysRefNo = (journalModel.DocType == DocTypeConstants.Receipt || journalModel.DocType == DocTypeConstants.BillPayment /*journalModel.DocType == DocTypeConstants.Payment || journalModel.DocType == DocTypeConstants.PayrollPayment*/) ? journalModel.ActualSysRefNo : journalModel.SystemReferenceNo;
            //if (journalModel.DocSubType == "Opening Balance")
            //{
            //    List<Journal> lstJournal = _journalService.GetJournalByCompanyId(journalModel.CompanyId);
            //    if (lstJournal.Any() || lstJournal.Count == 0)
            //    {
            //        bool autoNumber = lstJournal.Select(x => x.SystemReferenceNo).Contains("JV-2017-00001");
            //        if (!autoNumber)
            //            journal.SystemReferenceNo = "JV-2017-00001";
            //        else
            //            journal.SystemReferenceNo = journalModel.SystemReferenceNo;
            //    }

            //}
            journal.UserCreated = journalModel.UserCreated;

            if (isNew)
            {
                journal.ObjectState = ObjectState.Added;
                _journalService.Insert(journal);
            }
            else
            {
                journal.ObjectState = ObjectState.Modified;
                _journalService.Update(journal);
            }
        }
        private void UpdatePostJournalDetails(Journal JDeatil, JVVModel jMOdel, bool isNew, string type)
        {
            ChartOfAccount corrAccount = _chartOfAccountService.GetByName(COANameConstants.Corresponding_Account, jMOdel.CompanyId);
            List<long> coaIds = jMOdel.JVVDetailModels.Where(c => c.DocumentDetailId != new Guid()).Select(c => c.COAId).Distinct().ToList();
            List<Guid> lstDocumentDetailIds = jMOdel.JVVDetailModels.Select(c => c.DocumentDetailId).ToList();
            foreach (var JournalDetail in jMOdel.JVVDetailModels)
            {
                if (isNew)
                {
                    JournalDetail journalD = new JournalDetail();
                    FillPostJournalDetails(journalD, JournalDetail);
                    if (jMOdel.DocType != "Receipt")
                    {
                        if (jMOdel.DocType != "Credit Memo" && jMOdel.DocType != "Credit Note")
                        {
                            journalD.SystemRefNo = jMOdel.SystemReferenceNo;
                            //journalD.DocType = jMOdel.DocType;
                            journalD.DocDate = jMOdel.DocDate;
                            journalD.EntityId = (jMOdel.DocSubType == DocTypeConstants.Revaluation || jMOdel.DocSubType == DocTypeConstants.OpeningBalance) ? JournalDetail.EntityId : jMOdel.EntityId;
                            journalD.DocNo = jMOdel.DocType == DocTypeConstants.BillPayment || jMOdel.DocSubType == DocTypeConstants.OpeningBalance /*DocTypeConstants.Payment || jMOdel.DocType == DocTypeConstants.PayrollPayment*/ ? JournalDetail.DocNo : jMOdel.DocNo;
                        }
                        journalD.Id = Guid.NewGuid();
                        journalD.JournalId = JDeatil.Id;
                        journalD.SystemRefNo = jMOdel.DocType == DocTypeConstants.BillPayment /*DocTypeConstants.Payment || jMOdel.DocType == DocTypeConstants.PayrollPayment*/ ? JournalDetail.SystemRefNo == null ? jMOdel.SystemReferenceNo : JournalDetail.SystemRefNo : jMOdel.SystemReferenceNo;
                        journalD.RecOrder = JournalDetail.RecOrder;
                        if (jMOdel.DocSubType == DocTypeConstants.OpeningBalance)
                            journalD.SystemRefNo = JournalDetail.SystemRefNo;
                        //journalD.DocType = jMOdel.DocType == DocTypeConstants.Payment ? JournalDetail.DocType == null ? jMOdel.DocType : JournalDetail.DocType : jMOdel.DocType;
                        //journalD.DocType = jMOdel.DocType == DocTypeConstants.PayrollPayment ? JournalDetail.DocType : journalD.DocType;
                        //journalD.DocSubType = jMOdel.DocSubType;
                        journalD.DocType = jMOdel.DocType;
                        journalD.DocSubType = /*(jMOdel.DocType == DocTypeConstants.PayrollPayment || jMOdel.DocType == DocTypeConstants.Payment) ? JournalDetail.DocType :*/ jMOdel.DocSubType;
                        //journalD.DocSubType = jMOdel.DocSubType;
                        if (corrAccount != null)
                        {
                            journalD.CorrAccountId = jMOdel.DocSubType != DocTypeConstants.OpeningBalance ? JournalDetail.DocumentDetailId == new Guid() ? coaIds.Count > 1 ? corrAccount.Id : coaIds.Count == 1 ? coaIds[0] : jMOdel.COAId : jMOdel.COAId : (long?)null;
                            if (jMOdel.DocSubType == DocTypeConstants.Revaluation)
                                journalD.CorrAccountId = corrAccount.Id;
                            if (!lstDocumentDetailIds.Contains(new Guid()))
                                journalD.CorrAccountId = corrAccount.Id;
                        }
                        journalD.DocDate = jMOdel.DocType == DocTypeConstants.BillPayment /*DocTypeConstants.Payment || jMOdel.DocType == DocTypeConstants.PayrollPayment*/ || jMOdel.DocSubType == DocTypeConstants.OpeningBalance ? JournalDetail.DocDate : jMOdel.DocDate;
                        journalD.DocCurrency = jMOdel.DocType == DocTypeConstants.BankTransfer || jMOdel.DocSubType == DocTypeConstants.OpeningBalance || jMOdel.DocSubType == DocTypeConstants.Revaluation ? JournalDetail.DocCurrency : jMOdel.DocCurrency;
                        //journalD.BaseCurrency = jMOdel.DocType == DocTypeConstants.Payment || jMOdel.DocType == DocTypeConstants.PayrollPayment ? jMOdel.ExCurrency : jMOdel.BaseCurrency;
                        journalD.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(journalD);
                    }
                    else
                    {
                        journalD.Id = Guid.NewGuid();
                        journalD.JournalId = JDeatil.Id;
                        journalD.SystemRefNo = JournalDetail.SystemRefNo;
                        //journalD.DocType = JournalDetail.DocType == null ? "Receipt" : JournalDetail.DocType;
                        //journalD.DocSubType = jMOdel.DocSubType;
                        journalD.DocType = JournalDetail.DocType;
                        journalD.DocSubType = JournalDetail.DocSubType;
                        journalD.DocDate = JournalDetail.DocDate;
                        journalD.DocCurrency = jMOdel.DocCurrency;
                        journalD.BaseCurrency = jMOdel.DocType == DocTypeConstants.Payment ? jMOdel.ExCurrency : jMOdel.BaseCurrency;
                        if (corrAccount != null)
                        {
                            journalD.CorrAccountId = JournalDetail.DocumentDetailId == new Guid() ? coaIds.Count > 1 ? corrAccount.Id : coaIds.Count == 1 ? coaIds[0] : jMOdel.COAId : jMOdel.COAId;
                            if (!lstDocumentDetailIds.Contains(new Guid()))
                                journalD.CorrAccountId = corrAccount.Id;
                        }
                        journalD.DocNo = JournalDetail.DocNo;
                        journalD.RecOrder = JournalDetail.RecOrder;
                        journalD.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(journalD);
                    }

                }
                else
                {
                    bool isTax = true;
                    if (JournalDetail.IsTax == true)
                        isTax = true;
                    else
                        isTax = false;
                    JournalDetail jD = new JournalDetail();
                    //if (type == DocTypeConstants.Receipt)
                    //{

                    //    jD = _journalDetailService.Query(c => c.DocumentId == JournalDetail.DocumentId && c.DocumentDetailId == JournalDetail.DocumentDetailId && c.IsTax == isTax && c.RecieptType == JournalDetail.ReceiptType).Select().FirstOrDefault();
                    //}
                    //else5
                    //{
                    jD = _journalDetailService.Query(c => c.DocumentId == JournalDetail.DocumentId && c.DocumentDetailId == JournalDetail.DocumentDetailId && c.IsTax == isTax && c.Type == JournalDetail.Type).Select().FirstOrDefault();
                    //}
                    if (jD != null)
                    {
                        FillPostJournalDetails(jD, JournalDetail);
                        if (jMOdel.DocType != "Credit Memo" && jMOdel.DocType != "Credit Note")
                        {
                            jD.SystemRefNo = jMOdel.SystemReferenceNo;
                            //jD.DocType = jMOdel.DocType;
                            jD.DocDate = jMOdel.DocDate;
                            jD.EntityId = jMOdel.EntityId;
                            jD.DocNo = jMOdel.DocNo;
                        }
                        jD.SystemRefNo = jMOdel.SystemReferenceNo;
                        jD.RecOrder = JournalDetail.RecOrder;
                        jD.DocType = jMOdel.DocType;
                        if (corrAccount != null)
                            jD.CorrAccountId = jMOdel.DocSubType != DocTypeConstants.OpeningBalance ? JournalDetail.DocumentDetailId == new Guid() ? coaIds.Count > 1 ? corrAccount.Id : coaIds.Count == 1 ? coaIds[0] : jMOdel.COAId : jMOdel.COAId : (long?)null;
                        jD.DocSubType = jMOdel.DocSubType;
                        jD.DocDate = jMOdel.DocDate;
                        jD.DocCurrency = jMOdel.DocCurrency;
                        jD.BaseCurrency = jMOdel.DocType == DocTypeConstants.BillPayment ? jMOdel.ExCurrency : jMOdel.BaseCurrency;
                        jD.ObjectState = ObjectState.Modified;
                        _journalDetailService.Update(jD);
                    }
                    else
                    {
                        JournalDetail journalD = new JournalDetail();
                        FillPostJournalDetails(journalD, JournalDetail);
                        if (jMOdel.DocType != "Credit Memo" && jMOdel.DocType != "Credit Note")
                        {
                            journalD.SystemRefNo = jMOdel.SystemReferenceNo;
                            //journalD.DocType = jMOdel.DocType;
                            journalD.DocDate = jMOdel.DocDate;
                            journalD.EntityId = jMOdel.EntityId;
                            journalD.DocNo = jMOdel.DocNo;
                        }
                        journalD.Id = Guid.NewGuid();
                        journalD.JournalId = JDeatil.Id;
                        journalD.SystemRefNo = jMOdel.SystemReferenceNo;
                        journalD.RecOrder = JournalDetail.RecOrder;
                        journalD.DocType = jMOdel.DocType;
                        journalD.DocSubType = jMOdel.DocSubType;
                        journalD.DocDate = jMOdel.DocDate;
                        if (corrAccount != null)
                            journalD.CorrAccountId = jMOdel.DocSubType != DocTypeConstants.OpeningBalance ? JournalDetail.DocumentDetailId == new Guid() ? coaIds.Count > 1 ? corrAccount.Id : coaIds.Count == 1 ? coaIds[0] : jMOdel.COAId : jMOdel.COAId : (long?)null;
                        journalD.DocCurrency = jMOdel.DocType == DocTypeConstants.BankTransfer ? JournalDetail.DocCurrency : jMOdel.DocCurrency;
                        journalD.BaseCurrency = jMOdel.DocType == /*DocTypeConstants.Payment*/ DocTypeConstants.BillPayment ? jMOdel.ExCurrency : jMOdel.BaseCurrency;
                        journalD.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(journalD);
                    }
                }
            }
        }
        private void UpdateRevaluationPostJournalDetails(Journal JDeatil, JVVModel jMOdel, bool isNew, string type)
        {
            foreach (var JournalDetail in jMOdel.JVVDetailModels)
            {
                if (isNew)
                {
                    JournalDetail journalD = new JournalDetail();
                    FillPostJournalDetails(journalD, JournalDetail);
                    journalD.Id = Guid.NewGuid();
                    journalD.JournalId = JDeatil.Id;
                    journalD.ObjectState = ObjectState.Added;
                    _journalDetailService.Insert(journalD);
                }
            }
        }
        private void FillPostJournalDetails(JournalDetail JDetail, JVVDetailModel JvDetail)
        {
            JDetail.AccountDescription = JvDetail.AccountDescription;
            JDetail.AccountName = JvDetail.AccountName;
            JDetail.AllowDisAllow = JvDetail.AllowDisAllow;
            JDetail.BaseCredit = JvDetail.BaseCredit == null ? null : JvDetail.BaseCredit < 0 ? Math.Abs(JvDetail.BaseCredit.Value) : JvDetail.BaseCredit;
            JDetail.BaseCreditTotal = JvDetail.BaseCreditTotal;
            JDetail.BaseDebit = JvDetail.BaseDebit == null ? null : JvDetail.BaseDebit < 0 ? Math.Abs(JvDetail.BaseDebit.Value) : JvDetail.BaseDebit;
            JDetail.BaseDebitTotal = JvDetail.BaseDebitTotal;
            JDetail.BaseTaxCredit = JvDetail.BaseTaxCredit == null ? null : JvDetail.BaseTaxCredit < 0 ? Math.Abs(JvDetail.BaseTaxCredit.Value) : JvDetail.BaseTaxCredit;
            JDetail.BaseTaxDebit = JvDetail.BaseTaxDebit == null ? null : JvDetail.BaseTaxDebit < 0 ? Math.Abs(JvDetail.BaseTaxDebit.Value) : JvDetail.BaseTaxDebit;
            JDetail.Nature = JvDetail.Nature;
            JDetail.DocCurrency = JvDetail.DocCurrency;
            JDetail.ServiceCompanyId = JvDetail.ServiceCompanyId;
            JDetail.DocNo = JvDetail.DocNo;
            JDetail.DocType = JvDetail.DocType;
            JDetail.DocSubType = JvDetail.DocSubType;
            JDetail.BaseCurrency = JvDetail.BaseCurrency;
            JDetail.ExchangeRate = JvDetail.ExchangeRate;
            JDetail.GSTExCurrency = JvDetail.GSTExCurrency;
            JDetail.GSTExchangeRate = JvDetail.GSTExchangeRate;
            JDetail.COAId = JvDetail.COAId;
            JDetail.Discount = JvDetail.Discount != 0 ? JvDetail.Discount : (double?)null;
            JDetail.DiscountType = JvDetail.DiscountType;
            JDetail.DocumentDetailId = JvDetail.DocumentDetailId;
            JDetail.DocumentId = JvDetail.DocumentId;
            JDetail.DocCredit = JvDetail.DocCredit == null ? null : JvDetail.DocCredit < 0 ? Math.Abs(JvDetail.DocCredit.Value) : JvDetail.DocCredit;
            JDetail.DocCreditTotal = JvDetail.DocCreditTotal;
            JDetail.DocDebit = JvDetail.DocDebit == null ? null : JvDetail.DocDebit < 0 ? Math.Abs(JvDetail.DocDebit.Value) : JvDetail.DocDebit;
            JDetail.DocTaxableAmount = JvDetail.DocTaxableAmount;
            JDetail.DocTaxAmount = JvDetail.DocTaxAmount;
            JDetail.BaseTaxableAmount = JvDetail.DocTaxableAmount;
            JDetail.BaseTaxAmount = JvDetail.BaseTaxAmount;
            JDetail.DocDebitTotal = JvDetail.DocDebitTotal;
            JDetail.DocTaxCredit = JvDetail.DocTaxCredit == null ? null : JvDetail.DocTaxCredit < 0 ? Math.Abs(JvDetail.DocTaxCredit.Value) : JvDetail.DocTaxCredit;
            JDetail.DocTaxDebit = JvDetail.DocTaxDebit == null ? null : JvDetail.DocTaxDebit < 0 ? Math.Abs(JvDetail.DocTaxDebit.Value) : JvDetail.DocTaxDebit;
            //JDetail.DocTaxCredit = JvDetail.DocTaxCredit;
            //JDetail.DocTaxDebit = JvDetail.DocTaxDebit;
            JDetail.ItemCode = JvDetail.ItemCode;
            JDetail.ItemDescription = JvDetail.ItemDescription;
            JDetail.ItemId = JvDetail.ItemId;
            JDetail.Qty = JvDetail.Qty != 0 ? JvDetail.Qty : (double?)null;
            JDetail.TaxId = JvDetail.TaxId;
            JDetail.TaxRate = JvDetail.TaxRate;
            JDetail.TaxType = JvDetail.TaxType;
            JDetail.Unit = JvDetail.Unit;
            JDetail.UnitPrice = JvDetail.UnitPrice != 0 ? JvDetail.UnitPrice : (decimal?)null;
            JDetail.OffsetDocument = JvDetail.OffsetDocument;
            JDetail.IsTax = JvDetail.IsTax;
            JDetail.EntityId = JvDetail.EntityId;
            JDetail.SettlementMode = JvDetail.SettlementMode;
            JDetail.SettlementRefNo = JvDetail.SettlementRefNo;
            JDetail.SettlementDate = JvDetail.SettlementDate;
            // JDetail.SystemRefNo = JvDetail.SystemRefNo;
            JDetail.Remarks = JvDetail.Remarks;
            JDetail.PONo = JvDetail.PONo;
            JDetail.CreditTermsId = JvDetail.CreditTermsId;
            JDetail.DueDate = JvDetail.DueDate != null ? JvDetail.DueDate : null;
            JDetail.SegmentMasterid1 = JvDetail.SegmentMasterid1;
            JDetail.SegmentMasterid2 = JvDetail.SegmentMasterid2;
            JDetail.SegmentDetailid1 = JvDetail.SegmentDetailid1;
            JDetail.SegmentDetailid2 = JvDetail.SegmentDetailid2;
            JDetail.NoSupportingDocs = JvDetail.NoSupportingDocs;
            JDetail.SegmentCategory1 = JvDetail.SegmentCategory1;
            JDetail.SegmentCategory2 = JvDetail.SegmentCategory2;
            JDetail.BaseAmount = JvDetail.BaseAmount;
            JDetail.DocDate = JvDetail.DocDate;
            JDetail.DocDescription = JvDetail.DocDescription;
            JDetail.PostingDate = JvDetail.PostingDate;
            JDetail.RecOrder = JvDetail.RecOrder;
            JDetail.Type = JvDetail.Type;
            JDetail.ClearingDate = JvDetail.ClearingDate;
            JDetail.ClearingStatus = JvDetail.ClearingStatus;
            JDetail.AmountDue = JvDetail.AmountDue;
            JDetail.IsBankReconcile = JvDetail.IsBankReconcile;
            JDetail.ReconciliationDate = JvDetail.ReconciliationDate;
            JDetail.ReconciliationId = JvDetail.ReconciliationId;
            JDetail.GSTTaxCredit = JvDetail.GSTTaxCredit != null ? Math.Abs(JvDetail.GSTTaxCredit.Value) : (decimal?)null;
            JDetail.GSTTaxDebit = JvDetail.GSTTaxDebit != null ? Math.Abs(JvDetail.GSTTaxDebit.Value) : (decimal?)null;
            JDetail.GSTDebit = JvDetail.GSTDebit != null ? Math.Abs(JvDetail.GSTDebit.Value) : (decimal?)null;
            JDetail.GSTCredit = JvDetail.GSTCredit != null ? Math.Abs(JvDetail.GSTCredit.Value) : (decimal?)null;
        }
        public void DeletePostVoid(JournalSaveModel tObject, string ConnectionString)
        {

            //if (tObject.DocType != DocTypeConstants.BankTransfer)
            //{
            //    Journal journal = _journalService.GetBydocumentId(tObject.Id, tObject.CompanyId);
            //    if (journal != null)
            //    {
            //        DeleteJournal(journal.Id, tObject.CompanyId);
            //    }
            //}
            //else
            //{
            List<Journal> lstJournal = _journalService.GetListBydocumentId(tObject.Id, tObject.CompanyId);
            if (lstJournal.Any())
            {
                foreach (var journal in lstJournal)
                {
                    journal.DocumentState = "Void";
                    journal.DocNo = tObject.DocNo;
                    journal.ObjectState = ObjectState.Modified;
                    journal.ModifiedBy = tObject.ModifiedBy;
                    journal.ModifiedDate = DateTime.UtcNow;
                    _journalService.Update(journal);

                    #region Documentary History
                    if (journal.DocSubType != DocTypeConstants.Application)
                    {
                        if (journal.DocType == DocTypeConstants.Invoice || journal.DocType == DocTypeConstants.DebitNote || journal.DocType == DocTypeConstants.CreditNote || journal.DocType == DocTypeConstants.BillCreditMemo || journal.DocType == DocTypeConstants.Bills || journal.DocType == DocTypeConstants.DoubtFulDebitNote)
                        {
                            try
                            {
                                List<DocumentHistoryModel> lstdocumet = AppaWorld.Bean.Common.FillDocumentHistory(journal.DocumentId.Value, journal.CompanyId, journal.DocumentId.Value, journal.DocType, journal.DocSubType, journal.DocumentState, journal.DocCurrency, journal.GrandDocDebitTotal != null ? journal.GrandDocDebitTotal.Value : journal.GrandDocCreditTotal.Value, journal.BalanceAmount.Value, journal.ExchangeRate.Value, tObject.ModifiedBy != null ? tObject.ModifiedBy : journal.UserCreated, journal.Remarks, null, 0, 0);
                                if (lstdocumet.Any())

                                    AppaWorld.Bean.Common.SaveDocumentHistory(lstdocumet, ConnectionString);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        else
                        {
                            if (journal.DocType != DocTypeConstants.Receipt && journal.DocType != DocTypeConstants.BillPayment && journal.DocType != DocTypeConstants.BankTransfer)
                            {
                                try
                                {
                                    List<DocumentHistoryModel> lstdocumet = AppaWorld.Bean.Common.FillDocumentHistory(journal.DocumentId.Value, journal.CompanyId, journal.DocumentId.Value, journal.DocType, journal.DocSubType, journal.DocumentState, journal.DocCurrency, journal.GrandDocDebitTotal != null ? journal.GrandDocDebitTotal.Value : journal.GrandDocCreditTotal.Value, 0, journal.ExchangeRate.Value, tObject.ModifiedBy != null ? tObject.ModifiedBy : journal.UserCreated, journal.Remarks, null, 0, 0);
                                    if (lstdocumet.Any())
                                        AppaWorld.Bean.Common.SaveDocumentHistory(lstdocumet, ConnectionString);
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                        }
                    }
                    #endregion Documentary History
                }
            }


            try
            {
                _UnitOfWorkAsync.SaveChanges();

                #region Customer_Entity_Balance_Updation
                Journal journalModel = lstJournal.FirstOrDefault();
                if (journalModel != null && (journalModel.DocType == DocTypeConstants.Invoice || journalModel.DocType == DocTypeConstants.DebitNote || journalModel.DocType == DocTypeConstants.CreditNote || journalModel.DocType == DocTypeConstants.Receipt))
                {
                    decimal? creditLimitValue = _beanEntityService.GetCteditLimitsValue(journalModel.EntityId.Value);

                    using (con = new SqlConnection(ConnectionString))
                    {
                        if (con.State != ConnectionState.Open)
                            con.Open();
                        cmd = new SqlCommand("Bean_SoaSummaryForEntity", con);
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@EntityId", journalModel.EntityId.ToString());
                        cmd.Parameters.AddWithValue("@companyId", journalModel.CompanyId);
                        dr = cmd.ExecuteReader();
                        if (dr.HasRows)
                        {
                            while (dr.Read())
                            {
                                decimal? amount = dr["GrossBalance"] != DBNull.Value ? Convert.ToDecimal(dr["GrossBalance"]) : (decimal?)null;
                                decimal? netamount = dr["NetBalance"] != DBNull.Value ? Convert.ToDecimal(dr["NetBalance"]) : (decimal?)null;
                                //string data = $"Update Bean.Entity set CustBal={amount} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                dr.Close();
                                if (creditLimitValue != null)
                                {
                                    creditLimitValue = creditLimitValue - (amount != null ? amount : 0);
                                }

                                string data = null;
                                if (amount == null)
                                {
                                    if (creditLimitValue != null)
                                        data = $"Update Bean.Entity set CustBal = Null,CreditLimitValue={creditLimitValue} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                    else
                                        data = $"Update Bean.Entity set CustBal = Null where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                }
                                else
                                {
                                    if (creditLimitValue != null)
                                        data = $"Update Bean.Entity set CustBal= {netamount},CreditLimitValue={creditLimitValue} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                    else
                                        data = $"Update Bean.Entity set CustBal= {netamount} where CompanyId={journalModel.CompanyId} and Id='" + journalModel.EntityId + "'";
                                }
                                if (con.State != ConnectionState.Open)
                                    con.Open();
                                cmd = new SqlCommand(data, con);
                                cmd.ExecuteNonQuery();
                            }
                        }
                        con.Close();
                    }
                }
                #endregion Customer_Entity_Balance_Updation
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
            //  }
        }
        public void DeletePayrollPostVoid(JournalSaveModel tObject)
        {
            List<Journal> lstJournal = _journalService.GetListBydocumentId(tObject.Id, tObject.CompanyId);
            if (lstJournal.Any())
            {
                foreach (var journal in lstJournal)
                {
                    if (journal != null)
                    {
                        DeleteJournal(journal.Id, tObject.CompanyId);
                    }
                }
            }
        }
        #endregion

        #region Get Calls


        #region GetDocumentJournal
        public DocumentModel GetDocumentJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            if (type == DocTypeConstants.DoubtFulDebitNote)
            {
                return GetDoubtfuldebtJournal(id, systemRefNo, companyId, type);
            }
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            Feature feature = _featureService.Queryable().Where(c => c.ModuleId == null && c.Name == "Inter-Company").FirstOrDefault();
            CompanyFeature companyFeature = _companyFeatureService.Query(c => c.FeatureId == feature.Id && c.CompanyId == companyId).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            documentmodel.IsInterCompanyActive = companyFeature.Status == RecordStatusEnum.Active ? true : false;
            if (journal != null)
            {
                FillDocumentJournal(documentmodel, journal, type);
                if (type == DocTypeConstants.Invoice || type == DocTypeConstants.CreditNote)
                {
                    var invoice = _invoiceService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (invoice != null)
                    {
                        documentmodel.DocState = invoice.DocumentState;
                        documentmodel.PONo = invoice.PONo;
                        documentmodel.DocDescription = invoice.Remarks;
                    }
                }
                if (type == DocTypeConstants.DebitNote)
                {
                    var invoice = _debitNoteService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (invoice != null)
                    {
                        documentmodel.DocState = invoice.DocumentState;
                        //documentmodel.PONo = invoice.PONo;
                        documentmodel.DocDescription = invoice.Remarks;
                    }
                }
                if (type == DocTypeConstants.BillCreditMemo)
                {
                    documentmodel.DocDescription = journal.Remarks;
                    documentmodel.PostingDate = journal.PostingDate.Value;
                }
                if (type == "Bill" || type == DocTypeConstants.PayrollBill)
                {
                    var bill = _billService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (bill != null)
                    {
                        documentmodel.DocState = bill.DocumentState;
                        //documentmodel.PONo = invoice.PONo;
                        documentmodel.PostingDate = bill.PostingDate;
                        documentmodel.DocDescription = journal.Remarks;
                    }
                }
                if (journal.DocSubType == "Application")
                {
                    documentmodel.DocDescription = journal.Remarks;
                    documentmodel.DocState = journal.DocumentState;
                }
                DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                List<JournalDetail> alllstjds;
                if (type == DocTypeConstants.DoubtFulDebitNote)
                    alllstjds = _journalDetailService.GetAllJournalDetailsByid(journal.Id);
                else
                    alllstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                //DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                if (alllstjds.Any())
                {
                    var lstjds = alllstjds.Where(x => x.DocumentDetailId != new Guid("00000000-0000-0000-0000-000000000000") && x.IsTax != true).ToList();
                    foreach (var jd in lstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        FillDocumentDetail(documentDetail, jd, false, journal.DocSubType == "Application" ? true : false, documentmodel.IsInterCompanyActive, journal.ExchangeRate);
                        if (documentDetail.DocType == DocTypeConstants.DebitNote)
                            documentDetail.AccountDescription = jd.AccountDescription;
                        if (documentDetail.DocType == DocTypeConstants.Bills)
                            documentDetail.AccountDescription = jd.DocDescription;
                        if (documentDetail.DocType == DocTypeConstants.PayrollBill)
                            documentDetail.AccountDescription = jd.DocDescription;
                        if (journal.DocType == DocTypeConstants.BillCreditMemo)
                            documentDetail.AccountDescription = jd.AccountDescription;
                        if (journal.DocSubType == "Application")
                            documentDetail.AccountDescription = journal.Remarks;
                        if (journal.DocType == DocTypeConstants.Payment || journal.DocType == DocTypeConstants.PayrollPayment)
                            documentDetail.AccountDescription = journal.Remarks;
                        //if (documentmodel.IsInterCompanyActive)
                        //{
                        //    var serviceCompany = _companyService.GetById(jd.ServiceCompanyId);
                        //    string name = serviceCompany != null ? "I/C - " + serviceCompany.ShortName : string.Empty;
                        //    documentDetail.AccountName = name;
                        //}
                        lstDocumentDetail.Add(documentDetail);
                    }
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();

                    var mjd = alllstjds.Where(x => x.DocumentDetailId == new Guid("00000000-0000-0000-0000-000000000000")).FirstOrDefault();
                    if (journal.DocSubType == "Application")
                    {
                        ChartOfAccount account1 = _chartOfAccountService.GetByName(journal.Nature == "Trade" ? COANameConstants.AccountsReceivables : COANameConstants.OtherReceivables, companyId);
                        if (account1 != null)
                        {
                            documentDetail1.AccountName = account1.Name;
                        }
                        if (type == DocTypeConstants.CreditNote || type == "Application")
                        {
                            documentDetail1.DocDebit = mjd.DocDebit;
                            documentDetail1.BaseDebit = mjd.BaseDebit;
                        }
                        documentDetail1.DocDescription = mjd.DocDescription;
                        documentDetail1.AccountDescription = mjd.DocDescription;
                        documentDetail1.ISDiSAllowShow = false;
                        lstDocumentDetail.Add(documentDetail1);
                    }
                    else
                    {
                        if (type == DocTypeConstants.Invoice)
                        {
                            List<InvoiceCreditNoteModel> lstInvCnModel = new List<InvoiceCreditNoteModel>();
                            FillInvoiceCreditNoteModel(lstInvCnModel, journal.DocumentId);
                            documentmodel.InvoiceCreditNoteModels = lstInvCnModel;
                            List<InvoiceDoubtFulDebitModel> lstInvDdModel = new List<InvoiceDoubtFulDebitModel>();
                            FillInvoiceDoubtFulDebitModel(lstInvDdModel, journal.DocumentId);
                            documentmodel.InvoiceDoubtFulDebitModels = lstInvDdModel;
                            if (documentmodel.InvoiceDoubtFulDebitModels.Any())
                            {
                                documentmodel.DoubtfulDebitTotalAmount = Math.Round((decimal)(documentmodel.InvoiceDoubtFulDebitModels.Sum(c => c.Amount)), 2);
                            }
                        }
                        List<TaxDetailsModel> lstTax = new List<TaxDetailsModel>();
                        documentmodel.DocumentDetailModels = documentmodel.DocumentDetailModels.Where(c => c.TaxCode != null).OrderBy(d => d.RecOrder).ToList();
                        var journalDetailsModel1 = documentmodel.DocumentDetailModels.GroupBy(c => c.TaxCode).ToList();
                        var journalDetailsModel2 = documentmodel.DocumentDetailModels; // new line Avinash
                        foreach (var grouptax in journalDetailsModel1)
                        {
                            var Tax = TaxDetailsModel(grouptax);
                            lstTax.Add(Tax);
                        }
                        documentmodel.TaxDetails = lstTax;
                        if (documentmodel.TaxDetails.Count > 0)
                        {
                            GetTaxDetails(documentmodel, lstDocumentDetail);
                            documentmodel.DocumentDetailModels = lstDocumentDetail;
                        }
                        if (type == DocTypeConstants.Bills || type == DocTypeConstants.BillCreditMemo || type == DocTypeConstants.PayrollBill)
                        {
                            ChartOfAccount account1 = _chartOfAccountService.GetByName(journal.Nature == "Trade" ? COANameConstants.AccountsPayable : COANameConstants.OtherPayables, companyId);
                            if (account1 != null)
                                documentDetail1.AccountName = account1.Name;
                        }
                        else if (journal.DocSubType == DocTypeConstants.Payment || journal.DocSubType == DocTypeConstants.PayrollPayment)
                        {
                            //documentDetail1.AccountDescription = journal.Remarks;
                            //var coa1 = _chartOfAccountService.GetChartOfAccountById(journal.COAId.Value);
                            var coa = _chartOfAccountService.GetChartOfAccountById(mjd.COAId);
                            var serviceCompany = _companyService.GetById(mjd.ServiceCompanyId);
                            if (coa != null)
                                documentDetail1.AccountName = coa.Name != "Clearing" ? coa.Name == "I/C" ? serviceCompany != null ? coa.Name + " - " + serviceCompany.ShortName : string.Empty : coa.Name : coa.Name + "- payments";
                            documentDetail1.AccountDescription = journal.Remarks;
                            //documentDetail1.RecOrder = documentDetail1.AccountName == "Clearing- payments" ? lstDocumentDetail.Max(c => c.RecOrder) + 1 : null;
                            //if (documentmodel.IsInterCompanyActive == true)
                            //{
                            //    var coa1 = _chartOfAccountService.Query(c => c.Currency == journal.DocCurrency && c.IsBank == true).Select().FirstOrDefault();
                            //    var doc = _journalService.Queryable().Where(c => c.DocCurrency == coa1.Currency && c.CompanyId == companyId).FirstOrDefault();
                            //    var company = _companyService.GetById(doc.ServiceCompanyId);

                            //    string ic = company != null ? "I/C - " + company.ShortName : string.Empty;
                            //    documentDetail1.AccountName = mjd.DocCredit != null && coa.Name != "Clearing" ? ic : documentDetail1.AccountName;
                            //}
                        }
                        else
                        {
                            ChartOfAccount account1 = _chartOfAccountService.GetByName(journal.Nature == "Trade" ? COANameConstants.AccountsReceivables : COANameConstants.OtherReceivables, companyId);
                            if (account1 != null)
                            {
                                documentDetail1.AccountName = account1.Name;
                                documentDetail1.AccountDescription = journal.Remarks;
                            }
                        }
                        if (type == DocTypeConstants.CreditNote || type == "Application")
                        {
                            documentDetail1.DocCredit = mjd.DocCredit;
                            documentDetail1.BaseCredit = mjd.BaseCredit;
                        }
                        else if (type == "Bill" || type == DocTypeConstants.PayrollBill)
                        {
                            documentDetail1.DocCredit = mjd.DocCredit;
                            documentDetail1.BaseCredit = mjd.BaseCredit;
                            documentDetail1.AccountDescription = journal.Remarks;
                        }
                        else if (type == DocTypeConstants.Payment || type == DocTypeConstants.PayrollPayment)
                        {
                            documentDetail1.DocCredit = mjd.DocCredit;
                            documentDetail1.BaseCredit = mjd.BaseCredit;
                            documentDetail1.DocDebit = mjd.DocDebit;
                            documentDetail1.BaseDebit = mjd.BaseDebit;
                        }
                        else
                        {
                            documentDetail1.DocDebit = mjd.DocDebit;
                            documentDetail1.BaseDebit = mjd.BaseDebit;
                        }
                        //documentDetail1.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                        documentDetail1.ISDiSAllowShow = false;
                        if (mjd.IsTax == false)
                            documentDetail1.TaxIdCode = "NA";
                        lstDocumentDetail.Add(documentDetail1);
                        documentmodel.DocumentDetailModels = lstDocumentDetail;
                        if (type == DocTypeConstants.CreditNote || type == DocTypeConstants.DoubtFulDebitNote)
                        {
                            jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocDebit)), 2);
                            jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(jTaxDetailModel.GrandDocDebitTotal), 2);
                            jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit)), 2);
                            jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(jTaxDetailModel.GrandBaseDebitTotal), 2);
                        }
                        else
                        {
                            jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocCredit)), 2);
                            jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandDocCreditTotal), 2);
                            jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit)), 2);
                            jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandBaseCreditTotal), 2);
                        }
                        jTaxDetailModel.GrandDocTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxDebit)), 2);
                        jTaxDetailModel.GrandDocTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxCredit)), 2);
                        jTaxDetailModel.GrandBaseTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxDebit)), 2);
                        jTaxDetailModel.GrandBaseTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxCredit)), 2);

                        documentmodel.JournalTaxDetailsModel = jTaxDetailModel;



                        List<JournalGSTTaxModel> lstGstTax = new List<JournalGSTTaxModel>();
                        JournalGSTModel jGst = new JournalGSTModel();
                        documentmodel.DocType = type;
                        //foreach (var grouptax in journalDetailsModel1)
                        //{
                        //    if (type == DocTypeConstants.CreditNote || type == "Bill" || type == DocTypeConstants.Payment)
                        //    {
                        //        JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                        //        gstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                        //        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                        //        var tax = _taxCodeService.GetTaxById(taxId);
                        //        gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                        //        gstTax.Amount = Math.Round((decimal)(grouptax.Sum(c => c.DocDebit)), 2);
                        //        gstTax.Amount = Math.Round((decimal)(gstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                        //        gstTax.TaxAmount = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2);
                        //        gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                        //        gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                        //        lstGstTax.Add(gstTax);
                        //    }
                        //    else
                        //    {
                        //        JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                        //        gstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                        //        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                        //        var tax = _taxCodeService.GetTaxById(taxId);
                        //        gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                        //        gstTax.Amount = Math.Round((decimal)(grouptax.Sum(c => c.DocCredit)), 2);
                        //        gstTax.Amount = Math.Round((decimal)(gstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                        //        gstTax.TaxAmount = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
                        //        gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                        //        gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                        //        lstGstTax.Add(gstTax);
                        //    }
                        //}
                        //new code Avinash
                        foreach (var grouptax in journalDetailsModel2)
                        {
                            if (type == DocTypeConstants.CreditNote || type == "Bill" || type == DocTypeConstants.Payment || type == DocTypeConstants.PayrollPayment)
                            {
                                JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                                gstTax.TaxCode = grouptax.TaxCode; // modified Avinash
                                long taxId = grouptax.TaxId;// modified Avinash
                                var tax = _taxCodeService.GetTaxById(taxId);
                                gstTax.TaxId = taxId; // new line Avinash
                                gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                                gstTax.Amount = grouptax.DocDebit != null ? (grouptax.DocDebit) : 0; // modified Avinash
                                gstTax.Amount = Math.Round((decimal)(gstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                                gstTax.TaxAmount = grouptax.DocTaxDebit != null ? Math.Round((decimal)(grouptax.DocTaxDebit), 2) : 0; // modified Avinash
                                gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                                gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                                lstGstTax.Add(gstTax);
                            }
                            else
                            {
                                JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                                gstTax.TaxCode = grouptax.TaxCode;// modified Avinash
                                long taxId = grouptax.TaxId;// modified Avinash
                                var tax = _taxCodeService.GetTaxById(taxId);
                                gstTax.TaxId = taxId; // new line Avinash
                                gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                                gstTax.Amount = grouptax.DocCredit != null ? (grouptax.DocCredit) : 0;// modified Avinash
                                gstTax.Amount = Math.Round((decimal)(gstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                                gstTax.TaxAmount = grouptax.DocTaxCredit != null ? Math.Round((decimal)(grouptax.DocTaxCredit), 2) : 0;// modified Avinash
                                gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                                gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                                lstGstTax.Add(gstTax);
                            }
                        }
                        List<JournalGSTTaxModel> lstGstTax1 = new List<JournalGSTTaxModel>();
                        if (lstGstTax.Any())
                        {

                            foreach (var group in lstGstTax.GroupBy(c => c.TaxCode))
                            {
                                JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                                gstTax.TaxCode = group.Select(c => c.TaxCode).FirstOrDefault();
                                long? taxId = group.Select(c => c.TaxId).FirstOrDefault();
                                var tax = _taxCodeService.GetTaxById(taxId);
                                gstTax.TaxIdCode = group.Select(c => c.TaxIdCode).FirstOrDefault();
                                //tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                                gstTax.Amount = Math.Round((decimal)(group.Sum(c => c.Amount)), 2);
                                gstTax.Amount = Math.Round((decimal)(gstTax.Amount), 2);
                                gstTax.TaxAmount = Math.Round((decimal)(group.Sum(c => c.TaxAmount)), 2);
                                gstTax.TaxAmount = (gstTax.TaxAmount != 0 && gstTax.TaxAmount != null) ? Math.Round((decimal)(gstTax.TaxAmount), 2) : 0;
                                gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                                lstGstTax1.Add(gstTax);
                            }
                        }
                        //end new code Avinash
                        documentmodel.JournalGSTTaxModel = lstGstTax1; //modified avinash
                        jGst.GrandAmount = Math.Round((decimal)(lstGstTax1.Sum(c => c.Amount)), 2);//modified avinash
                        jGst.GrandTaxAmount = Math.Round((decimal)(lstGstTax1.Sum(c => c.TaxAmount)), 2);//modified avinash
                        jGst.GrandTotal = Math.Round((decimal)(lstGstTax1.Sum(c => c.TotalAmount)), 2);//modified avinash
                        documentmodel.JournalGSTDetailModel = jGst;
                    }
                    if (journal.DocSubType == "Application")
                    {
                        jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.DocDebit)), 2);
                        jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.DocCredit)), 2);
                        jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.BaseDebit)), 2);
                        jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.BaseCredit)), 2);
                        documentmodel.JournalTaxDetailsModel = jTaxDetailModel;
                    }

                    if (documentmodel.JournalTaxDetailsModel != null)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        //documentDetail.AccountName = documentmodel.JournalTaxDetailsModel..TaxName;
                        documentDetail.AccountName = "Grand Total";
                        documentDetail.DocDebit = documentmodel.JournalTaxDetailsModel.GrandDocDebitTotal;
                        documentDetail.DocCredit = documentmodel.JournalTaxDetailsModel.GrandDocCreditTotal;
                        documentDetail.BaseDebit = documentmodel.JournalTaxDetailsModel.GrandBaseDebitTotal;
                        documentDetail.BaseCredit = documentmodel.JournalTaxDetailsModel.GrandBaseCreditTotal;
                        documentDetail.DocTaxCredit = documentmodel.JournalTaxDetailsModel.GrandDocTaxCreditTotal;
                        documentDetail.DocTaxDebit = documentmodel.JournalTaxDetailsModel.GrandDocTaxDebitTotal;
                        documentDetail.BaseTaxDebit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxDebitTotal;
                        documentDetail.BaseTaxCredit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxCreditTotal;
                        documentDetail.ISDiSAllowShow = false;
                        documentDetail.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                        lstDocumentDetail.Add(documentDetail);
                        documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).ToList();
                    }
                    // if (journal.DocSubType == "Application")
                    documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(x => x.RecOrder).Where(c => c.DocCredit > 0 || c.DocDebit > 0 || c.BaseDebit > 0 || c.BaseCredit > 0).ToList();
                }
            }
            return documentmodel;
        }

        private static void GetTaxDetails(DocumentModel documentmodel, List<DocumentDetailModel> lstDocumentDetail)
        {
            foreach (var tax in documentmodel.TaxDetails)
            {
                if (tax.TaxRate != 0 && tax.TaxRate != null)
                {
                    int? rec = lstDocumentDetail.Max(c => c.RecOrder) == null ? 0 + 1 : lstDocumentDetail.Max(c => c.RecOrder) + 1;
                    DocumentDetailModel documentDetail = new DocumentDetailModel
                    {
                        RecOrder = rec,
                        //AccountName = tax.TaxName + " (" + tax.TaxCode + "-" + tax.TaxRate + "%" + ")",
                        AccountName = COANameConstants.TaxPayableGST,
                        DocDebit = tax.TaxDocDebit,
                        DocCredit = tax.TaxDocCredit,
                        BaseDebit = tax.TaxBaseDebit,
                        TaxIdCode = tax.TaxCode != "NA" ? tax.TaxCode + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.TaxCode,
                        BaseCredit = tax.TaxBaseCredit,
                        AccountDescription = documentmodel.DocDescription,
                        ISDiSAllowShow = false
                    };
                    lstDocumentDetail.Add(documentDetail);
                }
            }
        }

        private TaxDetailsModel TaxDetailsModel(IGrouping<string, DocumentDetailModel> grouptax)
        {
            TaxDetailsModel Tax = new TaxDetailsModel();
            long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
            var tax = _taxCodeService.GetTaxById(taxId);
            if (tax != null)
            {
                Tax.TaxCode = tax.Code;
                Tax.TaxName = tax.Name;
                Tax.TaxRate = tax.TaxRate;
                Tax.TaxType = tax.TaxType;
            }
            Tax.TaxDocCredit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
            Tax.TaxDocCredit = Tax.TaxDocCredit != 0 ? Tax.TaxDocCredit : null;
            Tax.TaxBaseCredit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxCredit)), 2);
            Tax.TaxBaseCredit = Tax.TaxBaseCredit != 0 ? Tax.TaxBaseCredit : null;
            Tax.TaxDocDebit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2);
            Tax.TaxDocDebit = Tax.TaxDocDebit != 0 ? Tax.TaxDocDebit : null;
            Tax.TaxBaseDebit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxDebit)), 2);
            Tax.TaxBaseDebit = Tax.TaxBaseDebit != 0 ? Tax.TaxBaseDebit : null;
            return Tax;
        }

        public string GetJournalReverse(RVModel revaluation)
        {
            List<Journal> lstJournal = _journalService.GetAllRevalJournalByDocId(revaluation.Id, revaluation.CompanyId);
            if (lstJournal.Any())
            {
                foreach (var journal in lstJournal)
                {
                    journal.DocumentState = JournalState.Void;
                    journal.ObjectState = ObjectState.Modified;
                    _journalService.Update(journal);
                }
            }
            try
            {
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return "Revaluation had neen voided!!!";
        }
        private void FillDocumentDetail(DocumentDetailModel documentdetaiilmodel, JournalDetail jd, bool isTotal, bool isApplication, bool isInterCompanyActive, decimal? exchangeRate)
        {

            var exchangeRate1 = exchangeRate == null ? 1 : exchangeRate;
            var paymentOutstanding = _paymentDetailService.GetPaymentDetail(jd.DocumentDetailId);
            documentdetaiilmodel.DetailId = paymentOutstanding != null ? paymentOutstanding.DocumentId : new Guid();
            var coa = _chartOfAccountService.GetChartOfAccountById(jd.COAId);
            var serviceCompany = _companyService.GetById(jd.ServiceCompanyId);
            if (coa != null)
            {
                documentdetaiilmodel.AccountName = coa.Name == "I/C" ? coa.Name + "-" + serviceCompany.ShortName : coa.Name;
            }
            //if (isInterCompanyActive)
            //{
            //    var serviceCompany = _companyService.GetById(jd.ServiceCompanyId);
            //    string name = serviceCompany != null ? "I/C - " + serviceCompany.ShortName : string.Empty;
            //    var coa1 = _chartOfAccountService.Query(c => c.Currency == jd.DocCurrency && c.IsBank == true).Select().FirstOrDefault();
            //    documentdetaiilmodel.AccountName = coa1 != null && jd.DocDebit != null ? name : coa.Name;
            //}
            documentdetaiilmodel.Disallowable = jd.AllowDisAllow;
            if (jd.TaxId != null)
            {
                documentdetaiilmodel.TaxId = jd.TaxId.Value;
                var tax = _taxCodeService.GetTaxId(jd.TaxId);

                if (tax != null && tax.Code != "NA")
                {
                    documentdetaiilmodel.TaxCode = tax.Code;
                    documentdetaiilmodel.TaxType = tax.TaxType;
                    documentdetaiilmodel.TaxRate = tax.TaxRate ?? 0;
                    //documentdetaiilmodel.TaxIdCode = tax.Code + "-" + tax.TaxRate + "%" + "(" + tax.TaxType[0] + ")";
                    documentdetaiilmodel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                }
                else
                    documentdetaiilmodel.TaxIdCode = "NA";
            }
            else
                documentdetaiilmodel.TaxIdCode = "NA";
            if (isApplication)
            {
                documentdetaiilmodel.AccountDescription = jd.DocDescription;
                documentdetaiilmodel.OffsetDocument = coa != null ? coa.Name != "Exchange Gain/Loss - Realised" ? jd.OffsetDocument : string.Empty : null;
            }
            else
            {
                documentdetaiilmodel.AccountDescription = jd.AccountDescription;
                documentdetaiilmodel.OffsetDocument = jd.OffsetDocument;
            }
            documentdetaiilmodel.Item = jd.ItemId;
            documentdetaiilmodel.ItemCode = jd.ItemCode;
            documentdetaiilmodel.ItemDescription = jd.ItemDescription;
            documentdetaiilmodel.Qty = jd.Qty;
            documentdetaiilmodel.Unit = jd.Unit;
            documentdetaiilmodel.UnitPrice = jd.UnitPrice;
            documentdetaiilmodel.RecOrder = jd.RecOrder;
            documentdetaiilmodel.DocDebit = jd.DocDebit;
            documentdetaiilmodel.DocCredit = jd.DocCredit;
            documentdetaiilmodel.DocType = jd.DocType;
            documentdetaiilmodel.DocumentDate = jd.DocDate;
            documentdetaiilmodel.DocNo = jd.DocNo;
            documentdetaiilmodel.ISDiSAllowShow = coa != null ? /*coa.Class == "Exchange gain/loss" || coa.Class == "Rounding" || coa.Class == "Other expenses" || coa.Class == "Other income" || coa.Class == "Taxation" || coa.Class == "Financing Expenses" || coa.Class == "Revenue" || coa.Class == "Direct costs" || coa.Class == "Operating expenses" */coa.Category == "Income Statement" ? true : false : false;
            documentdetaiilmodel.SegmentCategory1 = jd.SegmentCategory1;
            documentdetaiilmodel.SegmentCategory2 = jd.SegmentCategory2;
            //if (documentdetaiilmodel.DocType == DocTypeConstants.CashSale)
            //    documentdetaiilmodel.AccountDescription = jd.DocDescription;
            //if (documentdetaiilmodel.DocType == DocTypeConstants.DebitNote)
            //    documentdetaiilmodel.AccountDescription = jd.Remarks;
            // documentdetaiilmodel.AccountDescription = jd.AccountDescription;
            //if (jd.SegmentDetailid1 != null)
            //{
            //    var segmnet1 = _segmentDetailService.GetSegmentById(jd.SegmentDetailid1.Value);
            //    documentdetaiilmodel.SegmentDetailidName1 = segmnet1.Name;
            //}
            //if (jd.SegmentMasterid1 != null)
            //{
            //    var segment2 = _segmentDetailService.GetSegmentById(jd.SegmentMasterid1.Value);
            //    documentdetaiilmodel.SegmentMasteridName1 = segment2.Name;
            //}

            if (isApplication == false)
            {
                documentdetaiilmodel.BaseDebit = jd.BaseDebit != null ? ((decimal?)Math.Round((decimal)(jd.BaseDebit), 2, MidpointRounding.AwayFromZero)) : null;
                documentdetaiilmodel.BaseCredit = jd.BaseCredit != null ? ((decimal?)Math.Round((decimal)(jd.BaseCredit ?? 0), 2, MidpointRounding.AwayFromZero)) : null;
                documentdetaiilmodel.DocTaxDebit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? jd.DocDebit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocDebit) * Convert.ToDecimal(documentdetaiilmodel.TaxRate / 100)), 2, MidpointRounding.AwayFromZero)) : null : null;
                //documentdetaiilmodel.DocTaxDebit = documentdetaiilmodel.DocTaxDebit == 0 ? null : documentdetaiilmodel.DocTaxDebit;
                documentdetaiilmodel.BaseTaxDebit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocTaxDebit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocTaxDebit) * Convert.ToDecimal(exchangeRate1)), 2, MidpointRounding.AwayFromZero)) : null : null;
                //documentdetaiilmodel.BaseTaxDebit = documentdetaiilmodel.BaseTaxDebit == 0 ? null : documentdetaiilmodel.BaseTaxDebit;
                documentdetaiilmodel.DocTaxCredit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocCredit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocCredit) * Convert.ToDecimal(documentdetaiilmodel.TaxRate / 100)), 2, MidpointRounding.AwayFromZero)) : null : null;
                //documentdetaiilmodel.DocTaxCredit = documentdetaiilmodel.DocTaxCredit == 0 ? null : documentdetaiilmodel.DocTaxCredit;
                documentdetaiilmodel.BaseTaxCredit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocTaxCredit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocTaxCredit) * Convert.ToDecimal(exchangeRate1)), 2, MidpointRounding.AwayFromZero)) : null : null;
                //documentdetaiilmodel.BaseTaxCredit = documentdetaiilmodel.BaseTaxCredit == 0 ? null : documentdetaiilmodel.BaseTaxCredit;
            }
            else
            {
                documentdetaiilmodel.BaseDebit = (decimal?)jd.BaseDebit != null ? ((decimal?)Math.Round((decimal)(jd.BaseDebit), 2, MidpointRounding.AwayFromZero)) : null;
                documentdetaiilmodel.BaseCredit = (decimal?)jd.BaseCredit != null ? ((decimal?)Math.Round((decimal)(jd.BaseCredit), 2, MidpointRounding.AwayFromZero)) : null; ;
            }
        }
        private void FillDocumentJournal(DocumentModel documentmodel, Journal journal, string type)
        {
            documentmodel.DocumentId = journal.DocumentId;
            documentmodel.DocDate = journal.DocDate;
            documentmodel.DocNo = journal.DocNo;
            documentmodel.PostingDate = journal.PostingDate;
            documentmodel.DocState = journal.DocumentState;
            documentmodel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            if (journal.ServiceCompanyId != null)
            {
                var company = _companyService.GetById(journal.ServiceCompanyId.Value);
                documentmodel.ServiceCompanyId = journal.ServiceCompanyId;
                documentmodel.ServiceCompanyName = company.ShortName;
            }
            documentmodel.NoSupportingDocument = journal.NoSupportingDocument;
            documentmodel.IsNoSupportingDocs = journal.IsNoSupportingDocs;
            documentmodel.DocDescription = journal.DocumentDescription;
            documentmodel.DocCurrency = (journal.DocType == DocTypeConstants.Payment || journal.DocType == DocTypeConstants.PayrollPayment) ? journal.DocCurrency != journal.ExCurrency ? journal.DocCurrency : journal.ExCurrency : journal.DocCurrency;
            documentmodel.ExchangeRate = journal.ExchangeRate;
            documentmodel.GstExchangeRate = journal.GSTExchangeRate;
            documentmodel.BaseCurrency = journal.ExCurrency;
            documentmodel.GstReportingCurrency = journal.GSTExCurrency;
            documentmodel.ExDurationFrom = journal.ExDurationFrom;
            documentmodel.ExDurationTo = journal.ExDurationTo;
            documentmodel.GstdurationFrom = journal.GSTExDurationFrom;
            documentmodel.GstDurationTo = journal.GSTExDurationTo;
            documentmodel.CreatedDate = journal.CreatedDate;
            documentmodel.UserCreated = journal.UserCreated;
            documentmodel.ModifiedDate = journal.ModifiedDate;
            documentmodel.ModifiedBy = journal.ModifiedBy;
            //MultiCurrencySetting multi = _multiCurrencySettingService.GetByCompanyId(journal.CompanyId);
            documentmodel.IsMultiCurrency = journal.IsMultiCurrency;
            documentmodel.IsGstSettings = journal.IsGstSettings;
            //documentmodel.SegmentCategory1 = journal.SegmentCategory1;
            //documentmodel.SegmentCategory2 = journal.SegmentCategory2;
            //documentmodel.SegmentName1 = journal.SegmentMasterid1 == null ? null : _segmentMasterService.GetSegmentName(journal.SegmentMasterid1.Value);
            //documentmodel.SegmentName2 = journal.SegmentMasterid2 == null ? null : _segmentMasterService.GetSegmentName(journal.SegmentMasterid2.Value);
            documentmodel.IsRecurringJournal = journal.IsRecurringJournal;
            documentmodel.RecurringJournalName = journal.RecurringJournalName;
            documentmodel.Frequency = journal.FrequencyType;
            documentmodel.FrequencyEndDate = journal.FrequencyEndDate;
            documentmodel.IsAutoReversalJournal = journal.IsAutoReversalJournal;
            documentmodel.ReversalDate = journal.ReversalDate;
            documentmodel.Remarks = journal.Remarks;
            documentmodel.BankClearingDate = journal.ClearingDate;
            if (type == "Cash Sale")
            {
                var cashAndBankAccount = _cashSaleService.GetCashSaleId(journal.DocumentId);
                //documentmodel.COAId = CashAndBankAccount.COAId;
                //documentmodel.ReceiptrefNo = CashAndBankAccount.ReceiptrefNo;
                //documentmodel.ModeOfReceipt = CashAndBankAccount.ModeOfReceipt;

                ChartOfAccount coa = _chartOfAccountService.GetChartOfAccountById(cashAndBankAccount.COAId);
                documentmodel.CashAndBankAccount = coa != null ? coa.Name : null;
                documentmodel.ModeOfReceipt = cashAndBankAccount.ModeOfReceipt;
                documentmodel.ReceiptrefNo = cashAndBankAccount.ReceiptrefNo;
            }
            if (type == DocTypeConstants.Withdrawal || type == DocTypeConstants.Deposit || type == DocTypeConstants.CashPayment)
            {
                var withdrawal = _withdrawalService.GetById(journal.DocumentId);
                ChartOfAccount coa = _chartOfAccountService.GetChartOfAccountById(withdrawal.COAId);
                documentmodel.CashAndBankAccount = coa != null ? coa.Name : null;
                documentmodel.ModeOfReceipt = withdrawal.ModeOfWithDrawal;
                documentmodel.ReceiptrefNo = withdrawal.WithDrawalRefNo;
                documentmodel.DocDescription = withdrawal.DocDescription;
            }
            if (type == DocTypeConstants.Payment || type == DocTypeConstants.PayrollPayment)
            {
                var payment = _paymentService.GetPayment(journal.DocumentId);
                ChartOfAccount coa = _chartOfAccountService.GetChartOfAccountById(payment.COAId);
                documentmodel.CashAndBankAccount = coa != null ? coa.Name : null;
                documentmodel.ModeOfReceipt = payment.ModeOfPayment;
                documentmodel.ReceiptrefNo = payment.PaymentRefNo;
                documentmodel.DocDescription = payment.Remarks;
                documentmodel.DocState = payment.DocumentState;
            }
            if (journal.EntityId != null)
            {
                var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
                if (entity != null)
                {
                    documentmodel.EntityName = entity.Name;
                    documentmodel.EntityType = journal.EntityType;
                }
            }
            documentmodel.DueDate = journal.DueDate;
            var terms = _termsOfPaymentService.GetById(journal.CreditTermsId);
            if (terms != null)
                documentmodel.CreditTermsName = terms.Name;
            documentmodel.Nature = journal.Nature;
            documentmodel.PONo = journal.PoNo;
            documentmodel.IsRepeatingInvoice = journal.IsRepeatingInvoice;
            documentmodel.RepEveryPeriodNo = journal.RepEveryPeriodNo;
            documentmodel.RepEveryPeriod = journal.RepEveryPeriod;
            documentmodel.EndDate = journal.EndDate;
            documentmodel.EntityId = journal.EntityId;
            documentmodel.DueDate = journal.DueDate;
            documentmodel.SystemRefNo = journal.SystemReferenceNo;
            documentmodel.DocSubType = journal.DocSubType;
            //documentmodel.IsNoSupportingDocs = _journalService.GetNosupporting(journal.CompanyId);
            //documentmodel.IsNoSupportingDocs = journal.IsNoSupportingDocs != null ? true : false;
            //documentmodel.IsAllowableNonAllowable = _journalService.Getallowablenonallowable(journal.CompanyId);
            //documentmodel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable != null ? true : false;
        }
        #endregion

        #region GetCashSaleJournal
        public DocumentModel GetCashSaleJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            if (journal != null)
            {
                FillDocumentJournal(documentmodel, journal, type);
                var cashAndBankAccount = _cashSaleService.GetCashSaleId(journal.DocumentId);
                //documentmodel.COAId = CashAndBankAccount.COAId;
                //documentmodel.ReceiptrefNo = CashAndBankAccount.ReceiptrefNo;
                //documentmodel.ModeOfReceipt = CashAndBankAccount.ModeOfReceipt;
                ChartOfAccount coa = _chartOfAccountService.GetChartOfAccountById(cashAndBankAccount.COAId);
                //documentmodel.CashAndBankAccount = coa != null ? (coa.Name + (coa.Currency != null ? "(" + coa.Currency + ")" : "(" + journal.ExCurrency + ")")) : null;
                documentmodel.CompanyId = companyId;
                documentmodel.CashAndBankAccount = coa.Name;
                documentmodel.ModeOfReceipt = cashAndBankAccount.ModeOfReceipt;
                documentmodel.ReceiptrefNo = cashAndBankAccount.ReceiptrefNo;
                if (type == DocTypeConstants.CashSale)
                {
                    var cashsale = _cashSaleService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (cashsale != null)
                    {
                        documentmodel.DocState = cashsale.DocumentState;
                        documentmodel.ReceiptrefNo = cashsale.ReceiptrefNo;
                    }
                }
                DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                var alllstjds = type == DocTypeConstants.DoubtFulDebitNote ? _journalDetailService.GetAllJournalDetailsByid(journal.Id) : _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                if (alllstjds.Any())
                {
                    var lstjds = alllstjds.Where(x => x.DocumentDetailId != new Guid("00000000-0000-0000-0000-000000000000") && x.IsTax != true).ToList();
                    foreach (var jd in lstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        FillDocumentDetail(documentDetail, jd, false, journal.DocSubType == "Application" ? true : false, documentmodel.IsInterCompanyActive, journal.ExchangeRate);
                        if (documentDetail.DocType == DocTypeConstants.CashSale)
                            documentDetail.AccountDescription = journal.DocumentDescription;
                        lstDocumentDetail.Add(documentDetail);
                    }
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();

                    var mjd = alllstjds.Where(x => x.DocumentDetailId == new Guid("00000000-0000-0000-0000-000000000000")).FirstOrDefault();

                    List<TaxDetailsModel> lstTax = new List<TaxDetailsModel>();
                    documentmodel.DocumentDetailModels = documentmodel.DocumentDetailModels.Where(c => c.TaxCode != null).OrderBy(d => d.RecOrder).ToList();
                    var journalDetailsModel1 = documentmodel.DocumentDetailModels.GroupBy(c => c.TaxCode).ToList();
                    var journalDetailsModel2 = documentmodel.DocumentDetailModels;
                    foreach (var grouptax in journalDetailsModel1)
                    {
                        TaxDetailsModel Tax = new TaxDetailsModel();
                        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                        var _tax = _taxCodeService.GetTaxById(taxId);
                        if (_tax != null)
                        {
                            Tax.TaxCode = _tax.Code;
                            Tax.TaxName = _tax.Name;
                            Tax.TaxRate = _tax.TaxRate;
                            Tax.TaxType = _tax.TaxType;
                        }
                        Tax.TaxDocCredit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
                        Tax.TaxDocCredit = Tax.TaxDocCredit != 0 ? Tax.TaxDocCredit : null;
                        Tax.TaxBaseCredit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxCredit)), 2);
                        Tax.TaxBaseCredit = Tax.TaxBaseCredit != 0 ? Tax.TaxBaseCredit : null;
                        Tax.TaxDocDebit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2);
                        Tax.TaxDocDebit = Tax.TaxDocDebit != 0 ? Tax.TaxDocDebit : null;
                        Tax.TaxBaseDebit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxDebit)), 2);
                        Tax.TaxBaseDebit = Tax.TaxBaseDebit != 0 ? Tax.TaxBaseDebit : null;
                        lstTax.Add(Tax);
                    }
                    documentmodel.TaxDetails = lstTax;
                    if (documentmodel.TaxDetails.Count > 0)
                    {
                        foreach (var tax in documentmodel.TaxDetails)
                        {
                            if (tax.TaxRate != 0 && tax.TaxRate != null)
                            {
                                int? rec = lstDocumentDetail.Max(c => c.RecOrder) == null ? 0 + 1 : lstDocumentDetail.Max(c => c.RecOrder) + 1;
                                DocumentDetailModel documentDetail = new DocumentDetailModel
                                {
                                    RecOrder = rec,
                                    //AccountName = tax.TaxName + " (" + tax.TaxCode + "-" + tax.TaxRate + "%" + ")",
                                    AccountName = COANameConstants.TaxPayableGST,
                                    DocDebit = tax.TaxDocDebit,
                                    DocCredit = tax.TaxDocCredit,
                                    BaseDebit = tax.TaxBaseDebit,
                                    BaseCredit = tax.TaxBaseCredit,
                                    TaxIdCode = tax.TaxCode != "NA" ? tax.TaxCode + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.TaxCode,
                                    ISDiSAllowShow = false
                                };
                                lstDocumentDetail.Add(documentDetail);
                            }
                        }
                        // documentmodel.DocumentDetailModels = lstDocumentDetail;
                    }
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocCredit)), 2);
                    jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandDocCreditTotal), 2);
                    jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit)), 2);
                    jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandBaseCreditTotal), 2);


                    jTaxDetailModel.GrandDocTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxDebit)), 2);
                    jTaxDetailModel.GrandDocTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxCredit)), 2);
                    jTaxDetailModel.GrandBaseTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxDebit)), 2);
                    jTaxDetailModel.GrandBaseTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxCredit)), 2);

                    documentmodel.JournalTaxDetailsModel = jTaxDetailModel;
                    ChartOfAccount account1 = _chartOfAccountService.GetChartOfAccountById(cashAndBankAccount.COAId);
                    if (account1 != null)
                    {
                        documentDetail1.AccountName = account1.Name;
                        documentDetail1.AccountDescription = journal.DocumentDescription;
                    }
                    documentDetail1.DocDebit = mjd.DocDebit;
                    documentDetail1.ISDiSAllowShow = false;
                    documentDetail1.BaseDebit = mjd.BaseDebit;
                    if (mjd.IsTax == false)
                        documentDetail1.TaxIdCode = "NA";
                    lstDocumentDetail.Add(documentDetail1);

                    List<JournalGSTTaxModel> lstGstTax = new List<JournalGSTTaxModel>();
                    JournalGSTModel jGst = new JournalGSTModel();
                    documentmodel.DocType = type;
                    //foreach (var grouptax in journalDetailsModel1)
                    //{
                    //    JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                    //    gstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                    //    long taxId = grouptax.Where(d => d.TaxCode != "NA").Select(c => c.TaxId).FirstOrDefault();
                    //    var tax = _taxCodeService.GetTaxById(taxId);
                    //    gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                    //    gstTax.Amount = Math.Round((decimal)(grouptax.Sum(c => c.DocCredit)), 2);
                    //    gstTax.Amount = Math.Round((decimal)(gstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                    //    gstTax.TaxAmount = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
                    //    gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                    //    gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                    //    lstGstTax.Add(gstTax);
                    //}

                    foreach (var grouptax in journalDetailsModel2)
                    {
                        JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                        gstTax.TaxCode = grouptax.TaxCode;
                        long taxId = grouptax.TaxId;

                        var tax = _taxCodeService.GetTaxById(taxId);
                        gstTax.TaxId = taxId;
                        gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                        gstTax.Amount = grouptax.DocCredit != null ? Math.Round((decimal)(grouptax.DocCredit), 2) : 0;
                        gstTax.Amount = Math.Round((decimal)(gstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                        gstTax.TaxAmount = grouptax.DocTaxCredit != null ? Math.Round((decimal)(grouptax.DocTaxCredit), 2) : 0;
                        gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                        gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                        lstGstTax.Add(gstTax);
                    }
                    List<JournalGSTTaxModel> lstGstTax1 = new List<JournalGSTTaxModel>();
                    if (lstGstTax.Any())
                    {

                        foreach (var group in lstGstTax.GroupBy(c => c.TaxCode))
                        {
                            JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                            gstTax.TaxCode = group.Select(c => c.TaxCode).FirstOrDefault();
                            long? taxId = group.Select(c => c.TaxId).FirstOrDefault();
                            var tax = _taxCodeService.GetTaxById(taxId);
                            gstTax.TaxIdCode = group.Select(c => c.TaxIdCode).FirstOrDefault();
                            //tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                            gstTax.Amount = Math.Round((decimal)(group.Sum(c => c.Amount)), 2);
                            gstTax.Amount = Math.Round((decimal)(gstTax.Amount), 2);
                            gstTax.TaxAmount = Math.Round((decimal)(group.Sum(c => c.TaxAmount)), 2);
                            gstTax.TaxAmount = gstTax.TaxAmount != 0 ? ((decimal?)Math.Round((decimal)(gstTax.TaxAmount), 2)) : 0;
                            gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                            lstGstTax1.Add(gstTax);
                        }
                    }
                    documentmodel.JournalGSTTaxModel = lstGstTax1;
                    jGst.GrandAmount = Math.Round((decimal)(lstGstTax1.Sum(c => c.Amount)), 2);
                    jGst.GrandTaxAmount = Math.Round((decimal)(lstGstTax1.Sum(c => c.TaxAmount)), 2);
                    jGst.GrandTotal = Math.Round((decimal)(lstGstTax1.Sum(c => c.TotalAmount)), 2);
                    documentmodel.JournalGSTDetailModel = jGst;

                    if (documentmodel.JournalTaxDetailsModel != null)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        documentDetail.AccountName = "Grand Total";
                        documentDetail.DocDebit = documentmodel.JournalTaxDetailsModel.GrandDocDebitTotal;
                        documentDetail.DocCredit = documentmodel.JournalTaxDetailsModel.GrandDocCreditTotal;
                        documentDetail.BaseDebit = documentmodel.JournalTaxDetailsModel.GrandBaseDebitTotal;
                        documentDetail.BaseCredit = documentmodel.JournalTaxDetailsModel.GrandBaseCreditTotal;
                        documentDetail.DocTaxCredit = documentmodel.JournalTaxDetailsModel.GrandDocTaxCreditTotal;
                        documentDetail.DocTaxDebit = documentmodel.JournalTaxDetailsModel.GrandDocTaxDebitTotal;
                        documentDetail.BaseTaxDebit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxDebitTotal;
                        documentDetail.BaseTaxCredit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxCreditTotal;
                        documentDetail.ISDiSAllowShow = false;
                        documentDetail.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                        lstDocumentDetail.Add(documentDetail);
                        documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(x => x.RecOrder).ToList();
                    }
                }
            }
            return documentmodel;
        }
        private void FillCashSaleDetail(DocumentDetailModel documentdetaiilmodel, JournalDetail jd, bool isTotal, bool isApplication)
        {
            var coa = _chartOfAccountService.GetChartOfAccountById(jd.COAId);
            if (coa != null)
            {
                documentdetaiilmodel.AccountName = coa.Name;
            }
            documentdetaiilmodel.Disallowable = jd.AllowDisAllow;
            if (jd.TaxId != null)
            {
                documentdetaiilmodel.TaxId = jd.TaxId.Value;
                var tax = _taxCodeService.GetTaxId(jd.TaxId);
                if (tax != null && tax.Code != "NA")
                {
                    documentdetaiilmodel.TaxCode = tax.Code;
                    documentdetaiilmodel.TaxType = tax.TaxType;
                    documentdetaiilmodel.TaxRate = tax.TaxRate;
                    //documentdetaiilmodel.TaxIdCode = tax.Code + "-" + tax.TaxRate + "%" + "(" + tax.TaxType[0] + ")";
                    documentdetaiilmodel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : null) + "(" + tax.TaxType[0] + ")" : tax.Code;
                }
                else
                    documentdetaiilmodel.TaxIdCode = "NA";
            }
            else
                documentdetaiilmodel.TaxIdCode = "NA";
            documentdetaiilmodel.ISDiSAllowShow = true;
            documentdetaiilmodel.Item = jd.ItemId;
            documentdetaiilmodel.ItemCode = jd.ItemCode;
            documentdetaiilmodel.ItemDescription = jd.ItemDescription;
            documentdetaiilmodel.Qty = jd.Qty;
            documentdetaiilmodel.Unit = jd.Unit;
            documentdetaiilmodel.UnitPrice = jd.UnitPrice;
            documentdetaiilmodel.RecOrder = jd.RecOrder;
            documentdetaiilmodel.DocDebit = jd.DocDebit;
            documentdetaiilmodel.DocCredit = jd.DocCredit;
            documentdetaiilmodel.BaseDebit = Math.Round((decimal)(jd.BaseDebit == null ? 0 : jd.BaseDebit), 2);
            documentdetaiilmodel.BaseCredit = Math.Round((decimal)(jd.BaseCredit == null ? 0 : jd.BaseCredit), 2);
            //}
        }

        #endregion

        #region BankTransfersJournal
        public BankTransferModel GetBankTransferJournal(Guid Id, string systemRefNo, long companyId, string type)
        {

            Journal journal = _journalService.Query(x => x.Id == Id && x.SystemReferenceNo == systemRefNo && x.CompanyId == companyId && x.DocType == type).Include(c => c.JournalDetails).Select().FirstOrDefault();
            BankTransferModel bankTransferModel = new BankTransferModel();
            bankTransferModel.Id = journal.Id;
            bankTransferModel.CompanyId = journal.CompanyId;
            bankTransferModel.DocNo = journal.DocNo;
            bankTransferModel.DocType = DocTypeConstants.BankTransfer;
            bankTransferModel.DocDescription = journal.DocumentDescription;
            bankTransferModel.SystemRefNo = journal.SystemReferenceNo;
            bankTransferModel.TransferDate = journal.PostingDate.Value;
            bankTransferModel.NoSupportingDocument = journal.NoSupportingDocument;
            bankTransferModel.IsNoSupportingDocument = journal.IsNoSupportingDocument;
            bankTransferModel.ExchangeRate = journal.ExchangeRate;
            bankTransferModel.ExCurrency = journal.ExCurrency;
            bankTransferModel.BankClearingDate = journal.ClearingDate;
            bankTransferModel.ModeOfTransfer = journal.ModeOfReceipt;
            var rerCompany = _companyService.GetById(journal.ServiceCompanyId);
            bankTransferModel.ServiceCompanyId = journal.ServiceCompanyId;
            bankTransferModel.ServiceCompanyName = rerCompany != null ? rerCompany.ShortName : string.Empty;
            bankTransferModel.TransferRefNo = journal.TransferRefNo;
            bankTransferModel.IsMultiCurrency = journal.IsMultiCurrency;
            bankTransferModel.ExDurationFrom = journal.ExDurationFrom;
            bankTransferModel.ExDurationTo = journal.ExDurationTo;
            bankTransferModel.DocumentState = (journal.ClearingStatus != null && journal.ClearingStatus != string.Empty) ? journal.ClearingStatus : journal.DocumentState;
            bankTransferModel.SystemRefNo = journal.SystemReferenceNo;
            bankTransferModel.DocumentId = journal.DocumentId;
            bankTransferModel.CreatedDate = journal.CreatedDate;
            bankTransferModel.UserCreated = journal.UserCreated;
            bankTransferModel.ModifiedBy = journal.ModifiedBy;
            bankTransferModel.ModifiedDate = journal.ModifiedDate;
            bankTransferModel.Type = journal.IsWithdrawal == true ? DocTypeConstants.Withdrawal : DocTypeConstants.Deposit;
            bankTransferModel.TransferFrom = "Transfer From (Withdrawal)";
            bankTransferModel.TransferTo = "Transfer To (Deposit)";
            var details = journal.JournalDetails.Where(c => c.Type == "Withdrawal").ToList();
            if (details.Count > 1)
            {
                decimal? baseAmount = details.Sum(c => c.BaseCredit);
                decimal? docAmount = details.Sum(c => c.DocCredit);
                if (baseAmount != null && docAmount != null)
                    bankTransferModel.WithdrawalExchangeRate = baseAmount / docAmount;
                if (bankTransferModel.WithdrawalExchangeRate != null || bankTransferModel.WithdrawalExchangeRate != 1)
                    bankTransferModel.WithdrawalExchangeRate = Math.Round((decimal)(bankTransferModel.WithdrawalExchangeRate), 10);
            }
            var details1 = journal.JournalDetails.Where(c => c.Type == "Deposit").ToList();
            if (details1.Count > 1)
            {
                decimal? baseAmount1 = details1.Sum(c => c.BaseCredit);
                decimal? docAmount1 = details1.Sum(c => c.DocCredit);
                if (baseAmount1 != null && docAmount1 != null)
                    bankTransferModel.DepositExchangeRate = baseAmount1 / docAmount1;
                if (bankTransferModel.DepositExchangeRate != null || bankTransferModel.DepositExchangeRate != 1)
                    bankTransferModel.DepositExchangeRate = Math.Round((decimal)(bankTransferModel.DepositExchangeRate), 10);
            }

            //bankTransferModel.COAId = journal.COAId.Value;
            //bankTransferModel.ServiceCompanyId = journal.ServiceCompanyId.Value;
            List<Journal> lstBTJournals = _journalService.GetListBydocumentId(journal.DocumentId, companyId);
            List<JVViewModel> lstViewModel = new List<JVViewModel>();
            if (lstBTJournals.Any())
            {
                foreach (var bt in lstBTJournals)
                {
                    JVViewModel model = new JVViewModel();
                    model.Id = bt.Id;
                    model.DocType = bt.DocType;
                    model.SystemReferenceNo = bt.SystemReferenceNo;
                    foreach (var btDetail in bt.JournalDetails)
                    {
                        model.Type = btDetail.Type;
                    }
                    lstViewModel.Add(model);
                }
                bankTransferModel.JVViewModels = lstViewModel;
            }

            //var bankTransfers = _bankTransferService.Query(r => r.Id == journal.DocumentId).Select().FirstOrDefault();
            //if (bankTransfers != null)
            //{
            //    bankTransferModel.DocumentState = bankTransfers.DocumentState;
            //    bankTransferModel.SystemRefNo = bankTransfers.SystemRefNo;
            //}
            var chart = _chartOfAccountService.GetByName(COANameConstants.Clearing, companyId);
            var lstJournal = _journalService.GetListBydocumentId(journal.DocumentId, companyId);
            var lstbakdetails = _journalDetailService.Query(e => e.JournalId == journal.Id).Select().ToList();
            JournalDetail withdrawal1 = lstbakdetails.Where(c => c.Type == "Withdrawal").FirstOrDefault();
            JournalDetail deposit1 = lstbakdetails.Where(c => c.Type == "Deposit").FirstOrDefault();
            if (withdrawal1 != null && deposit1 != null)
                bankTransferModel.WithdrawalExchangeRate = (withdrawal1.Currency == deposit1.Currency && withdrawal1.ServiceCompanyId == deposit1.ServiceCompanyId) ? journal.ExchangeRate : bankTransferModel.WithdrawalExchangeRate;
            if (withdrawal1 != null && deposit1 != null)
                bankTransferModel.DepositExchangeRate = (withdrawal1.Currency == deposit1.Currency && withdrawal1.ServiceCompanyId == deposit1.ServiceCompanyId) ? journal.ExchangeRate : bankTransferModel.DepositExchangeRate;
            if (lstJournal.Count > 1)
            {
                foreach (var item in lstJournal)
                {
                    decimal? withdrawal = item.JournalDetails.Where(c => c.Type == "Withdrawal").Sum(c => c.DocCredit);
                    decimal? deposit = item.JournalDetails.Where(c => c.Type == "Deposit").Sum(c => c.DocDebit);
                    foreach (var detail1 in item.JournalDetails)
                    {
                        if (detail1.Type == "Withdrawal" && detail1.COAId != chart.Id)
                        {
                            var coa = _chartOfAccountService.GetChartOfAccountById(item.COAId.Value);
                            var company = _companyService.GetById(item.ServiceCompanyId);
                            bankTransferModel.WithdrawalServiceCompanyName = company.ShortName;
                            // bankTransferModel.AccountName = coa != null ? coa.Name : string.Empty;
                            bankTransferModel.WithdrawalChartOfAccountName = coa != null ? coa.Name : string.Empty;
                            //bankTransferModel.WithdrawalCurrency = coa.Currency;
                            bankTransferModel.WithdrawalCurrency = coa.Currency == null ? ((coa.Name == COANameConstants.Petty_Cash || coa.Name == COANameConstants.Fixed_Deposit) && coa.Currency != null) ? coa.Currency : detail1.BaseCurrency : coa.Currency;
                            bankTransferModel.WithdrawalAmount = withdrawal;
                        }
                        if (detail1.Type == "Deposit" && detail1.COAId != chart.Id)
                        {
                            var company = _companyService.GetById(item.ServiceCompanyId.Value);
                            var coa = _chartOfAccountService.GetChartOfAccountById(item.COAId.Value);
                            bankTransferModel.DepositServiceCompanyName = company.ShortName;
                            // bankTransferModel.AccountName = chart.Id == coa.Id ? coa.Name + company.ShortName : coa.Name;
                            bankTransferModel.DepositChartOfAccountName = coa != null ? coa.Name : string.Empty;
                            //bankTransferModel.DepositCurrency = coa.Currency;
                            bankTransferModel.DepositCurrency = coa.Currency == null ? ((coa.Name == COANameConstants.Petty_Cash || coa.Name == COANameConstants.Fixed_Deposit) && coa.Currency != null) ? coa.Currency : detail1.BaseCurrency : coa.Currency;
                            bankTransferModel.DepositAmount = deposit;
                        }
                    }
                }
            }
            else
            {

                foreach (var detail in lstbakdetails)
                {
                    BankTransferDetailModel bankdetailmodel = new BankTransferDetailModel();
                    // bankdetailmodel.ServiceCompanyName = servicename.ShortName;
                    // var chartofaccountname = _journalDetailService.Query(b => b.COAId == bankdetailmodel.COAId).Select().FirstOrDefault();

                    if (detail.Type == "Withdrawal" /*&& detail.COAId != chart.Id*/)
                    {
                        var coa = _chartOfAccountService.GetChartOfAccountById(detail.COAId);
                        var company = _companyService.GetById(detail.ServiceCompanyId.Value);
                        bankTransferModel.WithdrawalServiceCompanyName = company.ShortName;
                        bankTransferModel.AccountName = chart.Id == coa.Id ? coa.Name + company.ShortName : coa.Name;
                        bankTransferModel.WithdrawalChartOfAccountName = chart.Id == coa.Id ? coa.Name + company.ShortName : coa.Name;
                        bankTransferModel.WithdrawalCurrency = detail.DocCurrency;
                        bankTransferModel.WithdrawalAmount = detail.DocCredit;
                    }
                    else if (detail.Type == "Deposit" /*&& detail.COAId != chart.Id*/)
                    {
                        var company = _companyService.GetById(detail.ServiceCompanyId.Value);
                        var coa = _chartOfAccountService.GetChartOfAccountById(detail.COAId);
                        bankTransferModel.DepositServiceCompanyName = company.ShortName;
                        bankTransferModel.AccountName = chart.Id == coa.Id ? coa.Name + company.ShortName : coa.Name;
                        bankTransferModel.DepositChartOfAccountName = chart.Id == coa.Id ? coa.Name + company.ShortName : coa.Name;
                        bankTransferModel.DepositCurrency = detail.DocCurrency;
                        bankTransferModel.DepositAmount = detail.DocDebit;
                    }
                }
            }
            // var company2= _companyService.GetById(lstbakdetails.q.Value);

            var servicecompany = _journalDetailService.Query(c => c.ServiceCompanyId == journal.ServiceCompanyId && c.Id == journal.Id).Select().FirstOrDefault();
            if (servicecompany != null)
                bankTransferModel.WithdrawalServiceCompanyName = servicecompany.AccountName;
            List<BankTransferDetailModel> lstbankdetail1 = new List<BankTransferDetailModel>();

            //var JournalDetails = _journalDetailService.Query(s => s.JournalId == Id).Select().ToList();
            foreach (var Detais in lstbakdetails)
            {
                BankTransferDetailModel detailModel = new BankTransferDetailModel();
                //if (Detais.Type == "Withdrwal")
                //{
                var coa = _chartOfAccountService.GetChartOfAccountById(Detais.COAId);

                detailModel.DocDescription = journal.DocumentDescription;
                detailModel.BaseCredit = Detais.BaseCredit;
                detailModel.BaseDebit = Detais.BaseDebit;
                detailModel.DocCredit = Detais.DocCredit;
                detailModel.DocDebit = Detais.DocDebit;
                detailModel.Type = Detais.Type;
                if (journal.ExCurrency == Detais.DocCurrency)
                {
                    bankTransferModel.ExDurationFrom = null;
                    bankTransferModel.ExDurationTo = null;
                }
                if (withdrawal1 != null && deposit1 != null)
                    bankTransferModel.ExchangeRate = (withdrawal1.Currency == deposit1.Currency && withdrawal1.ServiceCompanyId == deposit1.ServiceCompanyId) ? journal.ExchangeRate : Detais.ExchangeRate;
                else
                    bankTransferModel.ExchangeRate = Detais.ExchangeRate;
                detailModel.BankClearingDate = Detais.ClearingDate;
                bankTransferModel.ExchangeRate = Detais.ExchangeRate;
                detailModel.BankClearingDate = journal.ClearingDate;
                //if (lstJournal.Count > 1)
                //{

                //}
                if (Detais.Type == "Withdrawal")
                {
                    bankTransferModel.WithdrawalClearingDate = journal.ClearingDate;
                    detailModel.AccountName = (coa.Name == "Clearing" && bankTransferModel.WithdrawalServiceCompanyName != bankTransferModel.DepositServiceCompanyName) ? coa.Name + "-" + bankTransferModel.WithdrawalServiceCompanyName : (coa.Name == "Clearing" && bankTransferModel.WithdrawalServiceCompanyName == bankTransferModel.DepositServiceCompanyName) ? coa.Name + "-" + DocTypeConstants.BankTransfer : coa.Name;
                }
                if (Detais.Type == "Deposit")
                {
                    bankTransferModel.DepositClearingDate = journal.ClearingDate;
                    detailModel.AccountName = (coa.Name == "Clearing" && bankTransferModel.WithdrawalServiceCompanyName != bankTransferModel.DepositServiceCompanyName) ? coa.Name + "-" + bankTransferModel.DepositServiceCompanyName : (coa.Name == "Clearing" && bankTransferModel.WithdrawalServiceCompanyName == bankTransferModel.DepositServiceCompanyName) ? coa.Name + "-" + DocTypeConstants.BankTransfer : coa.Name;
                }
                detailModel.RecOrder = Detais.RecOrder;
                //detailModel.GrandBaseCredit = Detais.BaseCredit;
                //detailModel.GrandBaseDebit = Detais.BaseDebit;
                //detailModel.GrandDocCredit = Detais.DocCredit;
                //detailModel.GrandDocDebit = Detais.DocDebit;
                // }
                lstbankdetail1.Add(detailModel);
            }
            bankTransferModel.BankTransferDetailModels = lstbankdetail1;
            //List<BankTransferDetailModel> lstjournaldetail = new List<BankTransferDetailModel>();
            BankTransferDetailModel journalDetailModel = new BankTransferDetailModel();
            if (lstbankdetail1.Count > 2)
            {
                journalDetailModel.BaseCredit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Withdrawal").Sum(c => c.BaseCredit), 2);
                journalDetailModel.BaseDebit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Withdrawal").Sum(c => c.BaseDebit), 2);
                journalDetailModel.DocCredit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Withdrawal").Sum(c => c.DocCredit), 2);
                journalDetailModel.DocDebit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Withdrawal").Sum(c => c.DocDebit), 2);
                journalDetailModel.Type = "Withdrawal";
                journalDetailModel.AccountName = "Grand Total";
                //journalDetailModel.TransferFrom = "Transfer From (Withdrawal)";
                //journalDetailModel.TransferTo = "Transfer To (Deposit)";
                //journalDetailModel.RecOrder = lstbankdetail1.Max(c => c.RecOrder) + 1;
                lstbankdetail1.Add(journalDetailModel);
                bankTransferModel.BankTransferDetailModels = lstbankdetail1;
                journalDetailModel = new BankTransferDetailModel();
                journalDetailModel.BaseCredit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Deposit").Sum(c => c.BaseCredit), 2);
                journalDetailModel.BaseDebit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Deposit").Sum(c => c.BaseDebit), 2);
                journalDetailModel.DocCredit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Deposit").Sum(c => c.DocCredit), 2);
                journalDetailModel.DocDebit = Math.Round((decimal)lstbankdetail1.Where(c => c.Type == "Deposit").Sum(c => c.DocDebit), 2);
                journalDetailModel.Type = "Deposit";
                journalDetailModel.AccountName = "Grand Total";
                //journalDetailModel.TransferFrom = "Transfer From (Withdrawal)";
                //journalDetailModel.TransferTo = "Transfer To (Deposit)";
                journalDetailModel.RecOrder = lstbankdetail1.Max(c => c.RecOrder) + 1;
                lstbankdetail1.Add(journalDetailModel);
                bankTransferModel.BankTransferDetailModels = lstbankdetail1.OrderBy(x => x.RecOrder).ToList();
            }
            else
            {
                journalDetailModel.BaseCredit = Math.Round((decimal)lstbankdetail1.Sum(c => c.BaseCredit), 2);
                journalDetailModel.BaseDebit = Math.Round((decimal)lstbankdetail1.Sum(c => c.BaseDebit), 2);
                journalDetailModel.DocCredit = Math.Round((decimal)lstbankdetail1.Sum(c => c.DocCredit), 2);
                journalDetailModel.DocDebit = Math.Round((decimal)lstbankdetail1.Sum(c => c.DocDebit), 2);
                journalDetailModel.Type = "Deposit";
                journalDetailModel.AccountName = "Grand Total";
                journalDetailModel.RecOrder = lstbankdetail1.Max(c => c.RecOrder) + 1;
                lstbankdetail1.Add(journalDetailModel);
                bankTransferModel.BankTransferDetailModels = lstbankdetail1.OrderBy(x => x.RecOrder).ToList();
            }
            return bankTransferModel;
        }
        #endregion

        #region GetWithdrawal & Deposit Journal
        public DocumentModel GetWithdrawalJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            if (journal != null)
            {
                FillDocumentJournal(documentmodel, journal, type);
                if (type == DocTypeConstants.Withdrawal || type == DocTypeConstants.Deposit || type == DocTypeConstants.CashPayment)
                {
                    Withdrawal withdrawal = _withdrawalService.GetWithdrawal(journal.DocumentId, journal.CompanyId, type);
                    if (withdrawal != null)
                        documentmodel.DocState = withdrawal.DocumentState;
                }
                DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                List<JournalDetail> alllstjds = new List<JournalDetail>();
                alllstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                //DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                if (alllstjds.Any())
                {
                    var lstjds = alllstjds.Where(x => x.DocumentDetailId != new Guid("00000000-0000-0000-0000-000000000000") && x.IsTax != true).ToList();
                    foreach (var jd in lstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        FillDocumentDetail(documentDetail, jd, false, journal.DocSubType == "Application" ? true : false, documentmodel.IsInterCompanyActive, journal.ExchangeRate);
                        lstDocumentDetail.Add(documentDetail);
                    }
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();

                    var mjd = alllstjds.Where(x => x.DocumentDetailId == new Guid("00000000-0000-0000-0000-000000000000")).FirstOrDefault();
                    List<TaxDetailsModel> lstTax = new List<TaxDetailsModel>();
                    documentmodel.DocumentDetailModels = documentmodel.DocumentDetailModels.Where(c => c.TaxCode != null).OrderBy(x => x.RecOrder).ToList();
                    var JournalDetailsModel1 = documentmodel.DocumentDetailModels.GroupBy(c => c.TaxCode).ToList();
                    var journalDetailModel2 = documentmodel.DocumentDetailModels;
                    foreach (var grouptax in JournalDetailsModel1)
                    {
                        TaxDetailsModel Tax = new TaxDetailsModel();
                        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                        var _tax = _taxCodeService.GetTaxById(taxId);
                        if (_tax != null)
                        {
                            Tax.TaxCode = _tax.Code;
                            Tax.TaxName = _tax.Name;
                            Tax.TaxRate = _tax.TaxRate;
                            Tax.TaxType = _tax.TaxType;
                        }
                        Tax.TaxDocCredit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
                        Tax.TaxDocCredit = Tax.TaxDocCredit != 0 ? Tax.TaxDocCredit : null;
                        Tax.TaxBaseCredit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxCredit)), 2);
                        Tax.TaxBaseCredit = Tax.TaxBaseCredit != 0 ? Tax.TaxBaseCredit : null;
                        Tax.TaxDocDebit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2);
                        Tax.TaxDocDebit = Tax.TaxDocDebit != 0 ? Tax.TaxDocDebit : null;
                        Tax.TaxBaseDebit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxDebit)), 2);
                        Tax.TaxBaseDebit = Tax.TaxBaseDebit != 0 ? Tax.TaxBaseDebit : null;
                        lstTax.Add(Tax);
                    }
                    documentmodel.TaxDetails = lstTax;
                    var withdrawal = _withdrawalService.GetById(journal.DocumentId);
                    if (documentmodel.TaxDetails.Count > 0)
                    {
                        foreach (var tax in documentmodel.TaxDetails)
                        {
                            if (tax.TaxRate != 0 && tax.TaxRate != null)
                            {
                                int? rec = lstDocumentDetail.Max(c => c.RecOrder) == null ? 0 + 1 : lstDocumentDetail.Max(c => c.RecOrder) + 1;
                                DocumentDetailModel documentDetail = new DocumentDetailModel
                                {
                                    RecOrder = rec,
                                    //AccountName = tax.TaxName + " (" + tax.TaxCode + "-" + tax.TaxRate + "%" + ")",
                                    AccountName = COANameConstants.TaxPayableGST,
                                    DocDebit = tax.TaxDocDebit,
                                    DocCredit = tax.TaxDocCredit,
                                    BaseDebit = tax.TaxBaseDebit,
                                    BaseCredit = tax.TaxBaseCredit,
                                    AccountDescription = withdrawal.DocDescription,
                                    TaxIdCode = tax.TaxCode != "NA" ? tax.TaxCode + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.TaxCode,
                                    ISDiSAllowShow = false
                                };
                                lstDocumentDetail.Add(documentDetail);
                            }
                        }
                        documentmodel.DocumentDetailModels = lstDocumentDetail;
                    }
                    ChartOfAccount coa = _chartOfAccountService.GetChartOfAccountById(withdrawal.COAId);
                    if (coa != null)
                    {
                        documentDetail1.AccountName = coa.Name;
                        documentDetail1.AccountDescription = withdrawal.DocDescription;
                    }
                    documentDetail1.DocDebit = mjd.DocDebit;
                    documentDetail1.DocCredit = mjd.DocCredit;
                    documentDetail1.ISDiSAllowShow = false;
                    documentDetail1.BaseDebit = mjd.BaseDebit;
                    documentDetail1.BaseCredit = mjd.BaseCredit;
                    //if (mjd.SegmentDetailid1 != null)
                    //{
                    //    var segmnet1 = _segmentDetailService.GetSegmentById(mjd.SegmentDetailid1.Value);
                    //    documentDetail1.SegmentDetailidName1 = segmnet1.Name;
                    //}
                    //if (mjd.SegmentMasterid1 != null)
                    //{
                    //    var segment2 = _segmentDetailService.GetSegmentById(mjd.SegmentMasterid1.Value);
                    //    documentDetail1.SegmentMasteridName1 = segment2.Name;
                    //}
                    if (mjd.IsTax == false)
                        documentDetail1.TaxIdCode = "NA";
                    lstDocumentDetail.Add(documentDetail1);
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    if (type == DocTypeConstants.CashPayment)
                    {
                        jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocDebit)), 2);
                        jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(jTaxDetailModel.GrandDocDebitTotal), 2);
                        jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit)), 2);
                        jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit)), 2);
                    }
                    else
                    {

                        jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocCredit)), 2);
                        jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandDocCreditTotal), 2);
                        jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit)), 2);
                        //  jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandBaseCreditTotal), 2);
                        jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit)), 2);
                    }
                    jTaxDetailModel.GrandDocTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxDebit)), 2);
                    jTaxDetailModel.GrandDocTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxCredit)), 2);
                    jTaxDetailModel.GrandBaseTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxDebit)), 2);
                    jTaxDetailModel.GrandBaseTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxCredit)), 2);
                    documentmodel.JournalTaxDetailsModel = jTaxDetailModel;

                    List<JournalGSTTaxModel> lstGstTax = new List<JournalGSTTaxModel>();
                    JournalGSTModel jGst = new JournalGSTModel();
                    documentmodel.DocType = type;
                    //foreach (var grouptax in JournalDetailsModel1)
                    //{
                    //    if (type == DocTypeConstants.Withdrawal || type == DocTypeConstants.CashPayment)
                    //    {
                    //        JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                    //        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                    //        var tax = _taxCodeService.GetTaxById(taxId);
                    //        GstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                    //        GstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                    //        GstTax.Amount = Math.Round((decimal)(grouptax.Sum(c => c.DocDebit)), 2);
                    //        GstTax.TaxAmount = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2);
                    //        if (GstTax.Amount == 0)
                    //        {
                    //            GstTax.Amount = -Math.Abs(Math.Round((decimal)(grouptax.Sum(c => c.DocCredit)), 2));
                    //            GstTax.TaxAmount = -Math.Abs(Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2));
                    //        }
                    //        GstTax.Amount =
                    //            Math.Round(
                    //                (decimal)
                    //                (GstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);
                    //        GstTax.TaxAmount =
                    //            Math.Round(
                    //                (decimal)
                    //                (GstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)),
                    //                2);
                    //        GstTax.TotalAmount = Math.Round((decimal)(GstTax.Amount + GstTax.TaxAmount), 2);
                    //        lstGstTax.Add(GstTax);
                    //    }
                    //    else
                    //    {
                    //        JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                    //        GstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                    //        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                    //        var tax = _taxCodeService.GetTaxById(taxId);
                    //        GstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                    //        GstTax.Amount = Math.Round((decimal)(grouptax.Sum(c => c.DocCredit)), 2);
                    //        GstTax.TaxAmount = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
                    //        if (GstTax.Amount == 0)
                    //        {
                    //            GstTax.Amount = -Math.Abs(Math.Round((decimal)(grouptax.Sum(c => c.DocDebit)), 2));
                    //            GstTax.TaxAmount = -Math.Abs(Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2));
                    //        }
                    //        GstTax.Amount =
                    //            Math.Round(
                    //                (decimal)
                    //                (GstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2);

                    //        GstTax.TaxAmount =
                    //            Math.Round(
                    //                (decimal)
                    //                (GstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)),
                    //                2);
                    //        GstTax.TotalAmount = Math.Round((decimal)(GstTax.Amount + GstTax.TaxAmount), 2);
                    //        lstGstTax.Add(GstTax);
                    //    }
                    //}

                    foreach (var grouptax in journalDetailModel2)
                    {
                        if (type == DocTypeConstants.Withdrawal || type == DocTypeConstants.CashPayment)
                        {
                            JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                            long taxId = grouptax.TaxId;
                            var tax = _taxCodeService.GetTaxById(taxId);
                            GstTax.TaxId = taxId;
                            GstTax.TaxCode = grouptax.TaxCode;
                            GstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                            GstTax.Amount = grouptax.DocDebit != null ? Math.Round((decimal)(grouptax.DocDebit), 2) : 0;
                            GstTax.TaxAmount = grouptax.DocTaxDebit != null ? Math.Round((decimal)(grouptax.DocTaxDebit), 2) : 0;
                            if (GstTax.Amount == 0)
                            {
                                GstTax.Amount = grouptax.DocCredit != null ? -Math.Abs(Math.Round((decimal)(grouptax.DocCredit), 2)) : 0;
                                GstTax.TaxAmount = grouptax.DocTaxCredit != null ? -Math.Abs(Math.Round((decimal)(grouptax.DocTaxCredit), 2)) : 0;
                            }
                            GstTax.Amount =
                                Math.Round(
                                    (decimal)
                                    (GstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);
                            GstTax.TaxAmount =
                                Math.Round(
                                    (decimal)
                                    (GstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)),
                                    2, MidpointRounding.AwayFromZero);
                            GstTax.TotalAmount = Math.Round((decimal)(GstTax.Amount + GstTax.TaxAmount), 2);
                            lstGstTax.Add(GstTax);
                        }
                        else
                        {
                            JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                            GstTax.TaxCode = grouptax.TaxCode;
                            long taxId = grouptax.TaxId;
                            var tax = _taxCodeService.GetTaxById(taxId);
                            GstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                            GstTax.Amount = grouptax.DocCredit != null ? Math.Round((decimal)(grouptax.DocCredit), 2) : 0;
                            GstTax.TaxAmount = grouptax.DocTaxCredit != null ? Math.Round((decimal)(grouptax.DocTaxCredit), 2) : 0;
                            if (GstTax.Amount == 0)
                            {
                                GstTax.Amount = grouptax.DocDebit != null ? -Math.Abs(Math.Round((decimal)(grouptax.DocDebit), 2)) : 0;
                                GstTax.TaxAmount = grouptax.DocTaxDebit != null ? -Math.Abs(Math.Round((decimal)(grouptax.DocTaxDebit), 2)) : 0;
                            }
                            GstTax.Amount =
                                Math.Round(
                                    (decimal)
                                    (GstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)), 2, MidpointRounding.AwayFromZero);

                            GstTax.TaxAmount =
                                Math.Round(
                                    (decimal)
                                    (GstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate)),
                                    2, MidpointRounding.AwayFromZero);
                            GstTax.TotalAmount = Math.Round((decimal)(GstTax.Amount + GstTax.TaxAmount), 2);
                            lstGstTax.Add(GstTax);
                        }
                    }
                    List<JournalGSTTaxModel> lstGstTax1 = new List<JournalGSTTaxModel>();
                    if (lstGstTax.Any())
                    {

                        foreach (var group in lstGstTax.GroupBy(c => c.TaxCode))
                        {
                            JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                            gstTax.TaxCode = group.Select(c => c.TaxCode).FirstOrDefault();
                            long? taxId = group.Select(c => c.TaxId).FirstOrDefault();
                            var tax = _taxCodeService.GetTaxById(taxId);
                            gstTax.TaxIdCode = group.Select(c => c.TaxIdCode).FirstOrDefault();
                            //tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                            gstTax.Amount = Math.Round((decimal)(group.Sum(c => c.Amount)), 2);
                            gstTax.Amount = Math.Round((decimal)(gstTax.Amount), 2);
                            gstTax.TaxAmount = Math.Round((decimal)(group.Sum(c => c.TaxAmount)), 2);
                            gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount), 2);
                            gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                            lstGstTax1.Add(gstTax);
                        }
                    }
                    documentmodel.JournalGSTTaxModel = lstGstTax1;
                    jGst.GrandAmount = Math.Round((decimal)(lstGstTax1.Sum(c => c.Amount)), 2);
                    jGst.GrandTaxAmount = Math.Round((decimal)(lstGstTax1.Sum(c => c.TaxAmount)), 2);
                    jGst.GrandTotal = Math.Round((decimal)(lstGstTax1.Sum(c => c.TotalAmount)), 2);
                    documentmodel.JournalGSTDetailModel = jGst;

                    if (documentmodel.JournalTaxDetailsModel != null)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        documentDetail.AccountName = "Grand Total";
                        documentDetail.DocDebit = documentmodel.JournalTaxDetailsModel.GrandDocDebitTotal;
                        documentDetail.DocCredit = documentmodel.JournalTaxDetailsModel.GrandDocCreditTotal;
                        documentDetail.BaseDebit = documentmodel.JournalTaxDetailsModel.GrandBaseDebitTotal;
                        documentDetail.BaseCredit = documentmodel.JournalTaxDetailsModel.GrandBaseCreditTotal;
                        documentDetail.DocTaxCredit = documentmodel.JournalTaxDetailsModel.GrandDocTaxCreditTotal;
                        documentDetail.DocTaxDebit = documentmodel.JournalTaxDetailsModel.GrandDocTaxDebitTotal;
                        documentDetail.BaseTaxDebit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxDebitTotal;
                        documentDetail.BaseTaxCredit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxCreditTotal;
                        documentDetail.ISDiSAllowShow = false;
                        documentDetail.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                        lstDocumentDetail.Add(documentDetail);
                        documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(x => x.RecOrder).ToList();
                    }
                }
            }
            return documentmodel;
        }
        #endregion

        //#region GetPaymentJournal
        //public DocumentModel GetPaymentJournal(Guid id, string systemRefNo, long companyId, string type)
        //{
        //    Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
        //    DocumentModel documentmodel = new DocumentModel();
        //    if (journal != null)
        //    {
        //        FillDocumentJournal(documentmodel, journal, type);
        //        if (type == DocTypeConstants.Bill)
        //        {
        //            var bill = _billService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
        //            if (bill != null)
        //            {
        //                documentmodel.DocState = bill.DocumentState;
        //                //documentmodel.PONo = invoice.PONo;
        //                documentmodel.DocDescription = bill.Remarks;
        //            }
        //        }
        //        int? recOrder = 0;
        //        DocumentDetailModel documentDetail1 = new DocumentDetailModel();
        //        List<JournalDetail> alllstjds = new List<JournalDetail>();
        //        alllstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
        //        List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
        //        //DocumentDetailModel documentDetail1 = new DocumentDetailModel();
        //        if (alllstjds.Any())
        //        {
        //            var lstjds = alllstjds.Where(x => x.DocumentDetailId != new Guid("00000000-0000-0000-0000-000000000000") && x.IsTax != true).ToList();
        //            foreach (var jd in lstjds)
        //            {
        //                DocumentDetailModel documentDetail = new DocumentDetailModel();
        //                fillDocumentDetail(documentDetail, jd, false, journal.DocSubType == "Application" ? true : false);
        //                lstDocumentDetail.Add(documentDetail);
        //            }
        //            documentmodel.DocumentDetailModels = lstDocumentDetail;
        //            JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();

        //            var mjd = alllstjds.Where(x => x.DocumentDetailId == new Guid("00000000-0000-0000-0000-000000000000")).FirstOrDefault();


        //                List<TaxDetailsModel> lstTax = new List<TaxDetailsModel>();

        //                var JournalDetailsModel1 = documentmodel.DocumentDetailModels.GroupBy(c => c.TaxCode).ToList();
        //                foreach (var grouptax in JournalDetailsModel1)
        //                {
        //                    TaxDetailsModel Tax = new TaxDetailsModel();
        //                    long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
        //                    var _tax = _taxCodeService.GetTaxById(taxId);
        //                    if (_tax != null)
        //                    {
        //                        Tax.TaxCode = _tax.Code;
        //                        Tax.TaxName = _tax.Name;
        //                        Tax.TaxRate = _tax.TaxRate;
        //                    }
        //                    Tax.TaxDocCredit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
        //                    Tax.TaxBaseCredit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxCredit)), 2);
        //                    Tax.TaxDocDebit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxDebit)), 2);
        //                    Tax.TaxBaseDebit = Math.Round((decimal)(grouptax.Sum(c => c.BaseTaxDebit)), 2);
        //                    lstTax.Add(Tax);
        //                }
        //                documentmodel.TaxDetails = lstTax;
        //                if (documentmodel.TaxDetails.Count > 0)
        //                {
        //                    foreach (var tax in documentmodel.TaxDetails)
        //                    {
        //                        List<int?> rec = lstDocumentDetail.Select(c => c.RecOrder).ToList();
        //                        recOrder = rec == null ? 0 : rec.Max();
        //                        DocumentDetailModel documentDetail = new DocumentDetailModel();
        //                        documentDetail.AccountName = tax.TaxName + " (" + tax.TaxCode + "-" + tax.TaxRate + "%" + ")";
        //                        documentDetail.DocDebit = tax.TaxDocDebit;
        //                        documentDetail.DocCredit = tax.TaxDocCredit;
        //                        documentDetail.BaseDebit = tax.TaxBaseDebit;
        //                        documentDetail.BaseCredit = tax.TaxBaseCredit;
        //                        lstDocumentDetail.Add(documentDetail);
        //                    }
        //                    documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).ToList();
        //                }
        //                ChartOfAccount account1 = _chartOfAccountService.GetByName(journal.Nature == "Trade" ? COANameConstants.AccountsReceivables : COANameConstants.OtherReceivables);
        //                if (account1 != null)
        //                {
        //                    documentDetail1.AccountName = account1.Name;
        //                }
        //                if (type == DocTypeConstants.Bill)
        //                {
        //                    documentDetail1.DocCredit = mjd.DocCredit;
        //                    documentDetail1.BaseCredit = mjd.BaseCredit;
        //                }
        //                else
        //                {
        //                    documentDetail1.DocDebit = mjd.DocDebit;
        //                    documentDetail1.BaseDebit = mjd.BaseDebit;
        //                }
        //                documentDetail1.RecOrder = mjd.RecOrder;
        //                lstDocumentDetail.Add(documentDetail1);
        //                documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).ToList(); ;
        //                jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocCredit)), 2);
        //                jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandDocCreditTotal), 2);
        //                jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit)), 2);
        //                jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(jTaxDetailModel.GrandBaseCreditTotal), 2);

        //                jTaxDetailModel.GrandDocTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxDebit)), 2);
        //                jTaxDetailModel.GrandDocTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.DocTaxCredit)), 2);
        //                jTaxDetailModel.GrandBaseTaxDebitTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxDebit)), 2);
        //                jTaxDetailModel.GrandBaseTaxCreditTotal = Math.Round((decimal)(documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxCredit)), 2);

        //                documentmodel.JournalTaxDetailsModel = jTaxDetailModel;

        //                List<JournalGSTTaxModel> lstGstTax = new List<JournalGSTTaxModel>();
        //                JournalGSTModel jGst = new JournalGSTModel();
        //                documentmodel.DocType = type;
        //                foreach (var grouptax in JournalDetailsModel1)
        //                {
        //                    JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
        //                    GstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
        //                    GstTax.Amount = Math.Round((decimal)(grouptax.Sum(c => c.DocCredit)), 2);
        //                    GstTax.Amount = Math.Round((decimal)(GstTax.Amount * journal.ExchangeRate), 2);
        //                    GstTax.TaxAmount = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
        //                    GstTax.TaxAmount = Math.Round((decimal)(GstTax.TaxAmount * journal.ExchangeRate), 2);
        //                    GstTax.TotalAmount = Math.Round((decimal)(GstTax.Amount + GstTax.TaxAmount), 2);
        //                    lstGstTax.Add(GstTax);
        //                }
        //                documentmodel.JournalGSTTaxModel = lstGstTax;
        //                jGst.GrandAmount = Math.Round((decimal)(lstGstTax.Sum(c => c.Amount)), 2);
        //                jGst.GrandTaxAmount = Math.Round((decimal)(lstGstTax.Sum(c => c.TaxAmount)), 2);
        //                jGst.GrandTotal = Math.Round((decimal)(lstGstTax.Sum(c => c.TotalAmount)), 2);
        //                documentmodel.JournalGSTDetailModel = jGst;
        //            }
        //            if (documentmodel.JournalTaxDetailsModel != null)
        //            {
        //                DocumentDetailModel documentDetail = new DocumentDetailModel();
        //                //documentDetail.AccountName = documentmodel.JournalTaxDetailsModel..TaxName;
        //                documentDetail.AccountName = "Grand Total";
        //                documentDetail.DocDebit = documentmodel.JournalTaxDetailsModel.GrandDocDebitTotal;
        //                documentDetail.DocCredit = documentmodel.JournalTaxDetailsModel.GrandDocCreditTotal;
        //                documentDetail.BaseDebit = documentmodel.JournalTaxDetailsModel.GrandBaseDebitTotal;
        //                documentDetail.BaseCredit = documentmodel.JournalTaxDetailsModel.GrandBaseCreditTotal;
        //                documentDetail.DocTaxCredit = documentmodel.JournalTaxDetailsModel.GrandDocTaxCreditTotal;
        //                documentDetail.DocTaxDebit = documentmodel.JournalTaxDetailsModel.GrandDocTaxDebitTotal;
        //                documentDetail.BaseTaxDebit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxDebitTotal;
        //                documentDetail.BaseTaxCredit = documentmodel.JournalTaxDetailsModel.GrandBaseTaxCreditTotal;
        //                lstDocumentDetail.Add(documentDetail);
        //                documentmodel.DocumentDetailModels = lstDocumentDetail;
        //            }
        //    }
        //    return documentmodel;
        //}
        //#endregion

        #region GetRecieptJournal
        public DocumentModel GetRecieptJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            if (journal != null)
            {
                FillRecieptJournal(documentmodel, journal);

                if (type == DocTypeConstants.Receipt)
                {
                    var invoice = _receiptService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (invoice != null)
                    {
                        documentmodel.DocState = invoice.DocumentState;
                        documentmodel.DocDescription = invoice.Remarks;
                        documentmodel.ModeOfReceipt = invoice.ModeOfReceipt;
                        documentmodel.ReceiptrefNo = invoice.ReceiptRefNo;
                    }
                }
                if (type == "Bill")
                {
                    var bill = _billService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (bill != null)
                    {
                        documentmodel.DocState = bill.DocumentState;
                        //documentmodel.PONo = invoice.PONo;
                        documentmodel.DocDescription = bill.Remarks;
                    }
                }
                //if (type == DocTypeConstants.DebitNote)
                //{
                //    var invoice = _debitNoteService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                //    if (invoice != null)
                //    {
                //        documentmodel.DocState = invoice.DocumentState;
                //        //documentmodel.PONo = invoice.PONo;
                //        documentmodel.DocDescription = invoice.Remarks;
                //    }
                //}
                DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                List<JournalDetail> alllstjds = new List<JournalDetail>();
                if (type == DocTypeConstants.Receipt)
                    alllstjds = _journalDetailService.GetAllJournalDetailsByid(journal.Id);
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                if (alllstjds.Any())
                {
                    var lstjds = alllstjds.Where(x => x.DocumentDetailId != new Guid("00000000-0000-0000-0000-000000000000") && x.IsTax != true).ToList();
                    foreach (var jd in lstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        fillRecieptDetail(documentDetail, jd, journal.ExchangeRate);
                        documentDetail.AccountDescription = documentmodel.DocDescription;
                        //if (documentDetail.AccountName == "Clearing - Receipts")
                        //    documentDetail.RecOrder = lstDocumentDetail.Max(x => x.RecOrder) + 1;
                        lstDocumentDetail.Add(documentDetail);
                    }
                    //ChartOfAccount account1 = _chartOfAccountService.GetByName("Rounding Account", companyId);
                    //if (account1 != null)
                    //{
                    //    var roundingAcount = alllstjds.Where(x => x.COAId == account1.Id).FirstOrDefault();
                    //    if (roundingAcount != null)
                    //    {
                    //        DocumentDetailModel documentDetail = new DocumentDetailModel();
                    //        documentDetail.BaseCredit = roundingAcount.BaseCredit;
                    //        documentDetail.BaseDebit = roundingAcount.BaseDebit;
                    //        documentDetail.RecOrder = roundingAcount.RecOrder;

                    //        documentDetail.AccountName = account1.Name;

                    //        //fillRecieptDetail(documentDetail, roundingAcount, journal.ExchangeRate);
                    //        //documentDetail.AccountDescription = documentmodel.DocDescription;
                    //        //if (documentDetail.AccountName == "Clearing - Receipts")
                    //        //    documentDetail.RecOrder = lstDocumentDetail.Max(x => x.RecOrder) + 1;
                    //        lstDocumentDetail.Add(documentDetail);
                    //    }
                    //}
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    var mjd = alllstjds.Where(x => x.DocumentDetailId == new Guid("00000000-0000-0000-0000-000000000000")).FirstOrDefault();
                    //List<InvoiceCreditNoteModel> lstInvCNModel = new List<InvoiceCreditNoteModel>();
                    //FillInvoiceCreditNoteModel(lstInvCNModel, journal.DocumentId);
                    //documentmodel.InvoiceCreditNoteModels = lstInvCNModel;
                    //List<InvoiceDoubtFulDebitModel> lstInvDDModel = new List<InvoiceDoubtFulDebitModel>();
                    //FillInvoiceDoubtFulDebitModel(lstInvDDModel, journal.DocumentId);
                    //documentmodel.InvoiceDoubtFulDebitModels = lstInvDDModel;
                    //if (documentmodel.InvoiceDoubtFulDebitModels.Any())
                    //{
                    //	documentmodel.DoubtfulDebitTotalAmount = documentmodel.InvoiceDoubtFulDebitModels.Sum(c => c.Amount);
                    //}

                    List<TaxDetailsModel> lstTax = new List<TaxDetailsModel>();
                    JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();
                    documentmodel.DocumentDetailModels = documentmodel.DocumentDetailModels.Where(c => c.TaxCode != null).ToList();
                    var JournalDetailsModel1 = documentmodel.DocumentDetailModels.GroupBy(c => c.TaxCode).ToList();
                    var journalDetailModel2 = documentmodel.DocumentDetailModels;
                    foreach (var grouptax in JournalDetailsModel1)
                    {
                        TaxDetailsModel Tax = new TaxDetailsModel();
                        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                        var _tax = _taxCodeService.GetTaxById(taxId);
                        if (_tax != null)
                        {
                            Tax.TaxCode = _tax.Code;
                            Tax.TaxName = _tax.Name;
                            Tax.TaxRate = _tax.TaxRate;
                            Tax.TaxType = _tax.TaxType;
                        }
                        Tax.TaxDocCredit = Math.Round((decimal)(grouptax.Sum(c => c.DocTaxCredit)), 2);
                        Tax.TaxDocCredit = Tax.TaxDocCredit != 0 ? Tax.TaxDocCredit : null;
                        Tax.TaxBaseCredit = Math.Round((decimal)grouptax.Sum(c => c.BaseTaxCredit), 2);
                        Tax.TaxBaseCredit = Tax.TaxBaseCredit != 0 ? Tax.TaxBaseCredit : null;
                        Tax.TaxDocDebit = Math.Round((decimal)grouptax.Sum(c => c.DocTaxDebit), 2);
                        Tax.TaxDocDebit = Tax.TaxDocDebit != 0 ? Tax.TaxDocDebit : null;
                        Tax.TaxBaseDebit = Math.Round((decimal)grouptax.Sum(c => c.BaseTaxDebit), 2);
                        Tax.TaxBaseDebit = Tax.TaxBaseDebit != 0 ? Tax.TaxBaseDebit : null;
                        lstTax.Add(Tax);
                    }
                    documentmodel.TaxDetails = lstTax;
                    if (documentmodel.TaxDetails.Count > 0)
                    {
                        foreach (var tax in documentmodel.TaxDetails)
                        {
                            if (tax.TaxRate != 0 && tax.TaxRate != null)
                            {
                                int? rec = lstDocumentDetail.Max(c => c.RecOrder) == null ? 0 + 1 : lstDocumentDetail.Max(c => c.RecOrder) + 1;
                                DocumentDetailModel documentDetail = new DocumentDetailModel
                                {
                                    RecOrder = rec,
                                    //AccountName = tax.TaxName + " (" + tax.TaxCode + "-" + tax.TaxRate + "%" + ")",
                                    AccountName = COANameConstants.TaxPayableGST,
                                    DocDebit = tax.TaxDocDebit,
                                    DocCredit = tax.TaxDocCredit,
                                    BaseDebit = tax.TaxBaseDebit,
                                    BaseCredit = tax.TaxBaseCredit,
                                    TaxIdCode = tax.TaxCode != "NA" ? tax.TaxCode + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.TaxCode,
                                    ISDiSAllowShow = false
                                };
                                lstDocumentDetail.Add(documentDetail);
                            }
                        }
                        documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).ToList();
                    }
                    //ChartOfAccount account1 = _chartOfAccountService.GetByName(journal.Nature == "Trade" ? COANameConstants.AccountsReceivables : COANameConstants.OtherReceivables, companyId);
                    //if (account1 != null)
                    //{
                    //    documentDetail1.AccountName = account1.Name;
                    //}
                    if (type == DocTypeConstants.Receipt && mjd != null)
                    {
                        var coa = _chartOfAccountService.GetChartOfAccountById(mjd.COAId);
                        if (coa != null)
                            documentDetail1.AccountName = coa.Name;
                        documentDetail1.AccountDescription = journal.Remarks;
                        documentDetail1.TaxIdCode = "NA";
                        documentDetail1.DocDebit = mjd.DocDebit != null ? ((decimal?)Math.Round((decimal)mjd.DocDebit, 2)) : null;
                        documentDetail1.BaseDebit = mjd.BaseDebit != null ? ((decimal?)Math.Round((decimal)mjd.BaseDebit, 2)) : null;
                        documentDetail1.DocCredit = mjd.DocCredit != null ? ((decimal?)Math.Round((decimal)mjd.DocCredit, 2)) : null;
                        documentDetail1.BaseCredit = mjd.BaseCredit != null ? ((decimal?)Math.Round((decimal)mjd.BaseCredit)) : null;
                    }
                    // documentDetail1.ISDiSAllowShow = false;
                    lstDocumentDetail.Add(documentDetail1);
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    //jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.DocDebit) + (decimal)lstTax.Sum(c => c.TaxDocDebit), 2);
                    //jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.DocCredit) + (decimal)lstTax.Sum(c => c.TaxDocCredit), 2);
                    jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.DocDebit), 2);
                    jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.DocCredit), 2);
                    //jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit) + (decimal)lstTax.Sum(c => c.TaxBaseDebit), 2);
                    //jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit) + (decimal)lstTax.Sum(c => c.TaxBaseCredit), 2);
                    jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit), 2);
                    jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit), 2);
                    jTaxDetailModel.GrandDocTaxDebitTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.DocTaxDebit), 2);
                    jTaxDetailModel.GrandDocTaxCreditTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.DocTaxCredit), 2);
                    jTaxDetailModel.GrandBaseTaxDebitTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxDebit), 2);
                    jTaxDetailModel.GrandBaseTaxCreditTotal = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseTaxCredit), 2);

                    documentmodel.JournalTaxDetailsModel = jTaxDetailModel;

                    List<JournalGSTTaxModel> lstGstTax = new List<JournalGSTTaxModel>();
                    JournalGSTModel jGst = new JournalGSTModel();
                    documentmodel.DocType = type;
                    foreach (var grouptax in journalDetailModel2)
                    {
                        JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                        long taxId = grouptax.TaxId;
                        var tax = _taxCodeService.GetTaxById(taxId);
                        gstTax.TaxId = taxId;
                        gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                        gstTax.TaxCode = grouptax.TaxCode;
                        gstTax.Amount = grouptax.DocDebit != null ? grouptax.DocDebit : 0;
                        gstTax.TaxAmount = grouptax.DocTaxDebit != null ? Math.Round((decimal)grouptax.DocTaxDebit, 2) : 0;
                        if (gstTax.Amount == 0)
                        {
                            gstTax.Amount = grouptax.DocCredit != null ? -Math.Abs(Math.Round((decimal)grouptax.DocCredit, 2)) : 0;
                            gstTax.TaxAmount = grouptax.DocTaxCredit != null ? -Math.Abs(Math.Round((decimal)grouptax.DocTaxCredit, 2)) : 0;
                        }
                        gstTax.Amount = Math.Round((decimal)gstTax.Amount * (decimal)(journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                        gstTax.TaxAmount = Math.Round((decimal)gstTax.TaxAmount * (decimal)(journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                        gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount) + (decimal)(gstTax.TaxAmount), 2);
                        lstGstTax.Add(gstTax);
                    }
                    List<JournalGSTTaxModel> lstGstTax1 = new List<JournalGSTTaxModel>();
                    if (lstGstTax.Any())
                    {

                        foreach (var group in lstGstTax.GroupBy(c => c.TaxCode))
                        {
                            JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                            gstTax.TaxCode = group.Select(c => c.TaxCode).FirstOrDefault();
                            long? taxId = group.Select(c => c.TaxId).FirstOrDefault();
                            var tax = _taxCodeService.GetTaxById(taxId);
                            gstTax.TaxIdCode = group.Select(c => c.TaxIdCode).FirstOrDefault();
                            //tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                            gstTax.Amount = Math.Round((decimal)(group.Sum(c => c.Amount)), 2);
                            gstTax.Amount = Math.Round((decimal)(gstTax.Amount), 2);
                            gstTax.TaxAmount = Math.Round((decimal)(group.Sum(c => c.TaxAmount)), 2);
                            gstTax.TaxAmount = Math.Round((decimal)(gstTax.TaxAmount), 2);
                            gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount + gstTax.TaxAmount), 2);
                            lstGstTax1.Add(gstTax);
                        }
                    }
                    //foreach (var grouptax in JournalDetailsModel1)
                    //{
                    //    if (type == DocTypeConstants.Bill)
                    //    {
                    //        JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                    //        GstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                    //        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                    //        var tax = _taxCodeService.GetTaxById(taxId);
                    //        GstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                    //        GstTax.Amount = grouptax.Sum(c => c.DocDebit);
                    //        GstTax.Amount = GstTax.Amount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate);
                    //        GstTax.TaxAmount = grouptax.Sum(c => c.DocTaxDebit);
                    //        GstTax.TaxAmount = GstTax.TaxAmount * (journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate);
                    //        GstTax.TotalAmount = GstTax.Amount + GstTax.TaxAmount;
                    //        lstGstTax.Add(GstTax);
                    //    }
                    //    else
                    //    {
                    //        JournalGSTTaxModel gstTax = new JournalGSTTaxModel();
                    //        long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                    //        var tax = _taxCodeService.GetTaxById(taxId);
                    //        gstTax.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                    //        gstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                    //        gstTax.Amount = grouptax.Sum(c => c.DocDebit);
                    //        gstTax.TaxAmount = Math.Round((decimal)grouptax.Sum(c => c.DocTaxDebit), 2);
                    //        if (gstTax.Amount == 0)
                    //        {
                    //            gstTax.Amount = -Math.Abs(Math.Round((decimal)grouptax.Sum(d => d.DocCredit), 2));
                    //            gstTax.TaxAmount = -Math.Abs(Math.Round((decimal)grouptax.Sum(d => d.DocTaxCredit), 2));
                    //        }
                    //        gstTax.Amount = Math.Round((decimal)gstTax.Amount * (decimal)(journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate), 2);
                    //        gstTax.TaxAmount = Math.Round((decimal)gstTax.TaxAmount * (decimal)(journal.GSTExchangeRate == null ? 1 : journal.GSTExchangeRate), 2);
                    //        gstTax.TotalAmount = Math.Round((decimal)(gstTax.Amount) + (decimal)(gstTax.TaxAmount), 2);
                    //        lstGstTax.Add(gstTax);
                    //    }
                    //}
                    documentmodel.JournalGSTTaxModel = lstGstTax1.OrderBy(c => c.TaxCode)/*.Where(d => d.TotalAmount > 0)*/.ToList();
                    jGst.GrandAmount = lstGstTax1/*.Where(x => x.TaxIdCode != "EP-NA(I)" && x.TaxIdCode != "EP-NA(O)")*/.Sum(c => c.Amount);
                    jGst.GrandTaxAmount = lstGstTax1.Sum(c => c.TaxAmount);
                    //jGst.GrandTotal = lstGstTax1.Where(x => x.TaxIdCode != "EP-NA(I)" && x.TaxIdCode != "EP-NA(O)").Sum(c => c.TotalAmount);
                    jGst.GrandTotal = lstGstTax1.Sum(c => c.TotalAmount);
                    documentmodel.JournalGSTDetailModel = jGst;
                }
                var detail = lstDocumentDetail.Where(c => c.AccountName == "Rounding Account").FirstOrDefault();
                lstDocumentDetail = lstDocumentDetail.Where(c => c.AccountName != "Rounding Account").ToList();
                if (detail != null)
                {
                    detail.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                    lstDocumentDetail.Add(detail);
                }
                if (documentmodel.JournalTaxDetailsModel != null)
                {
                    DocumentDetailModel documentDetail = new DocumentDetailModel();
                    //documentDetail.AccountName = documentmodel.JournalTaxDetailsModel..TaxName;
                    documentDetail.AccountName = "Grand Total";
                    documentDetail.DocDebit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandDocDebitTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.DocCredit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandDocCreditTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.BaseDebit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandBaseDebitTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.BaseCredit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandBaseCreditTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.DocTaxCredit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandDocTaxCreditTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.DocTaxDebit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandDocTaxDebitTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.BaseTaxDebit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandBaseTaxDebitTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.BaseTaxCredit = Math.Round((decimal)documentmodel.JournalTaxDetailsModel.GrandBaseTaxCreditTotal, 2, MidpointRounding.AwayFromZero);
                    documentDetail.ISDiSAllowShow = false;
                    documentDetail.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                    lstDocumentDetail.Add(documentDetail);
                    documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).ToList();
                }
                documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(x => x.RecOrder).Where(c => c.DocCredit > 0 || c.DocDebit > 0 || c.BaseDebit > 0 || c.BaseCredit > 0).ToList();
                var taxCodes = lstDocumentDetail.GroupBy(x => x.TaxIdCode).ToList();
                if (taxCodes.Any())
                    documentmodel.IsTaxEnable = taxCodes.Count == 1 ? false : true;
            }
            return documentmodel;
        }
        private void FillRecieptJournal(DocumentModel documentmodel, Journal journal)
        {
            documentmodel.DocumentId = journal.DocumentId;
            documentmodel.DocDate = journal.DocDate;
            documentmodel.DocNo = journal.DocNo;
            var company = _companyService.GetById(journal.ServiceCompanyId.Value);
            documentmodel.ServiceCompanyId = journal.ServiceCompanyId;
            documentmodel.ServiceCompanyName = company.ShortName;
            documentmodel.CompanyId = journal.CompanyId;
            documentmodel.NoSupportingDocument = journal.NoSupportingDocument;
            //documentmodel.IsNoSupportingDocs = _CompanySettingService.GetModuleStatus(ModuleNameConstants.NoSupportingDocuments, journal.CompanyId);
            documentmodel.IsNoSupportingDocs = journal.IsNoSupportingDocs;
            documentmodel.DocDescription = journal.DocumentDescription;
            documentmodel.DocCurrency = journal.DocCurrency;
            documentmodel.ExchangeRate = journal.ExchangeRate;
            documentmodel.GstExchangeRate = journal.GSTExchangeRate;
            documentmodel.BaseCurrency = journal.ExCurrency;
            documentmodel.GstReportingCurrency = journal.GSTExCurrency;
            documentmodel.ExDurationFrom = journal.ExDurationFrom;
            documentmodel.ExDurationTo = journal.ExDurationTo;
            documentmodel.GstdurationFrom = journal.GSTExDurationFrom;
            documentmodel.GstDurationTo = journal.GSTExDurationTo;
            documentmodel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            MultiCurrencySetting multi = _multiCurrencySettingService.GetByCompanyId(journal.CompanyId);
            documentmodel.IsMultiCurrency = multi != null;
            documentmodel.IsGstSettings = _gSTSettingService.IsGSTSettingActivated(journal.CompanyId);
            //documentmodel.SegmentCategory1 = journal.SegmentCategory1;
            //documentmodel.SegmentCategory2 = journal.SegmentCategory2;
            //documentmodel.SegmentName1 = journal.SegmentMasterid1 == null ? null : _segmentMasterService.GetSegmentName(journal.SegmentMasterid1.Value);
            //documentmodel.SegmentName2 = journal.SegmentMasterid2 == null ? null : _segmentMasterService.GetSegmentName(journal.SegmentMasterid2.Value);
            documentmodel.IsRecurringJournal = journal.IsRecurringJournal;
            documentmodel.RecurringJournalName = journal.RecurringJournalName;
            documentmodel.Frequency = journal.FrequencyType;
            documentmodel.FrequencyEndDate = journal.FrequencyEndDate;
            documentmodel.IsAutoReversalJournal = journal.IsAutoReversalJournal;
            documentmodel.ReversalDate = journal.ReversalDate;
            documentmodel.Remarks = journal.Remarks;
            documentmodel.BankClearingDate = journal.ClearingDate;
            documentmodel.ModeOfReceipt = journal.ModeOfReceipt;
            var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
            if (entity != null)
            {
                documentmodel.EntityName = entity.Name;
                documentmodel.EntityType = journal.EntityType;
            }
            ChartOfAccount coa = _chartOfAccountService.GetChartOfAccountById(journal.COAId.Value);
            documentmodel.ReceiptApplicationCurrency = coa != null ? coa.Name + "(" + coa.Currency + ")" : journal.ExCurrency;
            Receipt getReceipt = _receiptService.GetReciprDetail(journal.DocumentId);
            if (getReceipt != null)
            {
                ChartOfAccount cashBank = _chartOfAccountService.GetChartOfAccountById(getReceipt.COAId);
                documentmodel.CashAndBankAccount = cashBank != null ? cashBank.Name : string.Empty;
            }
            documentmodel.DueDate = journal.DueDate;
            var terms = _termsOfPaymentService.GetById(journal.CreditTermsId);
            if (terms != null)
                documentmodel.CreditTermsName = terms.Name;
            documentmodel.Nature = journal.Nature;
            documentmodel.PONo = journal.PoNo;
            documentmodel.IsRepeatingInvoice = journal.IsRepeatingInvoice;
            documentmodel.RepEveryPeriodNo = journal.RepEveryPeriodNo;
            documentmodel.RepEveryPeriod = journal.RepEveryPeriod;
            documentmodel.EndDate = journal.EndDate;
            documentmodel.DueDate = journal.DueDate;
            documentmodel.UserCreated = journal.UserCreated;
            documentmodel.CreatedDate = journal.CreatedDate;
            documentmodel.ModifiedBy = journal.ModifiedBy;
            documentmodel.ModifiedDate = journal.ModifiedDate;
        }
        private void fillRecieptDetail(DocumentDetailModel documentdetaiilmodel, JournalDetail jd, decimal? exchangeRate)
        {
            var exchangeRate1 = exchangeRate == null ? 1 : exchangeRate;
            var detailid = _receiptDetailService.GetReceiptDetail(jd.DocumentDetailId);
            documentdetaiilmodel.DetailId = detailid != null ? detailid.DocumentId : new Guid();
            var coa = _chartOfAccountService.GetChartOfAccountById(jd.COAId);
            var serviceCompany = _companyService.GetById(jd.ServiceCompanyId);
            if (coa != null)
            {
                documentdetaiilmodel.AccountName = coa.Name == "Clearing" ? coa.Name + " - Receipts" : coa.Name == "I/C" ? coa.Name + "-" + serviceCompany.ShortName : coa.Name;
            }
            documentdetaiilmodel.Disallowable = jd.AllowDisAllow;
            if (jd.TaxId != null)
            {
                documentdetaiilmodel.TaxId = jd.TaxId.Value;
                var tax = _taxCodeService.GetTaxById(jd.TaxId);
                if (tax != null && tax.Code != "NA")
                {
                    documentdetaiilmodel.TaxCode = tax.Code;
                    documentdetaiilmodel.TaxType = tax.TaxType;
                    documentdetaiilmodel.TaxRate = tax.TaxRate;
                    documentdetaiilmodel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : "NA") + "(" + tax.TaxType[0] + ")" : tax.Code;
                }
                else
                    documentdetaiilmodel.TaxIdCode = "NA";
            }
            else
                documentdetaiilmodel.TaxIdCode = "NA";
            documentdetaiilmodel.RecOrder = jd.RecOrder;
            documentdetaiilmodel.DocNo = jd.DocNo;
            documentdetaiilmodel.SystemRefNo = jd.SystemRefNo;
            documentdetaiilmodel.DocType = jd.DocType;
            documentdetaiilmodel.DocumentDate = jd.DocDate;
            documentdetaiilmodel.OffsetDocument = jd.OffsetDocument;
            documentdetaiilmodel.Item = jd.ItemId;
            documentdetaiilmodel.ItemCode = jd.ItemCode;
            documentdetaiilmodel.ItemDescription = jd.ItemDescription;
            documentdetaiilmodel.Qty = jd.Qty;
            documentdetaiilmodel.Unit = jd.Unit;
            documentdetaiilmodel.UnitPrice = jd.UnitPrice;
            documentdetaiilmodel.ISDiSAllowShow = coa != null ? coa.Category == "Income Statement" ? true : false : false;
            documentdetaiilmodel.DocDebit = jd.DocDebit != null ? ((decimal?)Math.Round((decimal)jd.DocDebit, 2)) : null;
            documentdetaiilmodel.DocCredit = jd.DocCredit != null ? ((decimal?)Math.Round((decimal)jd.DocCredit, 2)) : null;
            if (coa.Name == "Rounding Account")
            {
                documentdetaiilmodel.BaseDebit = jd.BaseDebit;
                documentdetaiilmodel.BaseCredit = jd.BaseCredit;
            }
            else
            {
                //documentdetaiilmodel.BaseDebit = jd.BaseDebit != null ? coa.Name == "Exchange Gain/Loss - Realised" ? Math.Round((decimal)jd.BaseDebit, 2) : ((decimal?)Math.Round((decimal)documentdetaiilmodel.DocDebit * (decimal)(jd.ExchangeRate == null ? 0 : jd.ExchangeRate), 2)) : null;
                //documentdetaiilmodel.BaseCredit = jd.BaseCredit != null ? coa.Name == "Exchange Gain/Loss - Realised" ? Math.Round((decimal)jd.BaseCredit, 2) : ((decimal?)Math.Round((decimal)documentdetaiilmodel.DocCredit * (decimal)(jd.ExchangeRate == null ? 0 : jd.ExchangeRate), 2)) : null;
                documentdetaiilmodel.BaseDebit = jd.BaseDebit != null ? ((decimal?)Math.Round((decimal)(jd.BaseDebit), 2, MidpointRounding.AwayFromZero)) : null;
                documentdetaiilmodel.BaseCredit = jd.BaseCredit != null ? ((decimal?)Math.Round((decimal)(jd.BaseCredit ?? 0), 2, MidpointRounding.AwayFromZero)) : null;
            }
            //documentdetaiilmodel.BaseDebit = coa.Name == "Exchange Gain/Loss - Realised" ? Math.Round((decimal)jd.BaseDebit, 2) : Math.Round((decimal)documentdetaiilmodel.DocDebit * (decimal)(jd.ExchangeRate == null ? 0 : jd.ExchangeRate), 2);
            //documentdetaiilmodel.BaseCredit = coa.Name == "Exchange Gain/Loss - Realised" ? Math.Round((decimal)jd.BaseCredit, 2) : Math.Round((decimal)documentdetaiilmodel.DocCredit * (decimal)(jd.ExchangeRate == null ? 0 : jd.ExchangeRate), 2);

            documentdetaiilmodel.DocTaxDebit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocDebit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocDebit) * Convert.ToDecimal(documentdetaiilmodel.TaxRate / 100)), 2, MidpointRounding.AwayFromZero)) : null : null;
            documentdetaiilmodel.BaseTaxDebit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocTaxDebit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocTaxDebit) * Convert.ToDecimal(exchangeRate1)), 2, MidpointRounding.AwayFromZero)) : null : null;
            documentdetaiilmodel.DocTaxCredit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocCredit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocCredit) * Convert.ToDecimal(documentdetaiilmodel.TaxRate / 100)), 2, MidpointRounding.AwayFromZero)) : null : null;
            documentdetaiilmodel.BaseTaxCredit = (documentdetaiilmodel.TaxRate != 0 && documentdetaiilmodel.TaxRate != null) ? documentdetaiilmodel.DocTaxCredit != null ? ((decimal?)Math.Round((decimal)((documentdetaiilmodel.DocTaxCredit) * Convert.ToDecimal(exchangeRate1)), 2, MidpointRounding.AwayFromZero)) : null : null;
        }

        #endregion

        #region doubtfuldebt
        public DocumentModel GetDoubtfuldebtJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            //Journal journal = _journalService.Query(a => a.CompanyId == companyId && a.Id == id).Include(a => a.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            if (journal != null)
            {
                FillDocumentJournal(documentmodel, journal, type);
                documentmodel.ReverseParentRefId = journal.ReverseParentRefId;
                documentmodel.ReverseChildRefId = journal.ReverseChildRefId;
                if (type == DocTypeConstants.DoubtFulDebitNote)
                {
                    var invoice = _invoiceService.Query(c => c.Id == journal.DocumentId).Select().FirstOrDefault();
                    if (invoice != null)
                    {
                        documentmodel.DocState = invoice.DocumentState;
                        documentmodel.PONo = invoice.PONo;
                        documentmodel.DocDescription = invoice.Remarks;
                    }
                }
                DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                List<JournalDetail> alllstjds = new List<JournalDetail>();
                alllstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                //DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                if (alllstjds.Any())
                {
                    foreach (var jd in alllstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        FillDocumentDetail(documentDetail, jd, false, false, documentmodel.IsInterCompanyActive, journal.ExchangeRate);
                        documentDetail.AccountDescription = journal.Remarks;
                        lstDocumentDetail.Add(documentDetail);
                    }
                    documentDetail1 = new DocumentDetailModel();
                    //documentDetail.AccountName = documentmodel.JournalTaxDetailsModel..TaxName;
                    documentDetail1.AccountName = "Grand Total";
                    documentDetail1.DocDebit = lstDocumentDetail.Sum(c => c.DocDebit);
                    documentDetail1.DocCredit = lstDocumentDetail.Sum(c => c.DocCredit);
                    documentDetail1.BaseDebit = lstDocumentDetail.Sum(c => c.BaseDebit);
                    documentDetail1.BaseCredit = lstDocumentDetail.Sum(c => c.BaseCredit);
                    documentDetail1.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                    documentDetail1.ISDiSAllowShow = false;
                    lstDocumentDetail.Add(documentDetail1);
                    documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).ToList();
                }
            }
            return documentmodel;
        }

        #endregion

        #region GetOpeningBalance
        /*        public DocumentModel GetOpeningBalanceJournal(Guid id, long companyId)
                {

                    Journal journal = _journalService.Query(x => x.Id == id & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
                    DocumentModel documentmodel = new DocumentModel();
                    string baseCurrency = string.Empty;
                    List<DocumentDetailModel> lstDetails = new List<DocumentDetailModel>();
                    if (journal != null)
                    {
                        FillOpeningDocumentJournal(documentmodel, journal);
                        if (journal.JournalDetails.Count > 0)
                        {
                            foreach (var detail in journal.JournalDetails)
                            {
                                DocumentDetailModel dDetail = new DocumentDetailModel();
                                FillOpeningDetails(dDetail, detail);
                                dDetail.PostingDate = detail.PostingDate;
                                baseCurrency = detail.BaseCurrency;
                                dDetail.AccountDescription = detail.AccountDescription != null ? detail.AccountDescription : documentmodel.DocDescription;
                                lstDetails.Add(dDetail);
                            }
                        }
                        documentmodel.DocumentDetailModels = lstDetails;
                        //var amount = lstDetails.GroupBy(c => new { c.DocCurrency, c.DocDebit, c.DocCredit }).Select(x => new DocumentDetailModel
                        //{
                        //    DocCurrency = x.Key.DocCurrency,
                        //    DocDebit = x.Sum(y => y.DocDebit),
                        //    DocCredit = x.Sum(z => z.DocCredit)
                        //});
                        var amount = lstDetails.GroupBy(c => c.DocCurrency);
                        List<DocumentDetailModel> lstDocTax = new List<DocumentDetailModel>();
                        foreach (var item in amount)
                        {
                            DocumentDetailModel detail = new DocumentDetailModel();
                            var result = lstDetails.Where(c => c.DocCurrency == item.Key).ToList();
                            decimal? val = result.Sum(c => c.DocCredit == null ? 0 : c.DocCredit);
                            decimal? val2 = result.Sum(d => d.DocDebit == null ? 0 : d.DocDebit);
                            //detail.AccountName = "DocDebit/Credit Total";
                            detail.DocCurrency = item.Key;
                            //detail.BaseCurrency = baseCurrency;
                            detail.DocCredit = val;
                            detail.DocDebit = val2;
                            detail.RecOrder = lstDetails.Max(c => c.RecOrder) + 1;
                            lstDocTax.Add(detail);
                        }
                        lstDetails.AddRange(lstDocTax);

                        DocumentDetailModel detailModel = new DocumentDetailModel();
                        detailModel.AccountName = "Grand Total";
                        if (!journal.IsMultiCurrency)
                        {
                            detailModel.DocDebit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit == null ? 0 : c.BaseDebit), 2);
                            detailModel.DocCredit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit == null ? 0 : c.BaseCredit), 2);
                        }
                        detailModel.BaseDebit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit == null ? 0 : c.BaseDebit), 2);
                        detailModel.BaseCredit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit == null ? 0 : c.BaseCredit), 2);
                        detailModel.BaseCurrency = baseCurrency;
                        detailModel.RecOrder = lstDetails.Max(c => c.RecOrder) - 1;
                        lstDetails.Add(detailModel);
                        documentmodel.DocumentDetailModels = lstDetails.Where(x => x.DocDebit > 0 || x.DocCredit > 0 || x.BaseDebit > 0 || x.BaseCredit > 0).OrderBy(x => x.RecOrder).ToList();
                    }
                    return documentmodel;
                } */
        public DocumentModel GetOpeningBalanceJournal(Guid id, long companyId)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            string baseCurrency = string.Empty;
            List<DocumentDetailModel> lstDetails = new List<DocumentDetailModel>();
            if (journal != null)
            {
                FillOpeningDocumentJournal(documentmodel, journal);
                foreach (var detail in journal.JournalDetails)
                {
                    DocumentDetailModel dDetail = new DocumentDetailModel();
                    FillOpeningDetails(dDetail, detail);
                    dDetail.PostingDate = detail.PostingDate;
                    baseCurrency = detail.BaseCurrency;
                    dDetail.AccountDescription = detail.AccountDescription != null ? detail.AccountDescription : documentmodel.DocDescription;
                    lstDetails.Add(dDetail);
                }

                documentmodel.DocumentDetailModels = lstDetails;

                var amount = lstDetails.GroupBy(c => c.DocCurrency);
                int recNo = (lstDetails.Max(c => c.RecOrder) ?? 0) + 1;
                List<DocumentDetailModel> lstDocTax = new List<DocumentDetailModel>();
                foreach (var item in amount)
                {
                    DocumentDetailModel detail = new DocumentDetailModel();
                    var result = lstDetails.Where(c => c.DocCurrency == item.Key).ToList();
                    decimal? val = result.Sum(c => c.DocCredit == null ? 0 : c.DocCredit);
                    decimal? val2 = result.Sum(d => d.DocDebit == null ? 0 : d.DocDebit);
                    detail.DocCurrency = item.Key;
                    detail.DocCredit = val;
                    detail.DocDebit = val2;
                    detail.RecOrder = recNo += 1;
                    lstDocTax.Add(detail);
                }
                lstDetails.AddRange(lstDocTax);

                DocumentDetailModel detailModel = lstDocTax.ElementAt(0);
                detailModel.AccountName = "Grand Total";
                if (!journal.IsMultiCurrency == true)
                {
                    detailModel.DocDebit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit == null ? 0 : c.BaseDebit), 2);
                    detailModel.DocCredit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit == null ? 0 : c.BaseCredit), 2);
                }
                detailModel.BaseDebit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseDebit == null ? 0 : c.BaseDebit), 2);
                detailModel.BaseCredit = Math.Round((decimal)documentmodel.DocumentDetailModels.Sum(c => c.BaseCredit == null ? 0 : c.BaseCredit), 2);
                detailModel.BaseCurrency = baseCurrency;
                //lstDetails.Add(detailModel);
                documentmodel.DocumentDetailModels = lstDetails.Where(x => x.DocDebit > 0 || x.DocCredit > 0 || x.BaseDebit > 0 || x.BaseCredit > 0).OrderBy(x => x.RecOrder).ToList();
            }
            return documentmodel;
        }


        private void FillOpeningDetails(DocumentDetailModel dDetail, JournalDetail detail)
        {
            dDetail.SystemRefNo = detail.SystemRefNo;
            dDetail.DocType = detail.DocType;
            dDetail.DocSubType = detail.DocSubType;
            var serviceCompany = _companyService.GetByNameByServiceCompany(detail.ServiceCompanyId);
            if (serviceCompany != null)
                dDetail.ServiceCompanyName = serviceCompany.ShortName;

            dDetail.DocNo = detail.DocNo;
            dDetail.DocDescription = detail.DocDescription;
            dDetail.DocumentDate = detail.DocDate;
            dDetail.RecOrder = detail.RecOrder;
            dDetail.ExchangeRate = detail.ExchangeRate;
            if (detail.EntityId != null)
            {
                var entity = _beanEntityService.GetEntityById(detail.EntityId.Value);
                if (entity != null)
                    dDetail.EntityName = entity.Name;
            }
            var coa = _chartOfAccountService.GetChartOfAccountById(detail.COAId);
            if (coa != null)
            {
                dDetail.AccountName = coa.Name;
                dDetail.AccountCode = coa.Code;
                dDetail.Nature = (coa.Name == "Accounts Receivables" || coa.Name == "Accounts payables") ? "Trade" : (coa.Name == "Other receivables" || coa.Name == "Other payables") ? "Other" : string.Empty;
            }
            dDetail.DocCurrency = detail.DocCurrency;
            dDetail.BaseCurrency = detail.BaseCurrency;
            dDetail.DocDebit = detail.DocDebit != 0 ? detail.DocDebit : null;
            dDetail.DocCredit = detail.DocCredit != 0 ? detail.DocCredit : null;
            dDetail.BaseDebit = detail.BaseDebit != 0 ? detail.BaseDebit : null;
            dDetail.BaseCredit = detail.BaseCredit != 0 ? detail.BaseCredit : null;
            //if (detail.SegmentMasterid1 != null)
            //{
            //    var segmentDetail1 = _segmentDetailService.GetSegmentById(detail.SegmentMasterid1.Value);
            //    if (segmentDetail1 != null)
            //        dDetail.SegmentCategory1 = segmentDetail1.Name;
            //}
            //if (detail.SegmentMasterid2 != null)
            //{
            //    var segmentDetail2 = _segmentDetailService.GetSegmentById(detail.SegmentMasterid2.Value);
            //    if (segmentDetail2 != null)
            //        dDetail.SegmentCategory2 = segmentDetail2.Name;
            //}
        }
        private void FillOpeningDocumentJournal(DocumentModel documentmodel, Journal journal)
        {
            documentmodel.Id = journal.Id;
            documentmodel.ServiceCompanyId = journal.ServiceCompanyId;
            var serviceCompName = _companyService.GetById(journal.ServiceCompanyId);
            documentmodel.ServiceCompanyName = serviceCompName != null ? serviceCompName.ShortName : string.Empty;
            documentmodel.BaseCurrency = journal.ExCurrency;
            documentmodel.CompanyId = journal.CompanyId;
            documentmodel.DocDate = journal.DocDate;
            documentmodel.DocState = journal.DocumentState;
            documentmodel.CreatedDate = journal.CreatedDate;
            documentmodel.UserCreated = journal.UserCreated;
            documentmodel.ModifiedBy = journal.ModifiedBy;
            documentmodel.ModifiedDate = journal.ModifiedDate;
            documentmodel.DocNo = journal.DocNo;
            //documentmodel.IsSegmentActive = journal.IsSegmentReporting;
            documentmodel.IsMultiCurrency = journal.IsMultiCurrency;
            documentmodel.PostingDate = journal.PostingDate.Value;
            documentmodel.DocDescription = DocTypeConstants.OpeningBalance + " - " + documentmodel.ServiceCompanyName;
        }
        #endregion

        #region Clearing
        public DocumentModel GetClearingJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            if (journal != null)
            {
                FillClearingDocumentJournal(documentmodel, journal, type);
                List<JournalDetail> alllstjds = new List<JournalDetail>();
                //alllstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                alllstjds = journal.JournalDetails.ToList();
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                // DocumentDetailModel documentDetail = new DocumentDetailModel();
                if (alllstjds.Any())
                {
                    foreach (var jd in alllstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        FillClearingDocumentDetail(documentDetail, jd, false);
                        documentDetail.AccountDescription = journal.Remarks;
                        lstDocumentDetail.Add(documentDetail);
                    }
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                    var detail = alllstjds.Where(x => x.DocumentId == journal.DocumentId).FirstOrDefault();
                    DocumentDetailModel documentDetail2 = new DocumentDetailModel();
                    documentDetail2.AccountName = "Grand Total";
                    documentDetail2.DocDebit = (detail.DocDebit == 0 || detail.DocDebit == null) ? detail.DocCredit : detail.DocDebit;
                    documentDetail2.DocCredit = (detail.DocCredit == 0 || detail.DocCredit == null) ? detail.DocDebit : detail.DocCredit;
                    documentDetail2.BaseDebit = (detail.BaseDebit == 0 || detail.BaseDebit == null) ? detail.BaseCredit : detail.BaseDebit;
                    documentDetail2.BaseCredit = (detail.BaseCredit == 0 || detail.BaseCredit == null) ? detail.BaseDebit : detail.BaseCredit;
                    documentDetail2.RecOrder = alllstjds.Max(c => c.RecOrder) + 1;
                    lstDocumentDetail.Add(documentDetail2);
                    documentmodel.DocumentDetailModels = lstDocumentDetail.Where(x => x.DocNo != "-R").OrderBy(c => c.RecOrder).ToList();
                }
            }
            return documentmodel;
        }
        #endregion

        #region GetMemoApplicationJournal
        public DocumentModel GetMemoApplicationJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            DocumentModel documentmodel = new DocumentModel();
            if (journal != null)
            {
                FillDocumentJournal(documentmodel, journal, type);
                DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                List<JournalDetail> alllstjds;
                alllstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                List<DocumentDetailModel> lstDocumentDetail = new List<DocumentDetailModel>();
                //DocumentDetailModel documentDetail1 = new DocumentDetailModel();
                if (alllstjds.Any())
                {
                    var lstjds = alllstjds.Where(x => x.DocumentDetailId != new Guid("00000000-0000-0000-0000-000000000000") && x.IsTax != true).ToList();
                    foreach (var jd in lstjds)
                    {
                        DocumentDetailModel documentDetail = new DocumentDetailModel();
                        FillMemoApplicationDetail(documentDetail, jd, false, true);
                        documentDetail.AccountDescription = journal.Remarks;
                        lstDocumentDetail.Add(documentDetail);
                    }
                    documentmodel.DocumentDetailModels = lstDocumentDetail;
                }
                JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();

                var mjd = alllstjds.Where(x => x.DocumentDetailId == new Guid("00000000-0000-0000-0000-000000000000")).FirstOrDefault();

                ChartOfAccount account1 = _chartOfAccountService.GetChartOfAccountById(mjd.COAId);
                if (account1 != null)
                    documentDetail1.AccountName = account1.Name;
                documentDetail1.DocCredit = mjd.DocCredit;
                documentDetail1.BaseCredit = mjd.BaseCredit;
                documentDetail1.ISDiSAllowShow = false;
                documentDetail1.DocDebit = mjd.DocDebit;
                documentDetail1.BaseDebit = mjd.BaseDebit;
                documentDetail1.RecOrder = mjd.RecOrder;
                documentDetail1.ISDiSAllowShow = false;
                //if (mjd.SegmentDetailid1 != null)
                //{
                //    var segmnet1 = _segmentDetailService.GetSegmentById(mjd.SegmentDetailid1.Value);
                //    documentDetail1.SegmentDetailidName1 = segmnet1.Name;
                //}
                //if (mjd.SegmentMasterid1 != null)
                //{
                //    var segment2 = _segmentDetailService.GetSegmentById(mjd.SegmentMasterid1.Value);
                //    documentDetail1.SegmentMasteridName1 = segment2.Name;
                //}
                lstDocumentDetail.Add(documentDetail1);
                documentmodel.DocumentDetailModels = lstDocumentDetail;

                jTaxDetailModel.GrandDocDebitTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.DocDebit)), 2);
                jTaxDetailModel.GrandDocCreditTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.DocCredit)), 2);
                jTaxDetailModel.GrandBaseDebitTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.BaseDebit)), 2);
                jTaxDetailModel.GrandBaseCreditTotal = Math.Round((decimal)(lstDocumentDetail.Sum(c => c.BaseCredit)), 2);
                documentmodel.JournalTaxDetailsModel = jTaxDetailModel;


                if (documentmodel.JournalTaxDetailsModel != null)
                {
                    DocumentDetailModel documentDetail = new DocumentDetailModel();
                    //documentDetail.AccountName = documentmodel.JournalTaxDetailsModel..TaxName;
                    documentDetail.AccountName = "Grand Total";
                    documentDetail.DocDebit = documentmodel.JournalTaxDetailsModel.GrandDocDebitTotal;
                    documentDetail.DocCredit = documentmodel.JournalTaxDetailsModel.GrandDocCreditTotal;
                    documentDetail.BaseDebit = documentmodel.JournalTaxDetailsModel.GrandBaseDebitTotal;
                    documentDetail.BaseCredit = documentmodel.JournalTaxDetailsModel.GrandBaseCreditTotal;
                    documentDetail.ISDiSAllowShow = false;
                    documentDetail.RecOrder = lstDocumentDetail.Max(c => c.RecOrder) + 1;
                    lstDocumentDetail.Add(documentDetail);
                    documentmodel.DocumentDetailModels = lstDocumentDetail.OrderBy(c => c.RecOrder).Where(c => c.DocCredit > 0 || c.DocDebit > 0 || c.BaseDebit > 0 || c.BaseCredit > 0).ToList();
                }
            }
            return documentmodel;
        }

        #endregion

        #region GetRevaluationJournal
        public DocumentModel GetAllRevaluation(Guid id, long companyId)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            List<Journal> checkRev = _journalService.GetJournalReferenceNo(journal.ReverseParentRefId, companyId);
            Journal revDocFor = checkRev.Where(c => c.DocumentState == "Posted").FirstOrDefault();
            Journal reversedBy = checkRev.Where(c => c.DocumentState == "Reversed").FirstOrDefault();
            DocumentModel documentModel = new DocumentModel();
            List<DocumentDetailModel> lstDetails = new List<DocumentDetailModel>();
            if (journal != null)
            {
                FillRevaluationJournal(journal, documentModel);
                documentModel.ReversalDocFor = (journal.DocumentState == "Cancelled" && journal.IsAutoReversalJournal == true) ? (revDocFor != null ? revDocFor.SystemReferenceNo : string.Empty) : (journal.IsAutoReversalJournal == true ? (revDocFor != null ? revDocFor.SystemReferenceNo : string.Empty) : (reversedBy != null ? reversedBy.SystemReferenceNo : string.Empty));
                //if (documentModel.IsDocFor == true)
                //{
                if (revDocFor != null && reversedBy != null)
                {
                    documentModel.ReverseParentRefId = reversedBy.Id;
                    documentModel.ReverseChildRefId = revDocFor.Id;
                }
                //}
                //else
                //{
                //    if (reversedBy != null && revDocFor != null)
                //    {
                //        documentModel.ReverseChildRefId = reversedBy.Id;
                //        documentModel.ReverseParentRefId = revDocFor.Id;
                //    }
                //}
                if (journal.JournalDetails.Any())
                {
                    foreach (var detail in journal.JournalDetails)
                    {
                        DocumentDetailModel journalDetail = new DocumentDetailModel();
                        FillRevaluationDetailJournal(journalDetail, detail);
                        journalDetail.AccountDescription = documentModel.DocDescription;
                        lstDetails.Add(journalDetail);
                    }
                }
                documentModel.DocumentDetailModels = lstDetails;
                documentModel.IsAutoReversalJournal = true;
                DocumentDetailModel detailModel = new DocumentDetailModel();
                detailModel.AccountName = "Grand Total";
                //if (!journal.IsMultiCurrency)
                //{
                detailModel.DocDebit = Math.Round((decimal)documentModel.DocumentDetailModels.Sum(c => c.DocDebit == null ? 0 : c.DocDebit), 2);
                detailModel.DocCredit = Math.Round((decimal)documentModel.DocumentDetailModels.Sum(c => c.DocCredit == null ? 0 : c.DocCredit), 2);
                //}
                detailModel.BaseDebit = Math.Round((decimal)documentModel.DocumentDetailModels.Sum(c => c.BaseDebit == null ? 0 : c.BaseDebit), 2);
                detailModel.BaseCredit = Math.Round((decimal)documentModel.DocumentDetailModels.Sum(c => c.BaseCredit == null ? 0 : c.BaseCredit), 2);
                detailModel.RecOrder = lstDetails.Max(c => c.RecOrder) + 1;
                lstDetails.Add(detailModel);
                documentModel.DocumentDetailModels = lstDetails/*.Where(x => x.DocDebit > 0 || x.DocCredit > 0 || x.BaseDebit > 0 || x.BaseCredit > 0)*/.OrderBy(x => x.RecOrder).ToList();
            }
            return documentModel;
        }

        #endregion

        private void SaveHistory(Journal journal, string type)
        {
            ActivityHistory History = new ActivityHistory();
            History.CompanyId = journal.CompanyId;
            History.Id = Guid.NewGuid();
            History.DocumentId = journal.Id;
            History.Type = journal.DocType;
            History.Action = "This " + History.Type + "Will Be " + type;
            History.Activity = type;
            History.CreatedBy = journal.UserCreated;
            History.CreateDate = DateTime.UtcNow;
            History.ObjectState = ObjectState.Added;
            _activityHistoryService.Insert(History);
        }
        public JVModel GetInvoiceJournal(Guid id, string systemRefNo, long companyId, string type)
        {
            Journal journal = _journalService.Query(x => x.Id == id & x.SystemReferenceNo == systemRefNo & x.CompanyId == companyId).Include(c => c.JournalDetails).Select().FirstOrDefault();
            JVModel jVModel = new JVModel();
            if (journal != null)
            {
                FillJouralForPosting(jVModel, journal);
                jVModel.DocType = type;
                if (type == DocTypeConstants.Invoice)
                    FillTypeInvoice(jVModel, journal);
                if (type == DocTypeConstants.CreditNote)
                    FillTypeCreditNote(jVModel, journal);
                if (type == DocTypeConstants.DebitNote)
                    FillTypeDebitNote(jVModel, journal);
                if (type == DocTypeConstants.DoubtFulDebitNote)
                    FillTypeDoubtFulDebitNote(jVModel, journal);
                List<JournalDetailsModel> lstJDModel = new List<JournalDetailsModel>();
                List<JournalDetail> lstjds = new List<JournalDetail>();
                if (type == DocTypeConstants.DoubtFulDebitNote)
                    lstjds = _journalDetailService.GetAllJournalDetailsByid(journal.Id);
                else
                    lstjds = _journalDetailService.GetAllJournalDetailsByidForView(journal.Id);
                foreach (var jd in lstjds)
                {
                    JournalDetailsModel jDModel = new JournalDetailsModel();
                    FillJournalDetailsModel(jDModel, jd, type, journal.DocumentId);
                    lstJDModel.Add(jDModel);
                }
                jVModel.JournalDetailsModel = lstJDModel;
                List<TaxDetailsModel> lstTax = new List<TaxDetailsModel>();
                JournalTaxDetailsModel jTaxDetailModel = new JournalTaxDetailsModel();
                var JournalDetailsModel1 = jVModel.JournalDetailsModel.GroupBy(c => c.TaxCode).ToList();
                foreach (var grouptax in JournalDetailsModel1)
                {
                    TaxDetailsModel Tax = new TaxDetailsModel();
                    long taxId = grouptax.Select(c => c.TaxId).FirstOrDefault();
                    var _tax = _taxCodeService.GetTaxById(taxId);
                    if (_tax != null)
                    {
                        Tax.TaxCode = _tax.Code;
                        Tax.TaxName = _tax.Name;
                        Tax.TaxRate = _tax.TaxRate;
                    }
                    Tax.TaxDocCredit = grouptax.Sum(c => c.DocTaxCredit);
                    Tax.TaxDocCredit = Tax.TaxDocCredit != 0 ? Tax.TaxDocCredit : null;
                    Tax.TaxBaseCredit = grouptax.Sum(c => c.BaseTaxCredit);
                    Tax.TaxBaseCredit = Tax.TaxBaseCredit != 0 ? Tax.TaxBaseCredit : null;
                    Tax.TaxDocDebit = grouptax.Sum(c => c.DocTaxDebit);
                    Tax.TaxDocDebit = Tax.TaxDocDebit != 0 ? Tax.TaxDocDebit : null;
                    Tax.TaxBaseDebit = grouptax.Sum(c => c.BaseTaxDebit);
                    Tax.TaxBaseDebit = Tax.TaxBaseDebit != 0 ? Tax.TaxBaseDebit : null;
                    lstTax.Add(Tax);
                }
                //jTaxDetailModel.TaxDetails = lstTax;
                jTaxDetailModel.GrandDocDebitTotal = jVModel.JournalDetailsModel.Sum(c => c.DocDebit) + lstTax.Sum(c => c.TaxDocDebit);
                jTaxDetailModel.GrandDocCreditTotal = jVModel.JournalDetailsModel.Sum(c => c.DocCredit) + lstTax.Sum(c => c.TaxDocCredit);
                jTaxDetailModel.GrandBaseDebitTotal = jVModel.JournalDetailsModel.Sum(c => c.BaseDebit) + lstTax.Sum(c => c.TaxBaseDebit);
                jTaxDetailModel.GrandBaseCreditTotal = jVModel.JournalDetailsModel.Sum(c => c.BaseCredit) + lstTax.Sum(c => c.TaxBaseCredit);
                jTaxDetailModel.GrandDocTaxDebitTotal = jVModel.JournalDetailsModel.Sum(c => c.DocTaxDebit);
                jTaxDetailModel.GrandDocTaxCreditTotal = jVModel.JournalDetailsModel.Sum(c => c.DocTaxCredit);
                jTaxDetailModel.GrandBaseTaxDebitTotal = jVModel.JournalDetailsModel.Sum(c => c.BaseTaxDebit);
                jTaxDetailModel.GrandBaseTaxCreditTotal = jVModel.JournalDetailsModel.Sum(c => c.BaseTaxCredit);
                jVModel.JournalTaxDetailsModel = jTaxDetailModel;
                List<JournalGSTTaxModel> lstGstTax = new List<JournalGSTTaxModel>();
                JournalGSTModel jGst = new JournalGSTModel();
                foreach (var grouptax in JournalDetailsModel1)
                {
                    if (type == DocTypeConstants.CreditNote)
                    {
                        JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                        GstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                        GstTax.Amount = grouptax.Sum(c => c.DocDebit);
                        GstTax.Amount = GstTax.Amount * journal.ExchangeRate;
                        GstTax.TaxAmount = grouptax.Sum(c => c.DocTaxDebit);
                        GstTax.TaxAmount = GstTax.TaxAmount * journal.ExchangeRate;
                        GstTax.TotalAmount = GstTax.Amount + GstTax.TaxAmount;
                        lstGstTax.Add(GstTax);
                    }
                    else
                    {
                        JournalGSTTaxModel GstTax = new JournalGSTTaxModel();
                        GstTax.TaxCode = grouptax.Select(c => c.TaxCode).FirstOrDefault();
                        GstTax.Amount = grouptax.Sum(c => c.DocCredit);
                        GstTax.Amount = GstTax.Amount * journal.ExchangeRate;
                        GstTax.TaxAmount = grouptax.Sum(c => c.DocTaxCredit);
                        GstTax.TaxAmount = GstTax.TaxAmount * journal.ExchangeRate;
                        GstTax.TotalAmount = GstTax.Amount + GstTax.TaxAmount;
                        lstGstTax.Add(GstTax);
                    }
                }
                //docum.JournalGSTTaxModel = lstGstTax;
                jGst.GrandAmount = lstGstTax.Sum(c => c.Amount);
                jGst.GrandTaxAmount = lstGstTax.Sum(c => c.TaxAmount);
                jGst.GrandTotal = lstGstTax.Sum(c => c.TotalAmount);
                jVModel.JournalGSTDetailModel = jGst;
            }
            return jVModel;
        }
        private void FillInvoice(InvoiceModel invoice, Journal journal)
        {
            var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
            if (entity != null)
            {
                invoice.EntityName = entity.Name;
                invoice.EntityType = journal.EntityType;
            }
            invoice.DueDate = journal.DueDate;
            var terms = _termsOfPaymentService.GetById(journal.CreditTermsId);
            if (terms != null)
                invoice.CreditTermsName = terms.Name;
            invoice.Nature = journal.Nature;
            invoice.PONo = journal.PoNo;
            invoice.IsRepeatingInvoice = journal.IsRepeatingInvoice;
            invoice.RepEveryPeriodNo = journal.RepEveryPeriodNo;
            invoice.RepEveryPeriod = journal.RepEveryPeriod;
            invoice.EndDate = journal.EndDate;
        }
        private void FillJouralForPosting(JVModel jVModel, Journal journal)
        {
            jVModel.DocDate = journal.DocDate;
            jVModel.DocNo = journal.DocNo;
            var company = _companyService.GetById(journal.ServiceCompanyId.Value);
            jVModel.ServiceCompanyId = journal.ServiceCompanyId;
            jVModel.ServiceCompanyName = company.ShortName;
            jVModel.NoSupportingDocument = journal.NoSupportingDocument;
            jVModel.IsNoSupportingDocument = journal.IsNoSupportingDocument;
            jVModel.DocDescription = journal.DocumentDescription;
            jVModel.DocCurrency = journal.DocCurrency;
            jVModel.ExchangeRate = journal.ExchangeRate;
            jVModel.GstExchangeRate = journal.GSTExchangeRate;
            jVModel.BaseCurrency = journal.ExCurrency;
            jVModel.GstReportingCurrency = journal.GSTExCurrency;
            jVModel.ExDurationFrom = journal.ExDurationFrom;
            jVModel.ExDurationTo = journal.ExDurationTo;
            jVModel.GstdurationFrom = journal.GSTExDurationFrom;
            jVModel.GstDurationTo = journal.GSTExDurationTo;
            jVModel.IsMultiCurrency = journal.IsMultiCurrency;
            jVModel.IsGstSettings = journal.IsGstSettings;
            jVModel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            //jVModel.SegmentCategory1 = journal.SegmentCategory1;
            //jVModel.SegmentCategory2 = journal.SegmentCategory2;
            //jVModel.SegmentName1 = journal.SegmentMasterid1 == null ? null : _segmentMasterService.GetSegmentName(journal.SegmentMasterid1.Value);
            //jVModel.SegmentName2 = journal.SegmentMasterid2 == null ? null : _segmentMasterService.GetSegmentName(journal.SegmentMasterid2.Value);
            jVModel.IsRecurringJournal = journal.IsRecurringJournal;
            jVModel.RecurringJournalName = journal.RecurringJournalName;
            jVModel.Frequency = journal.FrequencyType;
            jVModel.FrequencyEndDate = journal.FrequencyEndDate;
            jVModel.IsAutoReversalJournal = journal.IsAutoReversalJournal;
            jVModel.ReversalDate = journal.ReversalDate;
            jVModel.Remarks = journal.Remarks;
        }
        private void FillInvoiceCreditNoteModel(List<InvoiceCreditNoteModel> lstInvCNModel, Guid? DocumentId)
        {
            var cNADetails = _creditNoteApplicationDetailService.GetApplicationDetails(DocumentId);

            if (cNADetails.Any())
            {
                foreach (var credit in cNADetails)
                {
                    InvoiceCreditNoteModel invCNModel = new InvoiceCreditNoteModel();
                    var cNA = _creditNoteApplicationService.GetAppication(credit.CreditNoteApplicationId);
                    if (cNA != null)
                    {
                        var creditNote = _invoiceService.GetInvoiceDetail(cNA.InvoiceId);
                        // _inVoiceRepository.Query(c => c.Id == cNA.InvoiceId).Select().FirstOrDefault();
                        if (creditNote != null)
                        {
                            invCNModel.DocDate = creditNote.DocDate;
                            invCNModel.DocNo = creditNote.DocNo;
                            invCNModel.SystemRefNo = creditNote.InvoiceNumber;
                            invCNModel.Amount = credit.CreditAmount;
                            lstInvCNModel.Add(invCNModel);
                        }
                    }
                }
            }
        }
        private void FillInvoiceDoubtFulDebitModel(List<InvoiceDoubtFulDebitModel> lstInvDDModel, Guid? documentId)
        {
            var dDADetails = _doubtfulDebtAllocationDetailService.GetApplicationDetails(documentId);
            if (dDADetails.Any())
            {
                foreach (var dDebit in dDADetails)
                {
                    InvoiceDoubtFulDebitModel invDDModel = new InvoiceDoubtFulDebitModel();
                    // = _doubtfulDebtAllocationRepository.Query(c => c.Id == dDebit.DoubtfulDebtAllocationId && c.Status != DoubtfulDebtAllocationStatus.Reset).Select().FirstOrDefault();
                    var dDA = _doubtfulDebtAllocationService.GetAppication(dDebit.DoubtfulDebtAllocationId);
                    if (dDA != null)
                    {
                        // var creditNote = _inVoiceRepository.Query(c => c.Id == dDA.InvoiceId).Select().FirstOrDefault();
                        var creditNote = _invoiceService.GetInvoiceDetail(dDA.InvoiceId);
                        if (creditNote != null)
                        {
                            invDDModel.DocDate = creditNote.DocDate;
                            invDDModel.DocNo = creditNote.DocNo;
                            invDDModel.SystemRefNo = creditNote.InvoiceNumber;
                            invDDModel.Amount = dDebit.AllocateAmount;
                            lstInvDDModel.Add(invDDModel);
                        }
                    }
                }
            }
        }
        private void FillInvoiceDetailModel(InvoiceDetailModel invoiceDetailModel, JournalDetail jd)
        {
            invoiceDetailModel.ItemCode = jd.ItemCode;
            invoiceDetailModel.ItemDescription = jd.ItemDescription;
            invoiceDetailModel.Qty = jd.Qty;
            invoiceDetailModel.Unit = jd.Unit;
            invoiceDetailModel.UnitPrice = jd.UnitPrice;
        }
        private void FillCreditNoteDetailModel(CreditNoteDetailModel creditNoteDetailModel, JournalDetail jd)
        {
            creditNoteDetailModel.Item = jd.ItemId;
            creditNoteDetailModel.ItemCode = jd.ItemCode;
            creditNoteDetailModel.ItemDescription = jd.ItemDescription;
            creditNoteDetailModel.Qty = jd.Qty;
            creditNoteDetailModel.Unit = jd.Unit;
            creditNoteDetailModel.UnitPrice = jd.UnitPrice;
        }
        private void FillDebitNoteDetailModel(DebitNoteDetailModel debitNoteDetailModel, JournalDetail jd)
        {
            debitNoteDetailModel.TaxIdCode = jd.TaxIdCode;
            debitNoteDetailModel.COAId = jd.COAId;
            debitNoteDetailModel.DocAmount = jd.DocumentAmount;
            //debitNoteDetailModel.DocTotalAmount = jd.DocTotalAmount;
            debitNoteDetailModel.DocTaxAmount = jd.DocTaxAmount;
            //debitNoteDetailModel.BaseAmount = jd.BaseAmount;
            debitNoteDetailModel.BaseTaxAmount = jd.BaseTaxAmount;
            debitNoteDetailModel.BaseTotalAmount = jd.BaseTaxableAmount;
            //debitNoteDetailModel.AmtCurrency = jd.AmtCurrency;

        }
        private void FillDoubtfulDebtDetailModel(DoubtfulDebtDetailModel doubtfulDebtDetailModel, JournalDetail jd)
        {
            doubtfulDebtDetailModel.TaxCode = jd.TaxIdCode;
            doubtfulDebtDetailModel.TaxType = jd.TaxType;
            doubtfulDebtDetailModel.TaxRate = jd.TaxRate;
        }
        private void FillJournalDetailsModel(JournalDetailsModel jDModel, JournalDetail jd, string type, Guid? documentId)
        {
            var coa = _chartOfAccountService.GetChartOfAccountById(jd.COAId);
            if (coa != null)
            {
                jDModel.AccountName = coa.Name;
            }
            jDModel.Disallowable = jd.AllowDisAllow;
            if (jd.TaxId != null)
            {
                jDModel.TaxId = jd.TaxId.Value;
                var tax = _taxCodeService.GetTaxById(jd.TaxId);
                if (tax != null)
                {
                    jDModel.TaxCode = tax.Code;
                    jDModel.TaxType = tax.TaxType;
                    jDModel.TaxRate = tax.TaxRate;
                }
            }
            jDModel.DocDebit = jd.DocDebit;
            jDModel.DocCredit = jd.DocCredit;
            jDModel.BaseDebit = jDModel.DocDebit * jd.ExchangeRate;
            jDModel.BaseCredit = jDModel.DocCredit * jd.ExchangeRate;
            jDModel.DocTaxDebit = (jDModel.DocDebit) * Convert.ToDecimal(jDModel.TaxRate / 100);
            jDModel.BaseTaxDebit = (jDModel.BaseDebit) * Convert.ToDecimal(jDModel.TaxRate / 100);
            jDModel.DocTaxCredit = (jDModel.DocCredit) * Convert.ToDecimal(jDModel.TaxRate / 100);
            jDModel.BaseTaxCredit = (jDModel.BaseCredit) * Convert.ToDecimal(jDModel.TaxRate / 100);
            if (type == DocTypeConstants.Invoice)
            {
                InvoiceDetailModel invoiceDetailModel = new InvoiceDetailModel();
                FillInvoiceDetailModel(invoiceDetailModel, jd);
                jDModel.InvoiceDetailModel = invoiceDetailModel;
                List<InvoiceCreditNoteModel> lstInvCNModel = new List<InvoiceCreditNoteModel>();
                FillInvoiceCreditNoteModel(lstInvCNModel, documentId);
                jDModel.InvoiceDetailModel.InvoiceCreditNoteModels = lstInvCNModel;
                List<InvoiceDoubtFulDebitModel> lstInvDDModel = new List<InvoiceDoubtFulDebitModel>();
                FillInvoiceDoubtFulDebitModel(lstInvDDModel, documentId);
                jDModel.InvoiceDetailModel.InvoiceDoubtFulDebitModels = lstInvDDModel;
                if (jDModel.InvoiceDetailModel.InvoiceDoubtFulDebitModels.Any())
                {
                    jDModel.InvoiceDetailModel.DoubtfulDebitTotalAmount = jDModel.InvoiceDetailModel.InvoiceDoubtFulDebitModels.Sum(c => c.Amount);
                }
            }
            else if (type == DocTypeConstants.CreditNote)
            {
                CreditNoteDetailModel creditNoteDetailModel = new CreditNoteDetailModel();
                FillCreditNoteDetailModel(creditNoteDetailModel, jd);
                jDModel.CreditNoteDetailModel = creditNoteDetailModel;
            }
            //else if (type == DocTypeConstants.DebitNote)
            //{
            //	DebitNoteDetailModel debitNoteDetailModel = new DebitNoteDetailModel();
            //	FillDebitNoteDetailModel(debitNoteDetailModel, jd);
            //	jDModel.DebitNoteDetailModel = debitNoteDetailModel;
            //}
            else if (type == DocTypeConstants.DoubtFulDebitNote)
            {
                DoubtfulDebtDetailModel doubtfulDebtDetailModel = new DoubtfulDebtDetailModel();
                FillDoubtfulDebtDetailModel(doubtfulDebtDetailModel, jd);
                jDModel.DoubtfulDebtDetailModel = doubtfulDebtDetailModel;
            }
        }
        private void FillTypeInvoice(JVModel jVModel, Journal journal)
        {
            InvoiceModel invoice = new InvoiceModel();
            FillInvoice(invoice, journal);
            jVModel.InvoiceModel = invoice;
            List<InvoiceCreditNoteModel> lstInvCNModel = new List<InvoiceCreditNoteModel>();
            FillInvoiceCreditNoteModel(lstInvCNModel, journal.DocumentId);
            jVModel.InvoiceModel.InvoiceCreditNoteModel = lstInvCNModel;
            List<InvoiceDoubtFulDebitModel> lstInvDDModel = new List<InvoiceDoubtFulDebitModel>();
            FillInvoiceDoubtFulDebitModel(lstInvDDModel, journal.DocumentId);
            jVModel.InvoiceModel.InvoiceDoubtFulDebitModel = lstInvDDModel;
        }
        private void FillTypeCreditNote(JVModel jVModel, Journal journal)
        {
            CreditNoteModel creditNoteModel = new CreditNoteModel();
            FillCreditNote(creditNoteModel, journal);
            jVModel.CreditNoteModel = creditNoteModel;
        }
        private void FillTypeDebitNote(JVModel jVModel, Journal journal)
        {
            DebitNoteModel debitNoteModel = new DebitNoteModel();
            FillDebitNote(debitNoteModel, journal);
            jVModel.DebitNoteModel = debitNoteModel;
        }
        private void FillTypeDoubtFulDebitNote(JVModel jVModel, Journal journal)
        {
            DoubtfulDebtModel doubtfulDebtModel = new DoubtfulDebtModel();
            FillDoubtFulDebtNote(doubtfulDebtModel, journal);
            jVModel.DoubtfulDebtModel = doubtfulDebtModel;
        }
        private void FillCreditNote(CreditNoteModel creditNoteModel, Journal journal)
        {
            var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
            if (entity != null)
            {
                creditNoteModel.EntityName = entity.Name;
                creditNoteModel.EntityType = journal.EntityType;
            }
            creditNoteModel.DueDate = journal.DueDate;
            var terms = _termsOfPaymentService.GetById(journal.CreditTermsId);
            if (terms != null)
                creditNoteModel.CreditTermsName = terms.Name;
            creditNoteModel.Nature = journal.Nature;

        }
        private void FillDebitNote(DebitNoteModel debitNoteModel, Journal journal)
        {
            var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
            if (entity != null)
            {
                debitNoteModel.EntityName = entity.Name;
                debitNoteModel.EntityType = journal.EntityType;
            }
            var terms = _termsOfPaymentService.GetById(journal.CreditTermsId);
            if (terms != null)
                debitNoteModel.CreditTermsName = terms.Name;
            debitNoteModel.Nature = journal.Nature;
            debitNoteModel.PONo = journal.PoNo;
        }
        private void FillDoubtFulDebtNote(DoubtfulDebtModel doubtfulDebtModel, Journal journal)
        {
            var entity = _beanEntityService.GetEntityById(journal.EntityId.Value);
            if (entity != null)
            {
                doubtfulDebtModel.EntityName = entity.Name;
                doubtfulDebtModel.EntityType = journal.EntityType;
            }
            doubtfulDebtModel.Nature = journal.Nature;
        }
        private void FillClearingDocumentJournal(DocumentModel documentmodel, Journal journal, string type)
        {
            documentmodel.DocumentId = journal.DocumentId;
            documentmodel.DocDate = journal.DocDate;
            documentmodel.DocNo = journal.DocNo;
            documentmodel.CreatedDate = journal.CreatedDate;
            documentmodel.UserCreated = journal.UserCreated;
            documentmodel.ModifiedDate = journal.ModifiedDate;
            documentmodel.ModifiedBy = journal.ModifiedBy;
            documentmodel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            if (journal.ServiceCompanyId != null)
            {
                var company = _companyService.GetById(journal.ServiceCompanyId.Value);
                documentmodel.ServiceCompanyId = journal.ServiceCompanyId;
                documentmodel.ServiceCompanyName = company.ShortName;
            }
            var coa = _chartOfAccountService.GetChartOfAccountById(journal.COAId.Value);
            if (coa != null)
                documentmodel.CashAndBankAccount = coa.Name;
            documentmodel.DocDescription = journal.Remarks;
            documentmodel.PostingDate = journal.PostingDate.Value;
            documentmodel.IsMultiCurrency = journal.IsMultiCurrency;
            documentmodel.DocState = journal.DocumentState;
            documentmodel.DueDate = journal.DueDate;
            documentmodel.SystemRefNo = journal.SystemReferenceNo;
            documentmodel.DocSubType = journal.DocSubType;
        }
        private void FillClearingDocumentDetail(DocumentDetailModel documentdetaiilmodel, JournalDetail jd, bool isTotal)
        {
            var coa = _chartOfAccountService.GetChartOfAccountById(jd.COAId);
            if (coa != null)
            {
                documentdetaiilmodel.AccountName = coa.Name;
            }
            //documentdetaiilmodel.Disallowable = jd.AllowDisAllow;
            //if (jd.TaxId != null)
            //{
            //    documentdetaiilmodel.TaxId = jd.TaxId.Value;
            //    var tax = _taxCodeService.GetTaxById(jd.TaxId);
            //    if (tax != null)
            //    {
            //        documentdetaiilmodel.TaxCode = tax.Code;
            //        documentdetaiilmodel.TaxType = tax.TaxType;
            //        documentdetaiilmodel.TaxRate = tax.TaxRate ?? 0;
            //        //documentdetaiilmodel.TaxIdCode = tax.Code + "-" + tax.TaxRate + "%" + "(" + tax.TaxType[0] + ")";
            //        documentdetaiilmodel.TaxIdCode = tax.Code != "NA" ? tax.Code + "-" + tax.TaxRate + (tax.TaxRate != null ? "%" : null) + "(" + tax.TaxType[0] + ")" : tax.Code;
            //    }
            //}
            documentdetaiilmodel.RecOrder = jd.RecOrder;
            documentdetaiilmodel.DocType = jd.DocType;
            documentdetaiilmodel.DocumentDate = jd.DocDate;
            documentdetaiilmodel.DocNo = jd.DocNo;
            documentdetaiilmodel.ISDiSAllowShow = true;
            documentdetaiilmodel.DocDebit = jd.DocDebit != null ? ((decimal?)Math.Round((decimal)(jd.DocDebit), 2)) : null;
            documentdetaiilmodel.DocCredit = jd.DocCredit != null ? ((decimal?)Math.Round((decimal)(jd.DocCredit), 2)) : null;

            documentdetaiilmodel.BaseDebit = jd.BaseDebit != null ? ((decimal?)Math.Round((decimal)(jd.BaseDebit), 2)) : null;
            documentdetaiilmodel.BaseCredit = jd.BaseCredit != null ? ((decimal?)Math.Round((decimal)(jd.BaseCredit), 2)) : null;

        }

        private void FillMemoApplicationDetail(DocumentDetailModel documentdetaiilmodel, JournalDetail jd, bool isTotal, bool isApplication)
        {
            var coa = _chartOfAccountService.GetChartOfAccountById(jd.COAId);
            if (coa != null)
            {
                documentdetaiilmodel.AccountName = coa.Name;
            }
            documentdetaiilmodel.Disallowable = jd.AllowDisAllow;
            documentdetaiilmodel.Item = jd.ItemId;
            documentdetaiilmodel.ItemCode = jd.ItemCode;
            documentdetaiilmodel.ItemDescription = jd.ItemDescription;
            documentdetaiilmodel.Qty = jd.Qty;
            documentdetaiilmodel.Unit = jd.Unit;
            documentdetaiilmodel.UnitPrice = jd.UnitPrice;
            documentdetaiilmodel.RecOrder = jd.RecOrder;
            documentdetaiilmodel.DocDebit = jd.DocDebit;
            documentdetaiilmodel.AccountDescription = jd.AccountDescription;
            documentdetaiilmodel.DocCredit = jd.DocCredit;
            documentdetaiilmodel.DocType = jd.DocType;
            documentdetaiilmodel.OffsetDocument = jd.OffsetDocument;
            documentdetaiilmodel.DocumentDate = jd.DocDate;
            documentdetaiilmodel.DocNo = jd.DocNo;
            documentdetaiilmodel.ISDiSAllowShow = coa != null ? coa.Category == "Income Statement" ? true : false : false;
            documentdetaiilmodel.SegmentCategory1 = jd.SegmentCategory1;
            documentdetaiilmodel.SegmentCategory2 = jd.SegmentCategory2;
            //if (jd.SegmentDetailid1 != null)
            //{
            //    var segmnet1 = _segmentDetailService.GetSegmentById(jd.SegmentDetailid1.Value);
            //    documentdetaiilmodel.SegmentDetailidName1 = segmnet1.Name;
            //}
            //if (jd.SegmentMasterid1 != null)
            //{
            //    var segment2 = _segmentDetailService.GetSegmentById(jd.SegmentMasterid1.Value);
            //    documentdetaiilmodel.SegmentMasteridName1 = segment2.Name;
            //}
            documentdetaiilmodel.BaseDebit = jd.BaseDebit != null ? ((decimal?)Math.Round((decimal)(jd.BaseDebit), 2)) : null;
            documentdetaiilmodel.BaseCredit = jd.BaseCredit != null ? ((decimal?)Math.Round((decimal)(jd.BaseCredit), 2)) : null;
        }
        private void FillRevaluationJournal(Journal journal, DocumentModel documentModel)
        {
            documentModel.Id = journal.Id;
            documentModel.ServiceCompanyId = journal.ServiceCompanyId;
            var serviceCompName = _companyService.GetById(journal.ServiceCompanyId);
            documentModel.ServiceCompanyName = serviceCompName != null ? serviceCompName.ShortName : string.Empty;
            documentModel.BaseCurrency = journal.ExCurrency;
            documentModel.CompanyId = journal.CompanyId;
            documentModel.DocumentId = journal.DocumentId;
            documentModel.DocDate = journal.DocDate;
            documentModel.DocType = journal.DocType;
            documentModel.DocSubType = journal.DocSubType;
            documentModel.DocState = journal.DocumentState;
            documentModel.CreatedDate = journal.CreatedDate;
            documentModel.UserCreated = journal.UserCreated;
            documentModel.ModifiedBy = journal.ModifiedBy;
            documentModel.ModifiedDate = journal.ModifiedDate;
            documentModel.DocNo = journal.DocumentState == "Posted" ? DocTypeConstants.Revaluation + " - " + journal.DocDate.ToString("dd/MM/yyyy") + "-R" : DocTypeConstants.Revaluation + " - " + journal.DocDate.ToString("dd/MM/yyyy");
            //documentModel.IsSegmentActive = journal.IsSegmentReporting;
            documentModel.IsMultiCurrency = journal.IsMultiCurrency;
            documentModel.IsNoSupportingDocs = journal.IsNoSupportingDocs;
            documentModel.ExchangeRate = journal.ExchangeRate;
            documentModel.IsAutoReversalJournal = journal.IsAutoReversalJournal;
            documentModel.IsAllowableNonAllowable = journal.IsAllowableNonAllowable;
            documentModel.ReversalDate = journal.ReversalDate;
            documentModel.PostingDate = journal.PostingDate.Value;
            documentModel.IsDocFor = journal.DocumentState == "Posted" ? true : false;
            documentModel.DocDescription = journal.DocumentState == "Posted" ? DocTypeConstants.Revaluation + " - " + journal.DocDate.ToString("dd/MM/yyyy") + "(" + "Reversal" + ")" : DocTypeConstants.Revaluation + " - " + journal.DocDate.ToString("dd/MM/yyyy");
        }
        private void FillRevaluationDetailJournal(DocumentDetailModel journalDetail, JournalDetail detail)
        {
            journalDetail.SystemRefNo = detail.SystemRefNo;
            journalDetail.DocType = detail.DocType;
            journalDetail.DocSubType = detail.DocSubType;
            journalDetail.DocNo = detail.DocNo;
            journalDetail.AccountDescription = detail.AccountDescription;
            journalDetail.DocumentDate = detail.DocDate;
            journalDetail.RecOrder = detail.RecOrder;
            journalDetail.ExchangeRate = detail.ExchangeRate;
            if (detail.EntityId != null)
            {
                var entity = _beanEntityService.GetEntityById(detail.EntityId.Value);
                if (entity != null)
                    journalDetail.EntityName = entity.Name;
            }
            var coa = _chartOfAccountService.GetChartOfAccountById(detail.COAId);
            if (coa != null)
            {
                journalDetail.AccountName = coa.Name;
                journalDetail.AccountCode = coa.Code;
            }
            journalDetail.ISDiSAllowShow = coa != null ? (coa.Category == "Income Statement" && (coa.UnrealisedExchangeGainOrLoss == true || coa.RealisedExchangeGainOrLoss == true)) ? true : false : false;
            journalDetail.DocCurrency = detail.DocCurrency;
            journalDetail.BaseCurrency = detail.BaseCurrency;
            journalDetail.DocDebit = detail.DocDebit != 0 ? detail.DocDebit : null;
            journalDetail.DocCredit = detail.DocCredit != 0 ? detail.DocCredit : null;
            journalDetail.BaseDebit = detail.BaseDebit != 0 ? detail.BaseDebit : null;
            journalDetail.BaseCredit = detail.BaseCredit != 0 ? detail.BaseCredit : null;
            journalDetail.Disallowable = detail.AllowDisAllow;
            journalDetail.ISDiSAllowShow = coa != null ? coa.Category == "Income Statement" ? true : false : false;
        }
        #endregion

        public string UpdatePosting(UpdatePosting up)
        {
            try
            {
                Log.Logger.ZInfo(JournalConstant.Journal_update_posting);
                var judata = _journalService.Query(x => x.DocumentId == up.Id && x.CompanyId == up.CompanyId).Select().FirstOrDefault();
                if (judata != null)
                {
                    judata.BalanceAmount = up.BalanceAmount;
                    judata.DocumentState = up.DocumentState;
                    judata.AllocatedAmount = up.AllocatedAmount;
                    judata.ModifiedDate = up.ModifiedDate;
                    judata.ModifiedBy = up.ModifiedBy;
                    judata.ObjectState = ObjectState.Modified;
                    _journalService.Update(judata);
                    //JournalDetail jdetail = _journalDetailService.GetJournalDetailById(judata.Id);
                    //if (jdetail != null)
                    //{
                    //    jdetail.AmountDue = judata.BalanceAmount;
                    //    jdetail.ObjectState = ObjectState.Modified;
                    //    _journalDetailService.Update(jdetail);
                    //}
                }
                Log.Logger.ZInfo(JournalConstant.Journal_update_posting_save);
                _UnitOfWorkAsync.SaveChanges();
                
            }
            catch(Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
            return "Journal has updated successfully.";
        }

        #region Recurring_Journal

        public JournalDocModel GetDocDateAndDocNo(Guid id, long companyId, DateTime docDate, DateTime? endDate, string docNo, int frequencyValue)
        {
            bool isSystemDate = false;
            DateTime systemDate = DateTime.UtcNow;
            DateTime lstDocDate = new DateTime();
            bool isDocNoExists = false;

            string documentNo = null;
            int count = 0;
            int counter = 1;
            int i = 0;
            JournalDocModel jDModel = new JournalDocModel();

            if (IsDocumentNumberExists(DocTypeConstants.JournalVocher, docNo, id, companyId, JournalState.Recurring))
            {
                throw new Exception(CommonConstant.Document_number_already_exist);
            }

            List<string> lstPostedJournalDocNo = _journalService.GetPostedJournalsDocNo(companyId, JournalState.Posted);
            List<JournalDocNoModel> lstJournalDocno = new List<JournalDocNoModel>();
            List<JournalDocNoModel> lstJournalDocno1 = new List<JournalDocNoModel>();

            Journal journal = _journalService.GetAllJournalByRecurringId(id, companyId);
            if (journal != null)
            {
                if (journal.Counter != null)
                {


                    //DateTime lastPostedDocDate = new DateTime();
                    docDate = journal.DocumentState == JournalState.Parked ? journal.EndDate.Value : journal.DocDate;
                    counter = journal.Counter.Value;
                    while (isSystemDate == false)
                    {
                        count++;
                        JournalDocNoModel journalDocModel = new JournalDocNoModel();
                        counter++;
                        lstDocDate = docDate.AddMonths(count * frequencyValue);
                        if (endDate >= lstDocDate || endDate == null)
                        {
                            if (systemDate >= lstDocDate)
                            {
                                documentNo = null;
                                journalDocModel.DocDate = lstDocDate;
                                documentNo = docNo + "-" + counter;
                                isDocNoExists = lstPostedJournalDocNo.Where(a => a.Equals(documentNo)).Any();
                                while (isDocNoExists)
                                {
                                    i++;
                                    documentNo = null;
                                    documentNo = docNo + "-" + counter + "-" + i;
                                    if (isDocNoExists == lstPostedJournalDocNo.Where(a => a.Equals(documentNo)).Any() == false)
                                        isDocNoExists = false;
                                }
                                journalDocModel.DocNo = documentNo;
                                jDModel.NextDue = null;
                                //docDate = lstDocDate;
                                lstJournalDocno.Add(journalDocModel);
                            }
                            else
                            {
                                isSystemDate = true;
                                jDModel.NextDue = lstDocDate;
                                //lstJournalDocno.Add(journalDocModel);
                            }
                        }
                        else
                        {
                            isSystemDate = true;
                            jDModel.NextDue = null;
                            //lstJournalDocno.Add(journalDocModel);
                        }
                        //jDModel.JournalDocModels.AddRange(lstJournalDocno);
                    }
                    //return lstJournalDocno.Where(a => a.DocDate != null).OrderBy(a => a.DocDate).ToList();
                    jDModel.JournalDocModels.AddRange(lstJournalDocno);
                    jDModel.JournalDocModels.Where(a => a.DocDate != null).OrderBy(a => a.DocDate).ToList();
                }
                else
                {
                    jDModel.NextDue = journal.NextDue;
                }
                return jDModel;
            }
            else
            {
                if (docDate.Date > DateTime.UtcNow.Date)
                {
                    jDModel.NextDue = docDate;
                }
                else
                {
                    JournalDocNoModel journalDocModel1 = new JournalDocNoModel();
                    journalDocModel1.DocDate = docDate;
                    documentNo = docNo + "-" + 1;
                    isDocNoExists = lstPostedJournalDocNo.Where(a => a.Equals(documentNo)).Any();
                    while (isDocNoExists)
                    {
                        i++;
                        documentNo = null;
                        documentNo = docNo + "-" + 1 + "-" + i;
                        if (isDocNoExists == lstPostedJournalDocNo.Where(a => a.Equals(documentNo)).Any() == false)
                            isDocNoExists = false;
                    }
                    journalDocModel1.DocNo = documentNo;

                    while (isSystemDate == false)
                    {
                        JournalDocNoModel journalDocModel = new JournalDocNoModel();
                        i = 0;
                        counter++;
                        count++;
                        lstDocDate = docDate.AddMonths(count * frequencyValue);
                        if (endDate >= lstDocDate || endDate == null)
                        {
                            if (systemDate >= lstDocDate)
                            {
                                documentNo = null;
                                journalDocModel.DocDate = lstDocDate;
                                documentNo = docNo + "-" + counter;
                                isDocNoExists = lstPostedJournalDocNo.Where(a => a.Equals(documentNo)).Any();
                                while (isDocNoExists)
                                {
                                    i++;
                                    documentNo = null;
                                    documentNo = docNo + "-" + counter + "-" + i;
                                    if (isDocNoExists == lstPostedJournalDocNo.Where(a => a.Equals(documentNo)).Any() == false)
                                        isDocNoExists = false;
                                }
                                journalDocModel.DocNo = documentNo;
                                jDModel.NextDue = null;
                                //docDate = lstDocDate;
                                lstJournalDocno.Add(journalDocModel);
                            }
                            else
                            {
                                isSystemDate = true;
                                jDModel.NextDue = lstDocDate;
                                //if (endDate == null)
                                //    journalDocModel1.NextDue = lstDocDate;
                                //else if (endDate.Value.ToString("MM/yyyy") == lstDocDate.ToString("MM/yyyy"))
                                //    journalDocModel.NextDue = null;
                                //else
                                //    journalDocModel1.NextDue = lstDocDate;
                            }
                        }
                        else
                        {
                            isSystemDate = true;
                            jDModel.NextDue = null;
                        }
                    }
                    lstJournalDocno1.Add(journalDocModel1);
                    jDModel.JournalDocModels.AddRange(lstJournalDocno1);
                    jDModel.JournalDocModels.AddRange(lstJournalDocno);
                }
            }

            jDModel.JournalDocModels.OrderBy(a => a.DocDate).ToList();
            return jDModel;
        }


        public Journal SaveRecurring(JournalModel journalModel, string connectionString)
        {
            bool isAdd = false;
            bool isDocAdd = false;
            try
            {
                var AdditionalInfo = new Dictionary<string, object>();
                AdditionalInfo.Add("Data", JsonConvert.SerializeObject(journalModel));
                Ziraff.FrameWork.Logging.LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, "ObjectSave", AdditionalInfo);

                //bool isAdd = false;
                //DateTime? currentDate = DateTime.UtcNow;
                DateTime? nextPostedDate = new DateTime();
                DateTime? lastPostedDate = new DateTime();
                bool isPosted = false;
                bool IsEdit = false;

                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_SaveRecurringJournal_method);
                string type = "";
                string _errors = CommonValidation.ValidateObject(journalModel);
                if (!string.IsNullOrEmpty(_errors))
                {
                    throw new Exception(_errors);
                }

                if (journalModel.DocDate == null)
                {
                    throw new Exception(CommonConstant.Invalid_Document_Date);
                }

                if (IsDocumentNumberExists(DocTypeConstants.JournalVocher, journalModel.DocNo, journalModel.Id, journalModel.CompanyId, JournalState.Recurring))
                {
                    throw new Exception(CommonConstant.Document_number_already_exist);
                }


                if (journalModel.JournalDetailModels == null || journalModel.JournalDetailModels.Count == 0)
                {
                    throw new Exception(CommonConstant.Atleast_one_line_Item_is_required);
                }
                else
                {
                    int itemCount = journalModel.JournalDetailModels.Where(a => a.RecordStatus != "Deleted").Count();
                    if (itemCount == 0)
                    {
                        throw new Exception(CommonConstant.Atleast_one_line_Item_is_required);
                    }
                }
                if (!_financialSettingService.ValidateYearEndLockDate(journalModel.DocDate, journalModel.CompanyId))
                {
                    throw new Exception(CommonConstant.Transaction_date_is_in_closed_financial_period_and_cannot_be_posted);
                }
                if (!_financialSettingService.ValidateFinancialOpenPeriod(journalModel.DocDate, journalModel.CompanyId))
                {
                    if (String.IsNullOrEmpty(journalModel.PeriodLockPassword))
                    {
                        throw new Exception(CommonConstant.Transaction_date_is_in_locked_accounting_period_and_cannot_be_posted);
                    }
                    else if (!_financialSettingService.ValidateFinancialLockPeriodPassword(journalModel.DocDate, journalModel.PeriodLockPassword, journalModel.CompanyId))
                    {
                        throw new Exception(CommonConstant.Invalid_Financial_Period_Lock_Password);
                    }
                }

                GSTSetting gstSetting = _gSTSettingService.GetByCompanyId(journalModel.CompanyId);
                List<TaxCode> lsttaxCode = _taxCodeService.GetListOfTaxCode(journalModel.CompanyId);
                ChartOfAccount gstAccount = _chartOfAccountService.GetByName(COANameConstants.TaxPayableGST, journalModel.CompanyId);
                ChartOfAccount coa = _chartOfAccountService.GetByName(COANameConstants.Corresponding_Account, journalModel.CompanyId);

                Journal _journal = _journalService.GetAllJournalById(journalModel.Id, journalModel.CompanyId);
                if (_journal != null)
                {
                    //Concurrency data validation
                    string timeStamp = "0x" + string.Concat(Array.ConvertAll(_journal.Version, x => x.ToString("X2")));
                    if (!timeStamp.Equals(journalModel.Version))
                        throw new Exception(CommonConstant.Document_has_been_modified_outside);
                }
                if (journalModel.IsDeleted != true)
                {
                    if (_journal != null)
                    {
                        DateTime? recJournalEndDate = _journal.FrequencyEndDate;
                        if (journalModel.FrequencyEndDate != null)
                        {
                            if (journalModel.FrequencyEndDate != _journal.EndDate)
                                if (journalModel.FrequencyEndDate < _journal.EndDate)
                                {
                                    throw new Exception(JournalConstant.Cannot_give_EndDate_less_than_Last_Posted_Date);
                                }
                        }

                        DateTime? docDate = _journal.DocDate;
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_of_Journal_and_check_Journal_is_null_or_not);
                        type = "Updated";
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.InsertJournal_method_came);
                        InsertRecurringJournal(journalModel, _journal);
                        _journal.DocNo = journalModel.DocNo;
                        _journal.SystemReferenceNo = _journal.DocNo;

                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.UpdateJournalDetails_method_came);
                        List<Guid> newAddedJdIds = new List<Guid>();
                        int? val = 0;
                        UpdateJournalDetails(journalModel, _journal, newAddedJdIds, out val);


                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_UpdateJournalDetails_method);
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.UpdateJournalGSTDetails_method_came);

                        if (journalModel.IsGstSettings == true)
                        {
                            List<JournalDetail> lstGstDetail = _journal.JournalDetails.Where(c => c.IsTax == true).ToList();
                            if (lstGstDetail.Any())
                            {
                                foreach (var gstItem in lstGstDetail)
                                {
                                    gstItem.ObjectState = ObjectState.Deleted;
                                }
                            }
                            AddGSTLineItem(journalModel, _journal, newAddedJdIds);
                        }
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_UpdateJournalGSTDetails_method);
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Calling_Update_method_through_JournalService);
                        _journal.ModifiedDate = DateTime.UtcNow;
                        _journal.ModifiedBy = journalModel.ModifiedBy;
                        _journal.UserCreated = journalModel.UserCreated;


                        long roundingCOAID = _chartOfAccountService.GetByNameAndCompanyId(/*"Rounding Account"*/COANameConstants.Rounding, journalModel.CompanyId);
                        JournalDetail isDetailExists = (roundingCOAID != null || roundingCOAID != 0) ? _journalDetailService.Query(a => a.JournalId == _journal.Id && a.COAId == roundingCOAID).Select().FirstOrDefault() : null;
                        if (isDetailExists != null)
                            isDetailExists.ObjectState = ObjectState.Deleted;

                        decimal? baseDebitTotal = _journal.JournalDetails.Where(a => a.ObjectState != ObjectState.Deleted).Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
                        decimal? baseCreditTotal = _journal.JournalDetails.Where(a => a.ObjectState != ObjectState.Deleted).Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
                        if (baseDebitTotal != baseCreditTotal)
                        {
                            bool? isCredit = null;

                            SaveBalancingBaseDebitandBaseCredit(baseDebitTotal, baseCreditTotal, journalModel, _journal.Id, _journal.DocNo, _journal.DocSubType, out isCredit, true);
                            if (isCredit == true)
                            {
                                _journal.GrandBaseDebitTotal = baseDebitTotal;
                                _journal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                            }
                            else
                            {
                                _journal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                                _journal.GrandBaseCreditTotal = baseCreditTotal;
                            }
                        }
                        else
                        {
                            _journal.GrandBaseDebitTotal = baseDebitTotal;
                            _journal.GrandBaseCreditTotal = baseCreditTotal;
                        }

                        //recurring journal EndDate and NextDue updation
                        if (journalModel.DocumentState != JournalState.Parked)
                        {
                            if (journalModel.FrequencyEndDate != recJournalEndDate)
                            {
                                _journal.NextDue = journalModel.FrequencyEndDate >= _journal.NextDue ? _journal.NextDue : null;
                                _journal.InternalState = _journal.NextDue == null ? "Completed" : _journal.DocumentState;
                            }
                        }

                        _journalService.Update(_journal);

                        IsEdit = true;
                    }
                    else
                    {
                        isAdd = true;
                        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_else_condition_of_journal);
                        type = "Added";
                        int? RecOrder = 0;
                        _journal = new Journal();
                        _journal.Id = Guid.NewGuid();

                        InsertRecurringJournal(journalModel, _journal);

                        _journal.Status = AppsWorld.Framework.RecordStatusEnum.Active;
                        _journal.RecurringJournalId = _journal.Id;
                        _journal.UserCreated = journalModel.UserCreated;
                        _journal.CreatedDate = DateTime.UtcNow;
                        _journal.Status = RecordStatusEnum.Active;
                        _journal.ModifiedBy = null;
                        _journal.ModifiedDate = null;

                        _journal.GSTExCurrency = journalModel.GstReportingCurrency == null ? "SGD" : journalModel.GstReportingCurrency;
                        _journal.GSTExchangeRate = journalModel.GstExchangeRate == null ? 1 : journalModel.GstExchangeRate;
                        journalModel.GstReportingCurrency = _journal.GSTExCurrency;
                        journalModel.GstExchangeRate = _journal.GSTExchangeRate;

                        _journal.SystemReferenceNo = journalModel.IsDocNoEditable != true ? _autoService.GetAutonumber(journalModel.CompanyId, "Recurring Journal", connectionString) : journalModel.DocNo;
                        _journal.ActualSysRefNo = _journal.SystemReferenceNo;
                        isDocAdd = true;
                        _journal.DocNo = _journal.SystemReferenceNo;

                        List<JournalDetail> lstJDetails = new List<JournalDetail>();
                        if (journalModel.JournalDetailModels.Any())
                        {
                            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_JournalDetailModels_count_O_or_nul);
                            foreach (JournalDetailModel detail in journalModel.JournalDetailModels)
                            {
                                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_foreach_loop_of_JournalDetailModels);
                                JournalDetail journalDetail = new JournalDetail();
                                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.FillJournalDetailmodel_method_came);
                                FillJournalDetailmodel(journalDetail, detail, _journal);
                                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_FillJournalDetailmodel_method);
                                journalDetail.JournalId = _journal.Id;
                                journalDetail.ServiceCompanyId = journalModel.ServiceCompanyId;
                                journalDetail.DocDate = journalModel.DocDate;
                                journalDetail.SystemRefNo = _journal.SystemReferenceNo;
                                journalDetail.DocNo = journalModel.DocNo;
                                journalDetail.DocumentDetailId = new Guid();
                                journalDetail.DocType = DocTypeConstants.JournalVocher;
                                journalDetail.DocSubType = DocSubTypeConstants.Recurring;
                                journalDetail.RecOrder = RecOrder + 1;
                                journalDetail.BaseCurrency = journalModel.BaseCurrency;
                                journalDetail.DocCurrency = journalModel.DocCurrency;
                                RecOrder = journalDetail.RecOrder;
                                journalDetail.ObjectState = ObjectState.Added;
                                _journalDetailService.Insert(journalDetail);
                                lstJDetails.Add(journalDetail);
                                if (journalModel.IsGstSettings == true && journalDetail.TaxRate != null)
                                {
                                    JournalDetail journalGstDetail = new JournalDetail();
                                    journalGstDetail.Id = Guid.NewGuid();
                                    FillJvGstDetail(_journal, journalGstDetail, detail);
                                    journalGstDetail.RecOrder = detail.RecOrder;
                                    journalGstDetail.DocumentDetailId = journalDetail.Id;
                                    if (gstAccount != null)
                                    {
                                        journalGstDetail.AccountName = gstAccount.Name;
                                        journalGstDetail.COAId = gstAccount.Id;
                                    }
                                    journalGstDetail.ObjectState = ObjectState.Added;
                                    _journalDetailService.Insert(journalGstDetail);
                                    lstJDetails.Add(journalGstDetail);
                                }
                            }
                            decimal? baseDebitTotal = lstJDetails.Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
                            decimal? baseCreditTotal = lstJDetails.Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
                            if (baseDebitTotal != baseCreditTotal)
                            {
                                bool? isCredit = null;
                                SaveBalancingBaseDebitandBaseCredit(baseDebitTotal, baseCreditTotal, journalModel, _journal.Id, _journal.DocNo, _journal.DocSubType, out isCredit, false);
                                if (isCredit == true)
                                {
                                    _journal.GrandBaseDebitTotal = baseDebitTotal;
                                    _journal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                                }
                                else
                                {
                                    _journal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                                    _journal.GrandBaseCreditTotal = baseCreditTotal;
                                }
                            }
                            else
                            {
                                _journal.GrandBaseDebitTotal = baseDebitTotal;
                                _journal.GrandBaseCreditTotal = baseCreditTotal;
                            }
                        }
                        _journal.ObjectState = ObjectState.Added;
                        _journalService.Insert(_journal);
                        IsEdit = false;
                    }
                }
                else
                {
                    _journal.Status = RecordStatusEnum.Disable;
                    _journal.InternalState = "Deleted";
                    _journal.ObjectState = ObjectState.Modified;
                    _journalService.Update(_journal);
                }
                try
                {
                    #region DocumentAttachment_Save_Call
                    if (isAdd == true)
                    {
                        if (journalModel.TileAttachments != null && journalModel.TileAttachments.Count() > 0)
                        {
                            string DocuNo = _commonApplicationService.StringCharactersReplaceFunction(_journal.DocNo);
                            //         _journal.DocNo.Replace('"', '_').Replace('\\', '_').Replace('/', '_')
                            //.Replace(':', '_').Replace('|', '_').Replace('<', '_').Replace('>', '_').Replace('*', '_').Replace('?', '_').Replace("'", "_");
                            string path = DocumentConstants.Journals + "/" + DocuNo;
                            SaveTailsAttachments(journalModel.CompanyId, path, journalModel.UserCreated, journalModel.TileAttachments);
                        }
                    }
                    #endregion
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entering_into_try_block_and_execute_the_SaveChanges_method);
                }
                catch (Exception ex)
                {
                    LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message); throw;
                }
                try
                {
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entering_into_try_block_and_execute_the_SaveChanges_method);
                }
                catch (Exception ex)
                {
                    LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message); throw;
                }
                if (!IsEdit)
                {
                    if (journalModel.DocDate.Date <= DateTime.UtcNow.Date)
                    {

                        if (!IsEdit)
                            SavePostedJournalFromRecurring(journalModel, _journal, gstAccount);
                        if (journalModel.DocSubType == DocSubTypeConstants.General && journalModel.RecurringJournalId == null)
                            SavePostedJournalFromRecurring(journalModel, _journal, gstAccount);
                        int? counter = 0;

                        if (IsEdit)
                        {
                            lastPostedDate = _journal.EndDate != null ? _journal.EndDate : journalModel.DocDate;
                        }
                        else
                        {
                            lastPostedDate = journalModel.DocDate;
                            counter = 0;
                        }

                        int? count = IsEdit ? _journal.Counter == null ? 1 : _journal.Counter : 1;
                        while (!isPosted)
                        {
                            count++;
                            counter++;
                            nextPostedDate = lastPostedDate.Value.AddMonths(counter.Value * journalModel.FrequencyValue.Value);

                            if (journalModel.FrequencyEndDate >= nextPostedDate || journalModel.FrequencyEndDate == null)
                            {
                                if (DateTime.UtcNow >= nextPostedDate)
                                {
                                    SavePostedJournal(journalModel, _journal, nextPostedDate, gstSetting, lsttaxCode, gstAccount, count);
                                }
                                else
                                {
                                    _journal.LastPosted = nextPostedDate.Value.AddMonths(-journalModel.FrequencyValue.Value);
                                    _journal.NextDue = nextPostedDate;
                                    _journal.EndDate = _journal.LastPosted;
                                    _journal.Counter = count - 1;
                                    _journal.InternalState = "In Progress";
                                    isPosted = true;
                                }
                            }
                            else
                            {
                                _journal.LastPosted = nextPostedDate.Value.AddMonths(-journalModel.FrequencyValue.Value);
                                _journal.EndDate = nextPostedDate.Value.AddMonths(-journalModel.FrequencyValue.Value);
                                _journal.Counter = count - 1;
                                _journal.InternalState = "Completed";
                                _journal.NextDue = null;
                                isPosted = true;
                            }
                        }

                        _journal.ObjectState = ObjectState.Modified;
                        _journalService.Update(_journal);
                        _UnitOfWorkAsync.SaveChanges();
                    }
                    else
                    {
                        _journal.NextDue = journalModel.DocDate;
                        _journal.InternalState = "In Progress";
                        _journal.Counter = null;
                        _journal.EndDate = journalModel.DocDate;
                        _journalService.Insert(_journal);
                        _UnitOfWorkAsync.SaveChanges();

                    }
                }
                else
                {
                    _UnitOfWorkAsync.SaveChanges();
                }
                return _journal;
            }
            catch (Exception)
            {
                if (isAdd && isDocAdd)
                {
                    query = string.Empty;
                    query = $"Update Bean.AutoNumber AT set AT.GeneratedNumber=(Select GeneratedNumber from Bean.AutoNumber where CompanyId={journalModel.CompanyId} and ModuleMasterId=4 and EntityType='{journalModel.DocType}')-1  where CompanyId={journalModel.CompanyId} and ModuleMasterId=(SELECT  m.Id FROM Common.ModuleMaster as m WHERE Name = 'Bean Cursor' and CompanyId = 0) and EntityType='{journalModel.DocType}'";

                    using (con = new SqlConnection(connectionString))
                    {
                        if (con.State != ConnectionState.Open)
                            con.Open();
                        try
                        {
                            cmd = new SqlCommand(query, con);
                            cmd.ExecuteNonQuery();
                            if (con.State == ConnectionState.Open)
                                con.Close();
                        }
                        catch (Exception e)
                        {
                            con.Close();
                            throw e;
                        }
                    }
                }
                throw;
            }
        }

        private void InsertRecurringJournal(JournalModel journalModel, Journal _journal)
        {
            _journal.DocNo = journalModel.DocNo;
            _journal.DocumentDescription = journalModel.DocDescription;
            _journal.DocType = DocTypeConstants.JournalVocher;
            _journal.DocCurrency = journalModel.DocCurrency;
            _journal.DocSubType = DocSubTypeConstants.Recurring;
            _journal.DocumentState = JournalState.Recurring;
            _journal.FrequencyEndDate = journalModel.FrequencyEndDate;
            _journal.FrequencyType = journalModel.FrequencyType;
            _journal.FrequencyValue = journalModel.FrequencyValue;
            _journal.DocDate = journalModel.DocDate.Date;
            _journal.CompanyId = journalModel.CompanyId;
            _journal.IsShow = true;
            _journal.PostingDate = journalModel.DocDate.Date;
            _journal.ExCurrency = journalModel.BaseCurrency;
            _journal.ServiceCompanyId = journalModel.ServiceCompanyId;
            _journal.IsBaseCurrencyRateChanged = journalModel.IsBaseCurrencyRateChanged;
            _journal.IsGSTCurrencyRateChanged = journalModel.IsGSTCurrencyRateChanged;
            _journal.IsMultiCurrency = journalModel.ISMultiCurrency;
            _journal.NoSupportingDocument = journalModel.NoSupportingDocument;
            _journal.IsNoSupportingDocs = journalModel.IsNoSupportingDocument;
            _journal.UserCreated = journalModel.UserCreated;
            _journal.DueDate = null;
            _journal.Remarks = journalModel.Remarks;
            _journal.ExchangeRate = journalModel.ExchangeRate;
            _journal.ExDurationFrom = journalModel.ExDurationFrom;
            _journal.ExDurationTo = journalModel.exDurationTo;
            _journal.IsBaseCurrencyRateChanged = journalModel.IsBaseCurrencyRateChanged;
            _journal.IsRecurringJournal = journalModel.IsRecurringJournal;
            _journal.RecurringJournalName = journalModel.RecurringJournalName;
            _journal.IsAutoReversalJournal = journalModel.IsAutoReversalJournal;
            _journal.CreationType = "Manual";
            _journal.IsPostChecked = journalModel.IsPostChecked;
            _journal.GSTExCurrency = journalModel.GstReportingCurrency;
            _journal.IsGstSettings = journalModel.IsGstSettings;
            if (journalModel.IsGstSettings == true)
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_IsGstSettings_is_present_or_not);
                _journal.GSTExchangeRate = journalModel.GstExchangeRate;
                _journal.GSTExDurationFrom = journalModel.GstdurationFrom;
                _journal.GSTExDurationTo = journalModel.GstDurationTo;
            }
            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Check_GetModuleStatus_method_through_CompanySettingService_and_store_into_IsSegmentReporting);

            _journal.GrandDocCreditTotal = (journalModel.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocCredit)) + (journalModel.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocTaxCredit));
            _journal.GrandDocDebitTotal = (journalModel.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocDebit)) + (journalModel.JournalDetailModels.Where(x => x.RecordStatus != "Deleted").Sum(x => x.DocTaxDebit));

            if (_journal.GrandDocCreditTotal != _journal.GrandDocDebitTotal)
            {
                throw new Exception(JournalConstant.Total_debit_must_equal_to_total_credit);
            }

            LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.End_of_the_InsertJournal_method);
        }

        private void SavePostedJournal(JournalModel journalModel, Journal _journal, DateTime? NextDue, GSTSetting gstSetting, List<TaxCode> lsttaxCode, ChartOfAccount gstAccount, int? count)
        {

            List<JournalDetail> jDetail = new List<JournalDetail>();
            Journal newJournal = new Journal();
            newJournal.Id = Guid.NewGuid();
            newJournal.DocumentId = newJournal.Id;
            newJournal.DocType = DocTypeConstants.JournalVocher;
            //newJournal.IsAutoReversalJournal = true;
            //InsertJournal(newJournal, journalModel);

            //SaveHistory(newJournal, "Added");

            //JvActivityLog jvactivity = new JvActivityLog();
            //jvactivity.Id = Guid.NewGuid();
            //jvactivity.JvId = newJournal.Id;
            //jvactivity.Status = JournalState.Posted;
            //jvactivity.CreatedBy = journalModel.UserCreated;
            //jvactivity.CreatedDate = DateTime.UtcNow;
            //jvactivity.ObjectState = ObjectState.Added;
            //_jvactivitylogservice.Insert(jvactivity);


            newJournal.DocCurrency = _journal.DocCurrency;
            newJournal.CompanyId = _journal.CompanyId;
            newJournal.ServiceCompanyId = _journal.ServiceCompanyId;
            newJournal.IsAllowableNonAllowable = _journal.IsAllowableNonAllowable;
            newJournal.ISAllowDisAllow = _journal.ISAllowDisAllow;
            newJournal.IsBaseCurrencyRateChanged = _journal.IsBaseCurrencyRateChanged;
            newJournal.IsGSTCurrencyRateChanged = _journal.IsGSTCurrencyRateChanged;

            newJournal.IsMultiCurrency = journalModel.ISMultiCurrency;
            newJournal.NoSupportingDocument = _journal.NoSupportingDocument;
            newJournal.IsNoSupportingDocument = _journal.IsNoSupportingDocument;
            newJournal.IsNoSupportingDocs = _journal.IsNoSupportingDocs;
            newJournal.IsAutoReversalJournal = false;
            newJournal.ExCurrency = _journal.ExCurrency;
            newJournal.DueDate = null;
            newJournal.Remarks = _journal.Remarks;
            newJournal.IsShow = _journal.IsShow;
            newJournal.GSTExCurrency = _journal.GSTExCurrency;
            newJournal.DocDate = _journal.DocDate;

            //newJournal.ExchangeRate = journalModel.BaseCurrency == journalModel.DocCurrency ? 1.0000000000m : _financialService.GetExRateInformation(journalModel.DocCurrency, NextDue, journalModel.CompanyId);//commented on 01/06/2020

            newJournal.ExchangeRate = journalModel.BaseCurrency == journalModel.DocCurrency ? 1.0000000000m : GetExRateInformation(newJournal.DocCurrency, journalModel.BaseCurrency, newJournal.DocDate, newJournal.CompanyId);

            newJournal.GSTExchangeRate = newJournal.GSTExCurrency == newJournal.DocCurrency ? 1.0000000000m : GetExRateInformation(newJournal.DocCurrency, journalModel.GstReportingCurrency, newJournal.DocDate, newJournal.CompanyId);


            newJournal.CreationType = "Manual";
            //journalNew.ReverseParentRefId = TObject.ReverseParentRefId;
            //journalNew.ReverseChildRefId = TObject.ReverseChildRefId;

            if (journalModel.IsGstSettings == true)
            {
                if (/*_journal.IsGstSettings &&*/ gstSetting.IsDeregistered != true)
                {
                    newJournal.IsGstSettings = _journal.IsGstSettings;
                    LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Enter_into_if_condition_and_checking_IsGstSettings_is_present_or_not);

                    //newJournal.GSTExchangeRate = newJournal.ExCurrency == newJournal.DocCurrency ? 1.0000000000m : _financialService.GetExRateInformation(newJournal.GSTExCurrency, NextDue, journalModel.CompanyId);



                }
                else
                    newJournal.IsGstSettings = /*gstSetting.IsDeregistered != true ? true :*/ false;
            }
            else
                newJournal.IsGstSettings = false;

            //newJournal.IsSegmentReporting = _journal.IsSegmentReporting;
            //newJournal.SegmentMasterid1 = _journal.SegmentMasterid1;
            //newJournal.SegmentDetailid1 = _journal.SegmentDetailid1;
            //newJournal.SegmentCategory1 = _journal.SegmentCategory1;
            //newJournal.SegmentMasterid2 = _journal.SegmentMasterid2;
            //newJournal.SegmentDetailid2 = _journal.SegmentDetailid2;
            //newJournal.SegmentCategory2 = _journal.SegmentCategory2;

            newJournal.DocumentDescription = journalModel.DocDescription != null ? journalModel.DocDescription + "-" + count : journalModel.DocDescription;
            newJournal.DocumentState = JournalState.Posted;
            newJournal.DocSubType = DocSubTypeConstants.Recurring;
            newJournal.Counter = count;
            count = newJournal.Counter;
            newJournal.DocDate = NextDue.Value;
            newJournal.PostingDate = NextDue;
            //newJournal.FrequencyEndDate = _journal.FrequencyEndDate;
            //newJournal.FrequencyType = _journal.FrequencyType;
            //newJournal.IsRecurringJournal = true;
            newJournal.Status = RecordStatusEnum.Active;
            newJournal.RecurringJournalId = _journal.Id;
            newJournal.CreatedDate = DateTime.UtcNow;
            newJournal.UserCreated = "System";
            //newJournal.DocumentState = JournalState.Posted;
            newJournal.EndDate = NextDue;
            newJournal.ModifiedDate = null;
            newJournal.ModifiedBy = null;
            //newJournal.SystemReferenceNo = journalModel.IsDocNoEditable != true ? GenerateAutoNumberForType(journalModel.CompanyId, DocTypeConstants.JournalVocher, DocSubTypeConstants.General, DocTypeConstants.JournalVocher, null) : GetDocNoForPostedJournal(_journal.CompanyId, _journal.DocNo + "-" + count);
            newJournal.SystemReferenceNo = GetDocNoForPostedJournal(_journal.CompanyId, _journal.DocNo + "-" + count);
            newJournal.ActualSysRefNo = newJournal.SystemReferenceNo;
            //newJournal.SystemReferenceNo = journal.SystemReferenceNo;

            //newJournal.DocNo = GetDocNoForPostedJournal(_journal.CompanyId, _journal.DocNo + "-" + count);
            newJournal.DocNo = newJournal.SystemReferenceNo;
            //newJournal.DocNo = GetDocumentNo(journalModel, JournalState.Posted);


            //newJournal.ObjectState = ObjectState.Added;
            //_journalService.Insert(newJournal);


            int? recOrder = 0;
            List<JournalDetail> lstJDetails = new List<JournalDetail>();
            foreach (var detail in journalModel.JournalDetailModels)
            {
                recOrder++;
                JournalDetail journalDetail = new JournalDetail();
                journalDetail.Id = Guid.NewGuid();
                journalDetail.JournalId = newJournal.Id;
                journalDetail.DocumentId = newJournal.Id;
                //FillJournalDetailmodel(journalDetail, detail, _journal);
                journalDetail.DocCredit = detail.DocCredit;
                journalDetail.DocCreditTotal = detail.DocCreditTotal;
                journalDetail.DocDebit = detail.DocDebit;
                journalDetail.DocDebitTotal = detail.DocDebitTotal;
                journalDetail.ExchangeRate = newJournal.ExchangeRate;
                //bool? isGstActivated = gstSetting != null ? gstSetting.IsDeregistered : false;
                if (detail.TaxId != null && newJournal.IsGstSettings == true)
                {
                    if (gstSetting.IsDeregistered != true)
                    {
                        journalDetail.GSTExchangeRate = newJournal.GSTExchangeRate;
                        bool isGstLineItem = false;
                        GetGstReporting(journalModel, NextDue, gstSetting, lsttaxCode, journalDetail, detail, isGstLineItem, journalDetail);
                    }
                    else
                    {
                        if (journalDetail.DocDebit >= 0)
                        {
                            journalDetail.BaseDebit = Math.Round((decimal)newJournal.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * newJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                            journalDetail.GSTDebit = Math.Round((decimal)newJournal.GSTExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * newJournal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else if (journalDetail.DocCredit >= 0)
                        {
                            journalDetail.BaseCredit = Math.Round((decimal)newJournal.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * newJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                            journalDetail.GSTCredit = Math.Round((decimal)newJournal.GSTExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * newJournal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }

                }
                else
                {
                    if (journalDetail.DocDebit >= 0)
                    {
                        journalDetail.BaseDebit = Math.Round((decimal)newJournal.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * newJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                        journalDetail.GSTDebit = Math.Round((decimal)newJournal.GSTExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * newJournal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                    }
                    else if (journalDetail.DocCredit >= 0)
                    {
                        journalDetail.BaseCredit = Math.Round((decimal)newJournal.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * newJournal.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                        journalDetail.GSTCredit = Math.Round((decimal)newJournal.GSTExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * newJournal.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                    }
                }
                journalDetail.GSTDebit = journalDetail.DocTaxDebit != null ? Math.Round(((decimal)(journalDetail.DocTaxDebit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                journalDetail.GSTCredit = journalDetail.DocTaxCredit != null ? Math.Round(((decimal)(journalDetail.DocTaxCredit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;

                journalDetail.GSTTaxDebit = journalDetail.DocDebit != null ? Math.Round(((decimal)(journalDetail.DocDebit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;
                journalDetail.GSTTaxCredit = journalDetail.DocCredit != null ? Math.Round(((decimal)(journalDetail.DocCredit * (newJournal.GSTExchangeRate != null ? newJournal.GSTExchangeRate : 1))), 2, MidpointRounding.AwayFromZero) : (decimal?)null;



                journalDetail.DocumentAmount = detail.DocumentAmount;
                journalDetail.AccountDescription = detail.AccountDescription;
                //journalDetail.AllowDisAllow = detail.AllowDisAllow;
                //journalDetail.BaseCredit = detail.BaseCredit;
                //journalDetail.BaseDebit = detail.BaseDebit;
                //journalDetail.BaseTaxCredit = detail.BaseTaxCredit;
                //journalDetail.BaseTaxDebit = detail.BaseTaxDebit;
                journalDetail.PostingDate = NextDue;

                //journalDetail.SegmentCategory1 = _journal.SegmentCategory1;
                //journalDetail.SegmentCategory2 = _journal.SegmentCategory2;
                //journalDetail.SegmentMasterid1 = _journal.SegmentMasterid1;
                //journalDetail.SegmentMasterid2 = _journal.SegmentMasterid2;
                //journalDetail.SegmentDetailid1 = _journal.SegmentDetailid1;
                //journalDetail.SegmentDetailid2 = _journal.SegmentDetailid2;
                journalDetail.COAId = detail.COAId;

                //journalDetail.DocTaxCredit = detail.DocTaxCredit;
                //journalDetail.DocTaxDebit = detail.DocTaxDebit;
                //journalDetail.BaseCreditTotal = detail.BaseCreditTotal;
                //journalDetail.BaseDebitTotal = detail.BaseDebitTotal;
                journalDetail.IsPLAccount = detail.IsPLAccount;

                journalDetail.EntityId = detail.EntityId;
                journalDetail.JournalId = newJournal.Id;
                journalDetail.ServiceCompanyId = _journal.ServiceCompanyId;
                journalDetail.DocDate = newJournal.DocDate;
                journalDetail.SystemRefNo = newJournal.SystemReferenceNo;
                journalDetail.DocNo = newJournal.DocNo;
                journalDetail.DocumentDetailId = new Guid();
                journalDetail.DocType = DocTypeConstants.JournalVocher;
                journalDetail.DocSubType = DocSubTypeConstants.Recurring;
                journalDetail.RecOrder = recOrder;
                journalDetail.BaseCurrency = journalModel.BaseCurrency;
                journalDetail.DocCurrency = journalModel.DocCurrency;
                recOrder = journalDetail.RecOrder;

                if (journalModel.IsGstSettings == true)
                {
                    if (gstSetting.IsDeregistered != true && journalDetail.TaxRate != null)
                    {
                        JournalDetail journalGstDetail = new JournalDetail();
                        journalGstDetail.Id = Guid.NewGuid();
                        journalGstDetail.JournalId = newJournal.Id;
                        journalGstDetail.DocumentId = newJournal.Id;
                        journalGstDetail.PostingDate = newJournal.PostingDate;
                        journalGstDetail.DocCredit = detail.DocCredit;
                        journalGstDetail.DocCreditTotal = detail.DocCreditTotal;
                        journalGstDetail.DocDebit = detail.DocDebit;
                        journalGstDetail.DocDebitTotal = detail.DocDebitTotal;
                        journalGstDetail.GSTExchangeRate = newJournal.GSTExchangeRate;
                        journalGstDetail.Nature = _journal.Nature;
                        journalGstDetail.ServiceCompanyId = _journal.ServiceCompanyId;
                        journalGstDetail.DocNo = newJournal.DocNo;
                        journalGstDetail.SystemRefNo = newJournal.SystemReferenceNo;
                        journalGstDetail.DocType = DocTypeConstants.JournalVocher;
                        journalGstDetail.AccountDescription = newJournal.DocumentDescription;
                        journalGstDetail.DocDate = newJournal.DocDate;
                        journalGstDetail.DocSubType = newJournal.DocSubType;
                        //_chartOfAccountRepository.Query(a => a.Id == detail.COAId).Select().FirstOrDefault();
                        journalGstDetail.DocCurrency = _journal.DocCurrency;
                        journalGstDetail.BaseCurrency = _journal.ExCurrency;
                        journalGstDetail.ExchangeRate = newJournal.ExchangeRate;
                        journalGstDetail.GSTExCurrency = _journal.GSTExCurrency;
                        bool isGstLineItem = true;
                        GetGstReporting(journalModel, NextDue, gstSetting, lsttaxCode, journalGstDetail, detail, isGstLineItem, journalGstDetail);
                        journalGstDetail.RecOrder = detail.RecOrder;
                        journalGstDetail.DocumentDetailId = journalDetail.Id;
                        if (gstAccount != null)
                        {
                            journalGstDetail.AccountName = gstAccount.Name;
                            journalGstDetail.COAId = gstAccount.Id;
                        }
                        journalGstDetail.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(journalGstDetail);
                        lstJDetails.Add(journalGstDetail);
                    }
                }

                journalDetail.ObjectState = ObjectState.Added;
                _journalDetailService.Insert(journalDetail);
                lstJDetails.Add(journalDetail);
                jDetail.Add(journalDetail);
            }

            decimal? baseDebitTotal = lstJDetails.Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
            decimal? baseCreditTotal = lstJDetails.Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
            if (baseDebitTotal != baseCreditTotal)
            {
                bool? isCredit = null;
                SaveBalancingBaseDebitandBaseCredit(baseDebitTotal, baseCreditTotal, journalModel, newJournal.Id, newJournal.DocNo, newJournal.DocSubType, out isCredit, false);
                if (isCredit == true)
                {
                    newJournal.GrandBaseDebitTotal = baseDebitTotal;
                    newJournal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                }
                else
                {
                    newJournal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                    newJournal.GrandBaseCreditTotal = baseCreditTotal;
                }
            }
            else
            {
                newJournal.GrandBaseDebitTotal = baseDebitTotal;
                newJournal.GrandBaseCreditTotal = baseCreditTotal;
            }

            newJournal.GrandDocCreditTotal = jDetail.Sum(a => a.DocCredit) + jDetail.Sum(a => a.DocTaxCredit);
            newJournal.GrandDocDebitTotal = jDetail.Sum(a => a.DocDebit) + jDetail.Sum(a => a.DocTaxDebit);
            //newJournal.GrandBaseCreditTotal = jDetail.Sum(a => a.BaseCredit) + jDetail.Sum(a => a.BaseTaxCredit);
            //newJournal.GrandBaseDebitTotal = jDetail.Sum(a => a.BaseDebit) + jDetail.Sum(a => a.BaseTaxDebit);
            //Newly Added by Pradhan based on Cindi on 23/12/2022
            if ((newJournal.GrandDocCreditTotal != newJournal.GrandDocDebitTotal) || (newJournal.GrandBaseCreditTotal != newJournal.GrandBaseDebitTotal))
                newJournal.DocumentState = JournalConstant.Parked;
            newJournal.ObjectState = ObjectState.Added;
            _journalService.Insert(newJournal);

            #region commented_code
            //if (_journal.IsGstSettings)
            //{

            //    foreach (var detail in journalModel.JournalDetailModels)
            //    {

            //    }

            //}

            //if (journalModel.JournalGSTDetails != null)
            //{
            //    foreach (var gstdetail in journalModel.JournalGSTDetails)
            //    {
            //        //JournalGSTDetail gstDetail = new JournalGSTDetail();
            //        //gstDetail.Id = Guid.NewGuid();
            //        //gstDetail.JournalId = journal.Id;
            //        JournalGSTDetail journalGSTDetail = new JournalGSTDetail();
            //        journalGSTDetail.Id = Guid.NewGuid();
            //        journalGSTDetail.JournalId = newJournal.Id;
            //        journalGSTDetail.TaxAmount = gstdetail.TaxAmount;
            //        //journalGSTDetail.TaxCode = gstdetail.TaxCode;
            //        journalGSTDetail.TaxId = gstdetail.TaxId;
            //        journalGSTDetail.TotalAmount = gstdetail.TotalAmount;
            //        journalGSTDetail.ObjectState = ObjectState.Added;
            //        _journalGSTDetailService.Insert(journalGSTDetail);

            //    }
            //}

            #endregion commented_code


            try
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entering_into_try_block_and_execute_the_SaveChanges_method);
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            { LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message); throw ex; }
            #region commented_analytics_code
            //if (newJournal.JournalDetails.Any())
            //{

            //    if (coa != null)
            //    {
            //        if (journalModel.JournalDetailModels.Count == 1)
            //        {
            //            foreach (var lstcoa in newJournal.JournalDetails.Where(a => (a.IsTax == false || a.IsTax == null)))
            //            {
            //                lstcoa.CorrAccountId = lstcoa.COAId;
            //                lstcoa.ObjectState = ObjectState.Modified;
            //                _journalDetailService.Update(lstcoa);
            //            }
            //        }
            //        else if (journalModel.JournalDetailModels.Count == 2)
            //        {
            //            long firstCoa = newJournal.JournalDetails.Where(a => (a.RecOrder == 1 || a.RecOrder == null) && (a.IsTax == false || a.IsTax == null)).Select(a => a.COAId).FirstOrDefault();
            //            long secondCoa = newJournal.JournalDetails.Where(a => (a.RecOrder == 2 || a.RecOrder == null) && (a.IsTax == false || a.IsTax == null)).Select(a => a.COAId).FirstOrDefault();
            //            foreach (var lstcoa in newJournal.JournalDetails.Where(a => (a.IsTax == false || a.IsTax == null)))
            //            {
            //                lstcoa.CorrAccountId = lstcoa.RecOrder == 1 ? secondCoa : firstCoa;
            //                //if (lstcoa.CorrAccountId == 0)
            //                //    lstcoa.CorrAccountId = _journal.JournalDetails.Where(a => a.RecOrder == null).Select(a => a.COAId).FirstOrDefault();
            //                lstcoa.ObjectState = ObjectState.Modified;
            //                _journalDetailService.Update(lstcoa);
            //            }
            //        }
            //        else
            //        {
            //            foreach (var lstcoa in newJournal.JournalDetails.Where(a => (a.IsTax == false || a.IsTax == null)))
            //            {
            //                lstcoa.CorrAccountId = coa.Id;
            //                lstcoa.ObjectState = ObjectState.Modified;
            //                _journalDetailService.Update(lstcoa);
            //            }
            //        }
            //    }
            //    try
            //    {
            //        LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entering_into_try_block_and_execute_the_SaveChanges_method);
            //        _UnitOfWorkAsync.SaveChanges();
            //    }
            //    catch (Exception ex)
            //    { LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message); throw; }
            //}
            #endregion

        }

        private void GetGstReporting(JournalModel journalModel, DateTime? nextPostedDate, GSTSetting gstSetting, List<TaxCode> lsttaxCode, JournalDetail journalDetail, JournalDetailModel jDModel, bool isGstLineItem, JournalDetail oldDetail)
        {
            if (/*gstSetting.IsDeregistered == true ||*/ gstSetting.IsDeregistered == false || gstSetting.IsDeregistered == null)
            {
                //if (gstSetting.DeRegistration >= nextPostedDate || gstSetting.DeRegistration == null)
                //{
                TaxCode taxCode = lsttaxCode.Where(a => a.Id == jDModel.TaxId).FirstOrDefault();
                var taxCodes = lsttaxCode.Where(a => a.Code == taxCode.Code && a.EffectiveFrom <= nextPostedDate && (a.EffectiveTo >= nextPostedDate || a.EffectiveTo == null)).FirstOrDefault();
                if (taxCodes != null)
                {
                    //journalDetail.IsTax = true;
                    journalDetail.TaxId = taxCodes.Id;
                    journalDetail.TaxRate = taxCodes.TaxRate;
                    journalDetail.TaxType = taxCodes.TaxType;
                    if (isGstLineItem == false)
                        if (journalDetail.DocDebit >= 0)
                        {
                            journalDetail.DocTaxDebit = (taxCodes.TaxRate != null && taxCodes.TaxRate != 0) ? Math.Round(((decimal)jDModel.DocDebit * Convert.ToDecimal(journalDetail.TaxRate) / 100), 2, MidpointRounding.AwayFromZero) : 0;
                            journalDetail.BaseTaxDebit = Math.Round((decimal)oldDetail.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxDebit : (decimal)(journalDetail.DocTaxDebit * oldDetail.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                            journalDetail.BaseDebit = Math.Round((decimal)oldDetail.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * oldDetail.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                        }
                    if (isGstLineItem == false)
                        if (journalDetail.DocCredit >= 0)
                        {
                            journalDetail.DocTaxCredit = (taxCodes.TaxRate != null && taxCodes.TaxRate != 0) ? Math.Round(((decimal)jDModel.DocCredit * Convert.ToDecimal(journalDetail.TaxRate) / 100), 2, MidpointRounding.AwayFromZero) : 0;
                            journalDetail.BaseTaxCredit = Math.Round((decimal)oldDetail.GSTExchangeRate == null ? (decimal)journalDetail.DocTaxCredit : (decimal)(journalDetail.DocTaxCredit * oldDetail.GSTExchangeRate), 2, MidpointRounding.AwayFromZero);
                            journalDetail.BaseCredit = Math.Round((decimal)oldDetail.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * oldDetail.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                        }

                    if (isGstLineItem)
                    {
                        journalDetail.IsTax = true;
                        //journalDetail.BaseDebit=

                        if (jDModel.DocDebit >= 0)
                        {
                            journalDetail.DocDebit = (taxCodes.TaxRate != null && taxCodes.TaxRate != 0) ? Math.Round(((decimal)jDModel.DocDebit * Convert.ToDecimal(journalDetail.TaxRate) / 100), 2, MidpointRounding.AwayFromZero) : 0;
                            journalDetail.BaseDebit = Math.Round((decimal)oldDetail.ExchangeRate == null ? (decimal)journalDetail.DocDebit : (decimal)(journalDetail.DocDebit * oldDetail.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                            // journalDetail.GSTDebit = (oldDetail.GSTExchangeRate != null && oldDetail.GSTExchangeRate != 0) ? journalDetail.DocDebit == 0 ? 0 : journalDetail.DocDebit * oldDetail.GSTExchangeRate : journalDetail.DocDebit;
                        }
                        if (jDModel.DocCredit >= 0)
                        {
                            journalDetail.DocCredit = (taxCodes.TaxRate != null && taxCodes.TaxRate != 0) ? Math.Round(((decimal)jDModel.DocCredit * Convert.ToDecimal(journalDetail.TaxRate) / 100), 2, MidpointRounding.AwayFromZero) : 0;
                            journalDetail.BaseCredit = Math.Round((decimal)oldDetail.ExchangeRate == null ? (decimal)journalDetail.DocCredit : (decimal)(journalDetail.DocCredit * oldDetail.ExchangeRate), 2, MidpointRounding.AwayFromZero);
                            //journalDetail.GSTCredit = (oldDetail.GSTExchangeRate != null && oldDetail.GSTExchangeRate != 0) ? journalDetail.DocCredit == 0 ? 0 : journalDetail.DocCredit * oldDetail.GSTExchangeRate : journalDetail.DocCredit;
                        }
                    }
                    //}
                }
            }
        }

        private string GetDocNoForPostedJournal(long companyId, string recDocNo)
        {
            List<string> lstDocNo = _journalService.GetPostedJournalsDocNo(companyId, JournalState.Posted);
            string documentNo = null;
            string newDocNo = null;
            if (lstDocNo.Any())
            {
                int count = 0;
                string docNo = recDocNo;
                bool isExist = lstDocNo.Where(a => a.Equals(docNo)).Any();
                while (isExist)
                {
                    count++;
                    documentNo = recDocNo + "-" + count;
                    if ((lstDocNo.Where(a => a.Equals(documentNo)).Any()) == false)
                        isExist = false;
                }
                newDocNo = documentNo ?? docNo;
            }
            else
                newDocNo = recDocNo;
            return newDocNo;
        }


        private void SavePostedJournalFromRecurring(JournalModel tObject, Journal _journal, ChartOfAccount gstAccount)
        {
            Journal newJournal = new Journal();
            newJournal.Id = Guid.NewGuid();
            newJournal.DocumentId = newJournal.Id;
            tObject.IsRecurringJournal = false;
            InsertJournal(newJournal, tObject);
            newJournal.DocumentDescription = tObject.DocDescription != null ? tObject.DocDescription + "-" + 1 : tObject.DocDescription;
            newJournal.IsRecurringJournal = false;
            newJournal.FrequencyEndDate = null;
            newJournal.FrequencyType = null;
            newJournal.FrequencyValue = null;
            newJournal.DocSubType = DocSubTypeConstants.Recurring;
            newJournal.Status = RecordStatusEnum.Active;
            newJournal.RecurringJournalId = _journal.Id;
            newJournal.SystemReferenceNo = GetDocNoForPostedJournal(_journal.CompanyId, _journal.DocNo + "-" + 1);
            newJournal.ActualSysRefNo = newJournal.SystemReferenceNo;
            newJournal.CreatedDate = DateTime.UtcNow;
            newJournal.ModifiedBy = null;
            newJournal.ModifiedDate = null;
            newJournal.EndDate = tObject.DocDate;
            newJournal.CreationType = "Manual";
            newJournal.UserCreated = "System";
            newJournal.Counter = 1;
            newJournal.DocNo = newJournal.SystemReferenceNo;
            newJournal.DocumentState = JournalState.Posted;
            newJournal.DocType = DocTypeConstants.JournalVocher;

            newJournal.ObjectState = ObjectState.Added;
            _journalService.Insert(newJournal);
            int? recOrder = 0;
            List<JournalDetail> lstJDetial = new List<JournalDetail>();
            foreach (var detail in tObject.JournalDetailModels)
            {
                recOrder++;
                JournalDetail journalDetail = new JournalDetail();
                FillJournalDetailmodel(journalDetail, detail, _journal);
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Come_out_from_FillJournalDetailmodel_method);
                journalDetail.JournalId = newJournal.Id;
                journalDetail.DocumentId = newJournal.Id;
                journalDetail.AccountDescription = detail.AccountDescription;
                journalDetail.ServiceCompanyId = tObject.ServiceCompanyId;
                journalDetail.DocDate = tObject.DocDate;
                journalDetail.SystemRefNo = newJournal.SystemReferenceNo;
                journalDetail.DocNo = newJournal.DocNo;
                journalDetail.DocumentDetailId = Guid.NewGuid();
                journalDetail.DocType = DocTypeConstants.JournalVocher;
                journalDetail.DocSubType = DocSubTypeConstants.Recurring;
                journalDetail.RecOrder = recOrder;
                journalDetail.BaseCurrency = tObject.BaseCurrency;
                journalDetail.DocCurrency = tObject.DocCurrency;
                recOrder = journalDetail.RecOrder;
                journalDetail.ObjectState = ObjectState.Added;
                _journalDetailService.Insert(journalDetail);
                lstJDetial.Add(journalDetail);
                if (tObject.IsGstSettings == true && journalDetail.TaxRate != null)
                {
                    JournalDetail journalGstDetail = new JournalDetail();
                    journalGstDetail.Id = Guid.NewGuid();
                    FillJvGstDetail(newJournal, journalGstDetail, detail);
                    journalGstDetail.AccountDescription = detail.AccountDescription;
                    journalGstDetail.RecOrder = detail.RecOrder;
                    journalGstDetail.DocumentDetailId = journalDetail.Id;
                    if (gstAccount != null)
                    {
                        journalGstDetail.AccountName = gstAccount.Name;
                        journalGstDetail.COAId = gstAccount.Id;
                    }
                    journalGstDetail.ObjectState = ObjectState.Added;
                    _journalDetailService.Insert(journalGstDetail);
                    lstJDetial.Add(journalGstDetail);
                }
            }
            decimal? baseDebitTotal = lstJDetial.Sum(a => Math.Round(a.BaseDebit == null ? 0 : (decimal)a.BaseDebit, 2, MidpointRounding.AwayFromZero));
            decimal? baseCreditTotal = lstJDetial.Sum(a => Math.Round(a.BaseCredit == null ? 0 : (decimal)a.BaseCredit, 2, MidpointRounding.AwayFromZero));
            if (baseDebitTotal != baseCreditTotal)
            {
                bool? isCredit = null;
                SaveBalancingBaseDebitandBaseCredit(baseDebitTotal, baseCreditTotal, tObject, newJournal.Id, newJournal.DocNo, newJournal.DocSubType, out isCredit, false);
                if (isCredit == true)
                {
                    newJournal.GrandBaseDebitTotal = baseDebitTotal;
                    newJournal.GrandBaseCreditTotal = baseCreditTotal + .01m;
                }
                else
                {
                    newJournal.GrandBaseDebitTotal = baseDebitTotal + .01m;
                    newJournal.GrandBaseCreditTotal = baseCreditTotal;
                }
            }
            else
            {
                newJournal.GrandBaseDebitTotal = baseDebitTotal;
                newJournal.GrandBaseCreditTotal = baseCreditTotal;
            }

            try
            {
                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, JournalLoggingValidation.Entering_into_try_block_and_execute_the_SaveChanges_method);
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw;
            }
        }
        #endregion

        #region Audit_Bean


        public string ResetFinancialReport(long companyId, string screenName, string connectionString)
        {
            try
            {

                //Income Statement   //Balance Sheet
                SqlConnection connection = new SqlConnection(connectionString);
                connection.Open();
                SqlCommand cmd = new SqlCommand("[dbo].[Bean_Reset_Reports_Subtotals]", connection);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NEW_COMPANY_ID", companyId);
                cmd.Parameters.AddWithValue("@screenName", screenName);
                int i = cmd.ExecuteNonQuery();
                connection.Close();
                return "Reset Successfully";
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region TrailBalance




        public TrailBalanceModel GetTrailBalance(CommonModel commonModel)
        {
            try
            {
                int Period = 0;
                if (commonModel.Period == "Monthly")
                    Period = 3;
                else if (commonModel.Period == "Quarterly")
                    Period = 2;
                else if (commonModel.Period == "Semi-Annually")
                    Period = 1;
                else if (commonModel.Period == "Annually")
                    Period = 0;


                int SamePeriod = commonModel.SamePeriod ? 1 : 0;
                TrailBalanceModel trailBalanceModel = new TrailBalanceModel();
                //string compnayName = _companyService.GetById(commonModel.CompanyId).Name;
                var lstTrailBalance = Task.Run(() => _categoryService.GetAllAccountsBy_Bean_HTMLTrailBalanceSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, commonModel.Frequency, Period, SamePeriod));
                var lstAccountNames = lstTrailBalance.Result.Select(c => c.Name).Distinct().ToList();
                var data = lstAccountNames.Select(accName => new TrailBalanceViewModel()
                {
                    Code = lstTrailBalance.Result.Where(c => c.Name == accName).Select(c => c.Code).FirstOrDefault(),
                    Name = accName,
                    Class = lstTrailBalance.Result.Where(c => c.Name == accName).Select(c => c.Class).FirstOrDefault(),
                    YearModel = lstTrailBalance.Result.Where(c => c.Name == accName).Select(x => new YearModel()
                    {
                        Year = x.Year,
                        Credit = (x.Credit != null && x.Credit != string.Empty) ? Convert.ToDecimal(x.Credit) : 0,
                        Debit = (x.Debit != null && x.Debit != string.Empty) ? Convert.ToDecimal(x.Debit) : 0,
                        Percentage = (x.Percentage != null && x.Percentage != string.Empty) ? Convert.ToDecimal(x.Percentage) : 0,
                        IsPercentage = x.Year.Contains("Vs"),
                        FontColor = AssignColor(lstTrailBalance.Result.Where(c => c.Name == accName).Select(c => c.Class).FirstOrDefault(), (x.Percentage != null && x.Percentage != string.Empty) ? Convert.ToDecimal(x.Percentage) : 0)
                    }).ToList()

                }).ToList();

                //** total data
                trailBalanceModel.TrailBalanceViewModel = data;
                //**columns list
                if (data.Any())
                {
                    //** fr dynamic colomns
                    var accountName = lstTrailBalance.Result.Select(c => c.Name).FirstOrDefault();
                    trailBalanceModel.ColumnList = lstTrailBalance.Result.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).
                        Select(c => c.Year).ToList();
                    //Select(c => c.Year.Replace('-', '/')).ToList();

                }

                //** tb final totals
                List<YearModel> lstyearModel = GetTrailBalanceTotals(trailBalanceModel, data);
                trailBalanceModel.TrailBalanceTotals = lstyearModel;
                //here removing Vs column in list
                if (trailBalanceModel.ColumnList != null)
                    trailBalanceModel.ColumnList = trailBalanceModel.ColumnList.Where(c => !c.Contains("Vs")).ToList();

                return trailBalanceModel;
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }

        private List<YearModel> GetTrailBalanceTotals(TrailBalanceModel trailBalanceModel, List<TrailBalanceViewModel> data)
        {
            var lstYearModels = data.SelectMany(c => c.YearModel).ToList();
            List<YearModel> lstyearModel = new List<YearModel>();
            if (trailBalanceModel != null && trailBalanceModel.ColumnList != null)
                foreach (var colom in trailBalanceModel.ColumnList)
                {
                    YearModel yearModel = new YearModel();
                    yearModel.Year = colom;
                    yearModel.Debit = lstYearModels.Where(x => x.Year == colom).Sum(c => c.Debit);
                    yearModel.Credit = lstYearModels.Where(x => x.Year == colom).Sum(c => c.Credit);
                    yearModel.Percentage = null;
                    lstyearModel.Add(yearModel);
                }

            return lstyearModel;
        }

        #endregion TrailBalance

        #region MyRegion



        public IncomeStatementModel GetIncomeStatementByCompanyId(CommonModel commonModel)
        {
            try
            {
                int Period = 0;
                if (commonModel.Period == "Monthly")
                    Period = 3;
                else if (commonModel.Period == "Quarterly")
                    Period = 2;
                else if (commonModel.Period == "Semi-Annually")
                    Period = 1;
                else if (commonModel.Period == "Annually")
                    Period = 0;
                int SamePeriod = commonModel.SamePeriod ? 1 : 0;
                IncomeStatementModel incomeStatementModel = new IncomeStatementModel();
                var lstAccountsData = _categoryService.GetAllAccountsBy_Bean_HTMLIncomeStatmentSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, commonModel.Todate, SamePeriod, Period, commonModel.Frequency, commonModel.IsInterco);
                //here objects creation

                List<LeadSheetTotalModel> finalLeadSheetTotalModels = new List<LeadSheetTotalModel>();

                var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
                var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).Select(c => c.Year).ToList();

                incomeStatementModel.MainId = Guid.NewGuid();
                List<AccountType> lstleadsheet = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).Where(c => c.Category == "Income Statement").ToList();
                var trailbalnces = lstAccountsData.OrderBy(c => c.FRRecOrder).ThenBy(c => c.Recorder).ToList();
                var lstOrder = _orderService.GetOrderByEid(commonModel.CompanyId);
                var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();
                var lstcategories = _categoryService.GetCategories(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();
                List<Guid?> typeids = new List<Guid?>();
                typeids = lstsubcategorys.Where(a => a.Type == "LeadSheet" && a.TypeId != null).Select(a => a.TypeId).Distinct().ToList();
                var tbAcIds = trailbalnces.Select(c => c.FRPATId).Distinct().ToList();
                var lstleadtrilbalance = tbAcIds.Except(typeids).ToList();

                Company years = new Company();
                foreach (var categoryMaster in lstcategories.OrderBy(a => a.Recorder).ToList())
                {
                    List<LeadSheetTotalModel> listleadSheetTotalModel = new List<LeadSheetTotalModel>();
                    NewMethod(ColumnList, commonModel.CompanyId, listleadSheetTotalModel, years, lstleadsheet, trailbalnces, lstsubcategorys,
                        lstcategories, categoryMaster, 2, incomeStatementModel.MainId, null, null, null);
                    finalLeadSheetTotalModels.AddRange(listleadSheetTotalModel.OrderBy(a => a.Recorder));
                }

                //individuval LeadSheets                       
                if (trailbalnces.Any())
                {
                    List<LeadSheetTotalModel> lstLeadSheetModelsasTotals = new List<LeadSheetTotalModel>();
                    foreach (var leadsheetId in lstleadtrilbalance)
                    {
                        LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                        var leadsheet = lstleadsheet.FirstOrDefault(a => a.FRATId == leadsheetId);
                        if (leadsheet != null)
                        {
                            var leadSheetAccounts = trailbalnces.Where(c => c.FRPATId == leadsheet.FRATId).ToList();
                            var leadSheetSubcategoryes = lstsubcategorys.Where(c => c.TypeId == leadsheet.FRATId).ToList();
                            FillLeadSheetModel(ColumnList, commonModel.CompanyId, lstcategories, lstsubcategorys, incomeStatementModel.MainId, leadSheetAccounts, leadSheetModel, leadsheet, lstOrder);

                            //if (leadSheetModel.AccountModels.Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.SubCategoryModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)
                            //{
                            IncomeStatementLeadSheetTotals(trailbalnces, leadSheetModel);
                            var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                            leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                            leadSheetModel.IsVisible = false;
                            lstLeadSheetModelsasTotals.Add(leadSheetModel);
                            //}
                        }
                    }
                    finalLeadSheetTotalModels.AddRange(lstLeadSheetModelsasTotals);
                }
                incomeStatementModel.LeadSheetTotalModels = finalLeadSheetTotalModels.OrderBy(c => c.Recorder).ToList();

                LeadSheetTotalModel incomeStatementModelNetTotals = new LeadSheetTotalModel();
                incomeStatementModelNetTotals.LeadSheetTotalModels = incomeStatementModel.LeadSheetTotalModels;
                IncomeStatementLeadSheetSubTotals(incomeStatementModelNetTotals, trailbalnces);
                incomeStatementModel.LeadSheetTotalModels = incomeStatementModelNetTotals.LeadSheetTotalModels;
                incomeStatementModel.YearModels = incomeStatementModelNetTotals.YearModels;

                var amount1 = incomeStatementModel.YearModels.Sum(c => c.Balance);
                incomeStatementModel.IsShowZero = (amount1 == null || amount1 == 0);
                incomeStatementModel.IsVisible = false;

                //** fr dynamic colomns
                BuildColumnsHTMLData(incomeStatementModel, ColumnList, commonModel);

                var incomeStatementorder = lstOrder.Where(c => c.LeadSheetType == "Income Statement" && c.AccountClass == "Income Statement").FirstOrDefault();
                #region Order
                if (incomeStatementorder != null && (incomeStatementorder.Recorder != null && incomeStatementorder.Recorder != string.Empty))//here final order
                {
                    List<string> result = incomeStatementorder.Recorder.Split(',').ToList();
                    incomeStatementModel.LeadSheetTotalModels = incomeStatementModel.LeadSheetTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                else if (incomeStatementorder == null)//here final order
                {
                    var incomeStatementOrder = lstleadsheet.Where(c => c.Category == "Income Statement").OrderBy(c => c.RecOrder).Select(c => c.FRATId).ToList();
                    incomeStatementModel.LeadSheetTotalModels = incomeStatementModel.LeadSheetTotalModels.OrderBy(d => incomeStatementOrder.IndexOf(d.Id)).ToList();

                    //incomeStatementModel.LeadSheetTotalModels = incomeStatementModel.LeadSheetTotalModels.ToList();
                    //1st time index order
                    var orderSaveFirstTime = string.Join(",", incomeStatementModel.LeadSheetTotalModels.Select(c =>
                    c.Id).ToArray());

                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = commonModel.CompanyId;
                    order.LeadSheetType = "Income Statement";
                    order.AccountClass = "Income Statement";
                    order.Recorder = orderSaveFirstTime;
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                    _UnitOfWorkAsync.SaveChanges();
                }
                #endregion


                //**for totals
                if (incomeStatementModel != null && ColumnList != null)
                {
                    var lstIncome = incomeStatementModel.LeadSheetTotalModels.Where(c => c.LeadSheetType == "Income").ToList();
                    var lstExpenses = incomeStatementModel.LeadSheetTotalModels.Where(c => c.LeadSheetType == "Expenses").ToList();
                    List<YearModels> lstYearModels = new List<YearModels>();
                    foreach (var colom in ColumnList)
                    {
                        YearModels yearModels = new YearModels();
                        yearModels.Year = colom;
                        var incomeBalance = lstIncome.Where(c => c.YearModels != null).SelectMany(x => x.YearModels).Where(v => v.Year == colom).Sum(n => n.Balance);
                        var expencesBalance = lstExpenses.Where(c => c.YearModels != null).SelectMany(x => x.YearModels).Where(v => v.Year == colom).Sum(n => n.Balance);
                        yearModels.Balance = ((incomeBalance ?? 0) - (expencesBalance ?? 0));
                        yearModels.Percentage = null;
                        if (colom.Contains("Vs"))
                            yearModels.IsPercentage = true;
                        yearModels.Percentage = null;
                        lstYearModels.Add(yearModels);
                    }
                    incomeStatementModel.YearModels = lstYearModels;
                }

                return incomeStatementModel;
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }


        //private static void BuildColumnsHTMLDataNew(IncomeStatementModel incomeStatementModel, List<string> ColumnList, CommonModel commonModel)
        //{
        //    Dictionary<string, string> columnList = new Dictionary<string, string>();
        //    columnList.Add("AccountName", "Account Name");

        //    foreach (var item in ColumnList)
        //    {
        //        if (item.Contains("Vs"))
        //            columnList.Add(item, "% Change");
        //        else
        //            columnList.Add(item, item);
        //    }
        //    List<ColumnLsts> columns = new List<ColumnLsts>();
        //    foreach (var lst in columnList)
        //    {
        //        ColumnLsts column = new ColumnLsts();
        //        column.Column = lst.Key;
        //        column.HtmlData = lst.Value;

        //        if (lst.Key == "AccountName" || lst.Key == "Code")
        //        {
        //            column.IsAmount = false;
        //        }
        //        else
        //        {
        //            column.IsAmount = true;
        //        }
        //        columns.Add(column);
        //    }
        //    incomeStatementModel.ColumnLists = columns;


        //    if (commonModel.Frequency != 1)
        //    {
        //        int index = 0;
        //        bool isFirst = true;
        //        List<ColumnLsts> lstClmList = new List<ColumnLsts>();
        //        foreach (var item in incomeStatementModel.ColumnLists)
        //        {
        //            if (item.Column.Contains("Vs"))
        //            {
        //                if (isFirst)
        //                {
        //                    lstClmList.Insert(index - 2, item);
        //                    isFirst = false;
        //                }
        //                else
        //                    lstClmList.Insert(index - 1, item);
        //            }
        //            else
        //                lstClmList.Add(item);
        //            index++;
        //        }
        //        incomeStatementModel.ColumnLists = lstClmList;
        //    }
        //}


        private static void BuildColumnsHTMLData(IncomeStatementModel incomeStatementModel, List<string> ColumnList, CommonModel commonModel)
        {
            Dictionary<string, string> columnList = new Dictionary<string, string>();
            columnList.Add("Name", "<p>Account Name</p>");
            //columnList.Add("Code", "<p>Account Code</p>");
            foreach (var item in ColumnList)
            {
                if (item.Contains("Vs"))
                {
                    var value1 = item.Replace("Vs", "&#013;&#009 Vs &#013; ");
                    columnList.Add(item, "<p class=text-center data-toggle=" + "\"" + "tooltip" + "\"" + " data-placement=" + "\"" + "right" + "\"" + " data-html=" + "\"" + "true" + "\"" + " title=" + "\"" + value1 + "\"" + ">% Change</p>");
                }
                else
                {
                    var value = item.Replace("To", "<br> To <br>");
                    columnList.Add(item, "<p class=text-center>" + value + "</p>");
                    //columnList.Add(item, "<p>" + item + "</p>");//**old
                }
            }

            List<ColumnLsts> columns = new List<ColumnLsts>();
            foreach (var lst in columnList)
            {
                ColumnLsts column = new ColumnLsts();
                column.Column = lst.Key;
                column.HtmlData = lst.Value;

                if (lst.Key == "Name" || lst.Key == "Code")
                {
                    column.IsAmount = false;
                }
                else
                {
                    column.IsAmount = true;
                }
                columns.Add(column);
            }
            incomeStatementModel.ColumnLists = columns;


            if (commonModel.Frequency != 1)
            {
                int index = 0;
                bool isFirst = true;
                List<ColumnLsts> lstClmList = new List<ColumnLsts>();
                foreach (var item in incomeStatementModel.ColumnLists)
                {
                    if (item.Column.Contains("Vs"))
                    {
                        if (isFirst)
                        {
                            lstClmList.Insert(index - 2, item);
                            isFirst = false;
                        }
                        else
                            lstClmList.Insert(index - 1, item);
                    }
                    else
                        lstClmList.Add(item);
                    index++;
                }
                incomeStatementModel.ColumnLists = lstClmList;
            }


            //List<ColumnLsts> lstClmList = new List<ColumnLsts>();
            //List<ColumnLsts> lstClmMainList = new List<ColumnLsts>();
            //int ii = 0;
            //var firstIndex = incomeStatementModel.ColumnLists.Where(c => c.Column == "Name").FirstOrDefault();
            //incomeStatementModel.ColumnLists = incomeStatementModel.ColumnLists.Where(c => c.Column != "Name").ToList();
            //lstClmMainList.Add(firstIndex);
            //foreach (var item in incomeStatementModel.ColumnLists)
            //{
            //    ColumnLsts clm = new ColumnLsts();
            //    clm = item;
            //    ii++;
            //    clm.Recorder = ii;
            //    if (item.Column.Contains("Vs"))
            //    {
            //        clm.Recorder = 0;
            //        ii = 0;
            //        lstClmList.Add(clm);
            //        lstClmList.OrderBy(c => c.Recorder).ToList();
            //        lstClmMainList.AddRange(lstClmList);
            //        lstClmMainList.Insert(3, lstClmMainList.LastOrDefault());
            //        lstClmMainList.RemoveAt(3);

            //        lstClmList = new List<ColumnLsts>();
            //    }
            //    lstClmList.Add(clm);
            //}
            //incomeStatementModel.ColumnLists = lstClmMainList;


        }
        private List<LeadSheetTotalModel> NewMethod(List<string> ColumnsList, long companyId, List<LeadSheetTotalModel> listleadSheetTotalModel,
                   Company years, List<AccountType> lstleadsheet, List<IncomeStatementSpModel> trailbalnces,
                   List<SubCategory> lstsubcategorys, List<Category> lstcategories,
                   Category categoryMaster, int loop, Guid mainId, Guid? parentId = null, int? Rec = null,
                   string groupname = null)
        {
            var notRequired = lstsubcategorys.Where(c => c.TypeId == categoryMaster.Id && c.Type == "SubTotal").Any();
            if (loop == 1)
                notRequired = false;
            if (!notRequired)
            {
                if (categoryMaster.Type == "LeadSheet")
                {
                    LeadSheetTotalModel leadSheetTotalModel = AddMethod(ColumnsList, categoryMaster, years, lstsubcategorys, lstleadsheet, trailbalnces, companyId, null, lstcategories, mainId, groupname);
                    leadSheetTotalModel.ColorCode = categoryMaster.ColorCode;
                    leadSheetTotalModel.ParentId = parentId != null ? (Guid)parentId : Guid.NewGuid();
                    IncomeStatementLeadSheetSubTotals(leadSheetTotalModel, trailbalnces);

                    var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                    leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    listleadSheetTotalModel.Add(leadSheetTotalModel);
                }
                else if (categoryMaster.Type == "SubTotal")
                {
                    LeadSheetTotalModel ChildSubTotal = new LeadSheetTotalModel();
                    var lstChildSubCategory = lstsubcategorys.Where(c => c.ParentId == categoryMaster.Id).ToList();
                    if (lstChildSubCategory.Count > 0)
                    {
                        ChildSubTotal.Id = categoryMaster.Id;
                        ChildSubTotal.Name = categoryMaster.Name;
                        ChildSubTotal.ColorCode = categoryMaster.ColorCode;
                        ChildSubTotal.MainId = mainId;
                        ChildSubTotal.IsLeadsheet = false;
                        ChildSubTotal.Type = categoryMaster.Type;
                        ChildSubTotal.ParentId = parentId != null ? (Guid)parentId : new Guid();
                        ChildSubTotal.Recorder = categoryMaster.Recorder;
                        ChildSubTotal.DupRecorder = Rec == null ? categoryMaster.Recorder : Rec;
                        //individuval LeadSheets
                        #region LeadSheets
                        List<LeadSheetTotalModel> leadSheetSubChildModel = new List<LeadSheetTotalModel>();
                        foreach (var item in lstChildSubCategory)
                        {
                            var subleadsheet = item;
                            LeadSheetTotalModel leadSheetTotalModel = new LeadSheetTotalModel();
                            LeadSheetTotalModel leadsheetModel = new LeadSheetTotalModel();
                            if (item.Type == "LeadSheet")
                            {
                                var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
                                if (leadsheet != null)
                                {
                                    FillLeadSheetModel(ColumnsList, companyId, lstcategories, lstsubcategorys, mainId, trailbalnces,
                                        leadsheetModel, leadsheet, null, item);
                                    IncomeStatementLeadSheetSubTotals(leadsheetModel, trailbalnces);
                                    //if (leadsheetModel.AccountModels.Count() > 0 || leadsheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 || leadsheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)
                                    //{
                                    var amount1 = leadsheetModel.YearModels.Sum(c => c.Balance);
                                    leadsheetModel.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;
                                    leadSheetSubChildModel.Add(leadsheetModel);
                                    //}
                                }
                            }
                            else
                            {
                                var masterData = lstcategories.Where(c => c.Id == item.TypeId).FirstOrDefault();
                                if (masterData != null)
                                {
                                    masterData.Recorder = item.Recorder;
                                    var data = AddMethod(ColumnsList, masterData, years, lstsubcategorys, lstleadsheet, trailbalnces,
                                        companyId, null, lstcategories, mainId, null);
                                    data.DupRecorder = ChildSubTotal.Recorder;
                                    data.ColorCode = masterData.ColorCode;
                                    data.Recorder = item.Recorder;
                                    data.ParentId = ChildSubTotal.Id;
                                    leadSheetTotalModel = data;
                                    IncomeStatementLeadSheetSubTotals(leadSheetTotalModel, trailbalnces);
                                    var amount1 = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                                    leadSheetTotalModel.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;
                                    leadSheetSubChildModel.Add(leadSheetTotalModel);
                                }
                            }
                        }
                        #endregion
                        ChildSubTotal.LeadSheetTotalModels = leadSheetSubChildModel.Distinct().OrderBy(a => a.Recorder).
                            ToList();
                        IncomeStatementLeadSheetSubTotals(ChildSubTotal, trailbalnces);
                        var amount = ChildSubTotal.YearModels.Sum(c => c.Balance);
                        ChildSubTotal.IsShowZero = (amount == null || amount == 0) ? true : false;
                        listleadSheetTotalModel.Add(ChildSubTotal);
                    }
                    else
                    {

                        LeadSheetTotalModel leadSheetTotalModel = AddMethod(ColumnsList, categoryMaster, years, lstsubcategorys,
                            lstleadsheet, trailbalnces, companyId, null, lstcategories, mainId, null);
                        IncomeStatementLeadSheetSubTotals(leadSheetTotalModel, trailbalnces);
                        var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                        leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                        listleadSheetTotalModel.Add(leadSheetTotalModel);
                    }
                }
            }
            return listleadSheetTotalModel;
        }
        public LeadSheetTotalModel AddMethod(List<string> ColumnsList, Category categoryMaster, Company years, List<SubCategory> lstsubcategorys,
            List<AccountType> lstleadsheet, List<IncomeStatementSpModel> trailbalnces, long companyId, string featureName,
            List<Category> lstcategories, Guid mainId, string groupname = null)
        {
            List<LeadSheetTotalModel> listleadSheetTotalModel = new List<LeadSheetTotalModel>();
            LeadSheetTotalModel leadSheetTotalModel = new LeadSheetTotalModel();
            leadSheetTotalModel.Id = categoryMaster.Id;
            leadSheetTotalModel.Name = categoryMaster.Name;
            leadSheetTotalModel.MainId = mainId;
            leadSheetTotalModel.IsLeadsheet = false;
            leadSheetTotalModel.Recorder = categoryMaster.Recorder;
            leadSheetTotalModel.DupRecorder = categoryMaster.Recorder;
            leadSheetTotalModel.Type = categoryMaster.Type;
            leadSheetTotalModel.ColorCode = categoryMaster.ColorCode;
            List<LeadSheetTotalModel> lstLeadsheetModel = new List<LeadSheetTotalModel>();
            var leadsheettotaldetails = lstsubcategorys.Where(a => a.ParentId == categoryMaster.Id).ToList();
            foreach (var subleadsheet in leadsheettotaldetails.OrderBy(c => c.Recorder).ToList())
            {
                if (subleadsheet.Type == "SubTotal")
                {
                    var masterSubData = lstcategories.Where(c => c.Id == subleadsheet.TypeId).FirstOrDefault();
                    masterSubData.Recorder = subleadsheet.Recorder;
                    var data = NewMethod(ColumnsList, companyId, listleadSheetTotalModel, years, lstleadsheet, trailbalnces, lstsubcategorys,
                        lstcategories, masterSubData, 1, mainId, categoryMaster.Id, categoryMaster.Recorder, null);
                    lstLeadsheetModel.AddRange(data);
                }
                //individuval LeadSheets
                #region LeadSheets
                var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
                if (leadsheet != null)
                {
                    LeadSheetTotalModel leadsheetModel = new LeadSheetTotalModel();
                    FillLeadSheetModel(ColumnsList, companyId, lstcategories, lstsubcategorys, mainId, trailbalnces, leadsheetModel, leadsheet, null, subleadsheet);
                    IncomeStatementLeadSheetSubTotals(leadsheetModel, trailbalnces);
                    //if (leadsheetModel.AccountModels.Count() > 0 || leadsheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 || leadsheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)
                    //{
                    var amount = leadsheetModel.YearModels.Sum(c => c.Balance);
                    leadsheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    lstLeadsheetModel.Add(leadsheetModel);
                    //}
                }
                #endregion
            }
            leadSheetTotalModel.LeadSheetTotalModels = lstLeadsheetModel.Distinct().OrderBy(a => a.Recorder).ToList();
            return leadSheetTotalModel;
        }
        private void FillLeadSheetModel(List<string> ColumnList, long companyid, List<Category> lstCategoryes, List<SubCategory> lstsubcategorys,
            Guid mainId, List<IncomeStatementSpModel> trailbalnces, LeadSheetTotalModel leadSheetModel,
            AccountType leadsheet, List<Order> lstOrder, SubCategory subleadsheet = null)
        {
            List<IncomeStatementSpModel> lsttrialbalance = null;
            leadSheetModel.Id = (Guid)leadsheet.FRATId;
            leadSheetModel.MainId = mainId;
            leadSheetModel.LeadSheetId = leadsheet.FRATId;
            leadSheetModel.AccountClass = leadsheet.SubCategory;
            leadSheetModel.LeadSheetType = leadsheet.Class;
            leadSheetModel.CommonId = Guid.NewGuid();
            leadSheetModel.IsLeadsheet = true;
            leadSheetModel.CompanyId = companyid;
            leadSheetModel.Name = leadsheet.Name;

            if (subleadsheet != null)
            {
                leadSheetModel.Recorder = (int?)subleadsheet.Recorder;
                leadSheetModel.ParentId = subleadsheet.ParentId != null ? (Guid)subleadsheet.ParentId : Guid.Empty;
            }
            else
            {
                leadSheetModel.Recorder = (int?)null;
                leadSheetModel.ParentId = Guid.Empty;
            }

            // categories 
            #region Category
            List<CategoryTotalModel> lstCategoryTotalModels = FillIncomeCategoryTotals(companyid, trailbalnces, lstsubcategorys, lstCategoryes, leadSheetModel, leadsheet, ref lsttrialbalance, lstOrder);
            #endregion Category

            #region Account
            lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId);
            var lstTotaltrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId && a.SubCategoryId == null && a.CategoryId == null);
            List<AccountModel> lstAccountModels = new List<AccountModel>();
            var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
            foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
            {
                FillLeadSheetAccountmodel(leadsheet, lstAccountModels, lstTotaltrialbalance, trialbalance, leadSheetModel.CommonId);
            }
            leadSheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();

            //uncategorized counts
            leadSheetModel.OtherYearModels = UncategorizedAccountTotals(ColumnList, leadSheetModel, leadsheet.Class);

            #endregion Account

            leadSheetModel.CategoryTotalModels = lstCategoryTotalModels;
            if (lstOrder != null)
            {
                var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == leadsheet.FRATId).FirstOrDefault();
                if (categoryOrderLeadSheet != null)
                {
                    leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                    List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                    leadSheetModel.CategoryTotalModels = leadSheetModel.CategoryTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
            }

        }

        private List<YearModels> UncategorizedAccountTotals(List<string> ColumnList, LeadSheetTotalModel leadSheetModel, string leadsheetType)
        {
            var allUncategorizedAccountTotals = leadSheetModel.AccountModels.SelectMany(v => v.YearModels).ToList();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            List<YearModels> lstYearModels = new List<YearModels>();
            foreach (var colom in ColumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = allUncategorizedAccountTotals.Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0;
                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    i = 0;
                    yearModels.IsPercentage = true;
                    if (leadsheetType == "Expenses")
                    {
                        yearModels.FontColor = AssignColorTotal(leadsheetType, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.FontColor = AssignColor(leadsheetType, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;

                }
                i++;
                lstYearModels.Add(yearModels);
            }

            return lstYearModels;
        }

        private void FillLeadSheetAccountmodel(AccountType leadsheet, List<AccountModel> lstAccountModels, List<IncomeStatementSpModel> lstTotaltrialbalance, IncomeStatementSpModel trialbalance, Guid? commonId)
        {
            AccountModel accountModel = new AccountModel();
            accountModel.Id = (Guid)trialbalance.FRCoaId;
            accountModel.Code = trialbalance.Code;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Name = trialbalance.Name;
            accountModel.CommonId = commonId;
            accountModel.LeadSheetId = (Guid)leadsheet.FRATId;
            accountModel.Class = leadsheet.Class;
            accountModel.CategoryId = trialbalance.CategoryId;
            accountModel.SubCategoryId = trialbalance.SubCategoryId;
            if (accountModel.Class == "Expenses")
            {
                var lstTotaltrialbalances = lstTotaltrialbalance.Where(c => c.Name == trialbalance.Name).ToList();
                accountModel.YearModels = lstTotaltrialbalance.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? x.Balance : null,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColorExpences(accountModel.Class, x.Percentage, lstTotaltrialbalances, x.Year) : null
                }).ToList();
            }
            else
            {
                accountModel.YearModels = lstTotaltrialbalance.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? x.Balance : null,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColor(accountModel.Class, x.Percentage) : null
                }).ToList();
            }

            //if (!RemoveAccount(accountModel))


            var amount = accountModel.YearModels.Sum(c => c.Balance);
            accountModel.IsShowZero = (amount == null || amount == 0) ? true : false;

            lstAccountModels.Add(accountModel);
        }

        private bool RemoveAccount(AccountModel accountModel)
        {
            bool op = false;
            if (accountModel.YearModels.Count > 0)
            {
                var amount = accountModel.YearModels.Sum(c => c.Balance);
                if (amount == null || amount == 0)
                {
                    op = true;
                }
            }
            return op;
        }

        private string AssignColorExpences(string value, decimal? percentage, List<IncomeStatementSpModel> lstTotaltrialbalances, string year)
        {
            if (percentage == null || percentage == 0)
                return null;
            var years = year.Split(new string[] { " Vs " }, StringSplitOptions.None);
            var currentvalue = lstTotaltrialbalances.Where(a => a.Year == years[0]).Select(a => a.Balance).FirstOrDefault();
            var priorvalue = lstTotaltrialbalances.Where(a => a.Year == years[1]).Select(a => a.Balance).FirstOrDefault();
            if (currentvalue < priorvalue)
                return "green";
            return "red";
        }

        private string AssignColorTotal(string value, decimal? percentage, decimal? currentvalue, decimal? priorvalue)
        {
            if (currentvalue < priorvalue || percentage == 0)
                return "green";
            return "red";
        }

        private string AssignNewColor(string accountClass, decimal? percentage)
        {
            string color = null;
            if (percentage == 0)
                color = "green";
            else
                color = "Liabilities,Expenses".Split(',').ToList().Contains(accountClass) ? percentage > 0 ? "green" : "red"
                    : "Assets,Income,Equity".Split(',').ToList().Contains(accountClass) ? percentage > 0 ? "red" : "green" : color;
            return color;
        }


        private string AssignColor(string lType, decimal? percentage, bool changeAssetColor = false)
        {
            if (lType == "Assets" & changeAssetColor == true)
                return "red";
            if (percentage == 0)
                return "green";
            var adata = "Liabilities,Expenses".Split(',').ToList().Contains(lType) ? percentage > 0 ? "red" : "green"
                 : "Assets,Income,Equity".Split(',').ToList().Contains(lType) ? percentage > 0 ? "green" : "red" : null;
            return adata;
        }

        private List<CategoryTotalModel> FillIncomeCategoryTotals(long companyID, List<IncomeStatementSpModel> trailbalnces,
            List<SubCategory> lstsubcategorys, List<Category> lstcategories, LeadSheetTotalModel leadSheetModel, AccountType leadsheet, ref List<IncomeStatementSpModel> lsttrialbalance, List<Order> lstOrder)
        {
            var lstCategories = lstcategories.Where(a => a.Type == "Category" && a.LeadsheetId == leadsheet.FRATId).ToList();
            var lstsubcategories = lstsubcategorys.Where(a => a.Type == "Category").ToList();
            var typeidscategory = lstsubcategories.Select(a => a.TypeId).ToList();
            //var lstleadscategory = leadsheet.LeadSheetCategories.Where(a => a.LeadsheetId == leadsheet.Id).ToList();
            var lstleadtrilbalanceCids = trailbalnces.Where(a => a.FRPATId != Guid.Empty && a.CategoryId != null).Select(a => a.CategoryId).ToList();
            var lstcatrgorytrilbalance = lstleadtrilbalanceCids.Distinct().Except(typeidscategory).ToList();
            var incomecategory = lstsubcategorys.Where(a => a.Type == leadSheetModel.Name && a.CompanyId == companyID).ToList();

            //sub Total categories
            #region CategoryTotalModels
            List<CategoryTotalModel> lstCategoryTotalModels = new List<CategoryTotalModel>();
            if (lstCategories != null && lstCategories.Count > 0)
            {
                foreach (var categorys in lstCategories)
                {
                    CategoryTotalModel categoryTotalModels = new CategoryTotalModel();
                    categoryTotalModels.Id = categorys.Id;
                    categoryTotalModels.Name = categorys.Name;
                    categoryTotalModels.RecOrder = (int)categorys.Recorder;
                    categoryTotalModels.CommonId = Guid.NewGuid();
                    categoryTotalModels.ColorCode = categorys.ColorCode;
                    categoryTotalModels.RecOrder = categorys.Recorder;
                    categoryTotalModels.LeadSheetId = leadSheetModel.Id;
                    categoryTotalModels.IsCategory = false;
                    List<CategoryTotalModel> lstCategoryModel = new List<CategoryTotalModel>();
                    var subcategorytotalslist = lstsubcategories.Where(a => a.ParentId == categoryTotalModels.Id).OrderBy(a => a.Recorder).ToList();

                    #region SUB-Categoryes                                    
                    foreach (var categoryid in subcategorytotalslist)
                    {
                        var incomecategoryid = incomecategory.Select(a => a.Id).ToList();
                        if (incomecategoryid.Contains((Guid)categoryid.TypeId))
                        {
                            lsttrialbalance = FillNewCategoryModel(companyID, trailbalnces, lstsubcategorys, leadSheetModel, leadsheet, lstCategoryModel, categoryid.TypeId, categoryid, lstOrder, categoryTotalModels.CommonId);
                        }
                    }
                    categoryTotalModels.CategoryTotalModels = lstCategoryModel.Where(a => a.AccountModels != null || a.SubCategoryModels != null).ToList();
                    //if (categoryTotalModels.AccountModels.Count() > 0 || categoryTotalModels.SubCategoryModels.Count() > 0)
                    //{
                    IncomeStatementCategoryTotals(trailbalnces, categoryTotalModels, leadsheet);
                    var amount = categoryTotalModels.YearModels.Sum(c => c.Balance);
                    categoryTotalModels.IsShowZero = (amount == null || amount == 0) ? true : false;
                    lstCategoryTotalModels.Add(categoryTotalModels);
                    //}
                }
                #endregion SUB-Categoryes
            }
            #endregion


            //categories
            #region CategoryModel
            if (lstcatrgorytrilbalance != null && lstcatrgorytrilbalance.Count > 0)
            {
                foreach (var categoryid in lstcatrgorytrilbalance)
                {
                    var incomecategoryid = incomecategory.Select(a => a.Id).ToList();
                    if (incomecategoryid.Contains((Guid)categoryid))
                    {
                        lsttrialbalance = FillNewCategoryModel(companyID, trailbalnces, lstsubcategorys, leadSheetModel, leadsheet, lstCategoryTotalModels, categoryid, null, lstOrder);
                    }
                }
            }
            #endregion
            return lstCategoryTotalModels.OrderBy(a => a.RecOrder).ToList();
        }
        private List<IncomeStatementSpModel> FillNewCategoryModel(long companyID, List<IncomeStatementSpModel> trailbalnces, List<SubCategory>
            lstsubcategorys, LeadSheetTotalModel leadSheetModel, AccountType leadsheet, List<CategoryTotalModel> lstCategoryTotalModels,
            Guid? categoryid, SubCategory subCategory = null, List<Order> lstOrder = null, Guid? commonid = null)
        {
            List<IncomeStatementSpModel> lsttrialbalance;
            var categoryincome = lstsubcategorys.Where(a => a.Type == leadSheetModel.Name && a.CompanyId == companyID && a.Id == categoryid).FirstOrDefault();
            CategoryTotalModel categoryModel = new CategoryTotalModel();
            categoryModel.Id = categoryincome.Id;
            categoryModel.CategoryId = categoryincome.Id;
            categoryModel.RecOrder = categoryincome.Recorder;
            categoryModel.Name = categoryincome.Name;
            categoryModel.CommonId = commonid == null ? Guid.NewGuid() : commonid;
            categoryModel.IsCollapse = categoryincome.IsCollapse;
            categoryModel.IsCategory = true;
            categoryModel.LeadSheetId = leadsheet.FRATId;
            categoryModel.LeadSheetName = leadsheet.Name;
            categoryModel.LeadSheetId = categoryincome.TypeId;
            categoryModel.ParentId = subCategory == null ? Guid.Empty : subCategory.ParentId;
            categoryModel.CompanyId = categoryincome.CompanyId;
            categoryModel.IsCategorised = true;
            lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categoryincome.Id);
            if (!lsttrialbalance.Any())
            {
                lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId);
                List<AccountModel> lstAccountModel = new List<AccountModel>();
                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
                {
                    FillIncomeExpencesAccountModelNew(trailbalnces, leadsheet, categoryincome, lstAccountModel, trialbalance, categoryModel.CommonId);
                }
                leadSheetModel.AccountModels = lstAccountModel.OrderBy(c => c.FRRecOrder).ThenBy(a => a.Name).ToList();
            }
            else
            {
                var lstsubcategory = _subCategoryService.GetByCid(categoryincome.Id);
                List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
                if (lstsubcategory.Any())
                {
                    foreach (var subcategorys in lstsubcategory)
                    {
                        AccountModel subcategoryModel = new AccountModel();
                        subcategoryModel.Id = subcategorys.Id;
                        subcategoryModel.Name = subcategorys.Name;
                        subcategoryModel.IsSubCategoryModel = true;
                        subcategoryModel.CommonId = Guid.NewGuid();
                        subcategoryModel.IsCollapse = subcategorys.IsCollapse;
                        subcategoryModel.FRRecOrder = subcategorys.Recorder;
                        subcategoryModel.ColorCode = subcategorys.SubCategoryOrder;
                        subcategoryModel.CategoryId = subcategorys.CategoryId;
                        var lsttrialbalancesub = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categoryincome.Id && c.SubCategoryId == subcategorys.Id);
                        List<AccountModel> lstAccountModel = new List<AccountModel>();
                        var loopTb1 = lsttrialbalancesub.DistinctBy(c => c.Name).ToList();
                        foreach (var trialbalance in loopTb1)
                        {
                            FillIncomeExpencesAccountModelNew(trailbalnces, leadsheet, subcategorys, lstAccountModel, trialbalance, subcategoryModel.CommonId);
                        }
                        subcategoryModel.AccountModels = lstAccountModel.OrderBy(c => c.FRRecOrder).ThenBy(a => a.Name).ToList();
                        if (subcategoryModel.AccountModels.Count() > 0)
                        {
                            IncomeStatementSubCategoryTotals(trailbalnces, subcategoryModel, leadsheet);


                            var amount = subcategoryModel.YearModels.Sum(c => c.Balance);
                            subcategoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                            lstSubCategoryModel.Add(subcategoryModel);
                        }
                    }
                    #region Accounts
                    List<AccountModel> lstAccountModelsc = new List<AccountModel>();
                    lsttrialbalance = lsttrialbalance.Where(a => a.CategoryId == categoryincome.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)).DistinctBy(a => a.Name).ToList();
                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                    foreach (var trialbalance in loopTb)/*.OrderBy(c => c.RecOrder)*/
                    {
                        FillIncomeExpencesAccountModelNew(trailbalnces, leadsheet, categoryincome, lstSubCategoryModel, trialbalance, categoryModel.CommonId);
                    }
                    categoryModel.AccountModels = lstSubCategoryModel;
                    #endregion
                }
                else
                {
                    List<AccountModel> lstAccountModel = new List<AccountModel>();
                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                    foreach (var trialbalance in loopTb)
                    {
                        FillIncomeExpencesAccountModelNew(trailbalnces, leadsheet, categoryincome, lstSubCategoryModel, trialbalance, categoryModel.CommonId);
                    }
                    categoryModel.AccountModels = lstSubCategoryModel.OrderBy(c => c.FRRecOrder).ToList();
                }
            }
            #region Order
            if (lstOrder != null)
            {
                var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
                if (categoryOrderLeadSheet != null)
                {
                    leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                    List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                    categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ThenBy(d => d.Name).ToList();
                }
            }
            #endregion

            if (categoryModel.AccountModels.Count() > 0)
            {
                IncomeStatementCategoryTotals(trailbalnces, categoryModel, leadsheet);

                var amount = categoryModel.YearModels.Sum(c => c.Balance);
                categoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                lstCategoryTotalModels.Add(categoryModel);
            }
            return lsttrialbalance;
        }

        private void FillIncomeExpencesAccountModelNew(List<IncomeStatementSpModel> lstTrailBalances, AccountType leadsheet, SubCategory category, List<AccountModel> lstAccountModelsc, IncomeStatementSpModel trialbalance, Guid? commonId)
        {
            AccountModel accountModel = new AccountModel();
            accountModel.Id = (Guid)trialbalance.FRCoaId;
            accountModel.Code = trialbalance.Code;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Name = trialbalance.Name;
            accountModel.LeadSheetId = (Guid)trialbalance.FRPATId;
            accountModel.Class = leadsheet.Class;
            accountModel.CategoryId = trialbalance.CategoryId;
            accountModel.SubCategoryId = trialbalance.SubCategoryId;
            if (accountModel.Class == "Expenses")
            {
                var lstTotaltrialbalances = lstTrailBalances.Where(c => c.Name == trialbalance.Name).ToList();
                accountModel.YearModels = lstTrailBalances.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? x.Balance : null,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColorExpences(accountModel.Class, x.Percentage, lstTotaltrialbalances, x.Year) : null
                }).ToList();
            }
            else
            {
                accountModel.YearModels = lstTrailBalances.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? Convert.ToDecimal(x.Balance) : 0,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColor(accountModel.Class, x.Percentage) : null
                }).ToList();
            }
            //if (!RemoveAccount(accountModel))

            var amount = accountModel.YearModels.Sum(c => c.Balance);
            accountModel.IsShowZero = (amount == null || amount == 0) ? true : false;

            lstAccountModelsc.Add(accountModel);
        }

        #region Category and Subcategory Save Delete
        public void SaveCategory(SaveCategoryModel saveCategoryModel)
        {
            try
            {
                //**validtion
                if (saveCategoryModel.IsCategory)
                {
                    var checkName = _subCategoryService.GetDuplicateName(saveCategoryModel.Name, saveCategoryModel.Id, saveCategoryModel.CompanyId);
                    if (checkName)
                        throw new Exception("Category Name Should not be Duplicate");
                }
                var lstChartofAccounts = _chartOfAccountService.GetChartofAccountsByCompanyId(saveCategoryModel.CompanyId);

                //** add
                if (saveCategoryModel.RecordStatus == "Added")
                {
                    SubCategory subCategory = new SubCategory();
                    // subCategory.Id = _subCategoryService.GetMaxIdFromSubCategory();
                    subCategory.CompanyId = saveCategoryModel.CompanyId;
                    subCategory.Name = saveCategoryModel.Name;
                    subCategory.TypeId = saveCategoryModel.AccountTypeId;
                    subCategory.IsIncomeStatement = saveCategoryModel.IsIncomeStatement;
                    subCategory.Type = saveCategoryModel.IsCategory ? "Category" : "SubCategory";

                    if (saveCategoryModel.AccountIds != null)
                        foreach (var cid in saveCategoryModel.AccountIds)
                        {
                            var cofAccount = lstChartofAccounts.Where(c => c.Id == cid).FirstOrDefault();
                            if (cofAccount != null)
                            {
                                if (saveCategoryModel.IsCategory)
                                    cofAccount.CategoryId = subCategory.Id;
                                else
                                    cofAccount.SubCategoryId = subCategory.Id;

                                cofAccount.ObjectState = ObjectState.Modified;
                                _chartOfAccountService.Update(cofAccount);
                            }
                        }
                    _subCategoryService.Insert(subCategory);
                }
                else if (saveCategoryModel.RecordStatus != "Added" && saveCategoryModel.RecordStatus != "Deleted")
                {
                    var subcategory = _subCategoryService.GetSubCategory(saveCategoryModel.Id);
                    if (subcategory != null)
                    {
                        subcategory.Name = saveCategoryModel.Name;
                        subcategory.ObjectState = ObjectState.Modified;
                        _subCategoryService.Update(subcategory);
                    }
                }
                //**delete
                else if (saveCategoryModel.RecordStatus == "Deleted")
                {
                    if (saveCategoryModel.IsCategory)
                    {
                        var subcategory = _subCategoryService.GetSubCategory(saveCategoryModel.Id);
                        if (subcategory != null)
                        {
                            var chartofAccounts = _chartOfAccountService.GetCOAbycategoryid(subcategory.Id);
                            DeleteAccountSubTotals(chartofAccounts.Select(c => c.SubCategoryId).Distinct().ToList());
                            foreach (var cOA in chartofAccounts)
                            {
                                cOA.SubCategoryId = null;
                                cOA.CategoryId = null;
                                cOA.ObjectState = ObjectState.Modified;
                                _chartOfAccountService.Update(cOA);
                            }
                            subcategory.ObjectState = ObjectState.Deleted;
                            _subCategoryService.Delete(subcategory);
                        }
                    }
                    else if (!saveCategoryModel.IsCategory)
                    {
                        var subcategory = _subCategoryService.GetSubCategory(saveCategoryModel.Id);
                        if (subcategory != null)
                        {
                            var chartofAccounts = _chartOfAccountService.GetCOAbycategoryid(subcategory.Id);
                            foreach (var cOA in chartofAccounts)
                            {
                                cOA.SubCategoryId = null;
                                cOA.ObjectState = ObjectState.Modified;
                                _chartOfAccountService.Update(cOA);
                            }
                            subcategory.ObjectState = ObjectState.Deleted;
                            _subCategoryService.Delete(subcategory);
                        }
                    }
                }
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }

        public void DeleteAccountSubTotals(List<Guid?> lstSubcategoryIds)
        {
            foreach (var subId in lstSubcategoryIds.Where(c => c != null).ToList())
            {
                _subCategoryService.Delete(subId);
            }
        }



        #endregion Category and Subcategory Save Delete

        #region SubTotals


        private void FillSubCategoryes(LeadSheetTotalModel lstleadSheetTotalModel, Category categoryMaster, List<Category> lstCategoryes, long companyId)
        {
            if (lstleadSheetTotalModel.RecordStatus == "Added")
            {
                int i = 1;
                foreach (var leadsheetModel in lstleadSheetTotalModel.LeadSheetTotalModels)
                {
                    SubCategory subcategory = new SubCategory();
                    subcategory.Id = Guid.NewGuid();
                    subcategory.ParentId = categoryMaster.Id;
                    subcategory.Name = leadsheetModel.Name;
                    subcategory.IsCollapse = leadsheetModel.IsCollapse;
                    if (lstleadSheetTotalModel.Type == "Category")
                        subcategory.Type = "Category";
                    else
                        subcategory.Type = (leadsheetModel.IsLeadsheet == false || leadsheetModel.IsGrandTotal == false) ? "SubTotal" : "LeadSheet";
                    subcategory.CompanyId = companyId;
                    subcategory.TypeId = leadsheetModel.Id;
                    if (lstleadSheetTotalModel.ScreenName == "Income Statement")
                        subcategory.IsIncomeStatement = true;
                    else if (lstleadSheetTotalModel.ScreenName == "Balance Sheet")
                        subcategory.IsIncomeStatement = false;
                    subcategory.AccountClass = lstleadSheetTotalModel.AccountClass;
                    subcategory.Recorder = i;
                    subcategory.ObjectState = ObjectState.Added;
                    _subCategoryService.Insert(subcategory);
                    i++;
                }
            }
        }

        #endregion SubTotals

        public LeadSheetTotalModel SaveSubTotals(LeadSheetTotalModel lstleadSheetTotalModel, long companyId)
        {
            try
            {
                Category categoryMaster = new Category();
                var lstCategoryes = _categoryService.GetCategories(companyId);
                var type = lstleadSheetTotalModel.LeadSheetType;
                var accountclass = lstleadSheetTotalModel.AccountClass;
                if (lstleadSheetTotalModel.ScreenName == "Income Statement")
                {
                    type = "Income Statement";
                    accountclass = "Income Statement";
                }
                else
                {
                    if (type == null || type == string.Empty)
                    {
                        type = lstleadSheetTotalModel.LeadSheetTotalModels.Select(a => a.LeadSheetType).FirstOrDefault();
                        type = "Balance Sheet";
                        accountclass = "Balance Sheet";
                    }
                }
                var bsorder = _orderService.GetOrderByEidLeadSheetType(companyId, type, accountclass);
                var nxtRecorder = (lstCategoryes.Select(c => c.Recorder).Max() == null ? 0 : lstCategoryes.Select(c => c.Recorder).Max()) + 1;
                var category = lstCategoryes.Where(c => c.Id == lstleadSheetTotalModel.Id && c.CompanyId == companyId).FirstOrDefault();

                if (category != null && lstleadSheetTotalModel.RecordStatus != "Added" && lstleadSheetTotalModel.RecordStatus != "Deleted")
                {
                    categoryMaster = category;
                    categoryMaster.Name = lstleadSheetTotalModel.Name;
                    categoryMaster.Recorder = category.Recorder;
                    categoryMaster.IsCollapse = lstleadSheetTotalModel.IsCollapse;
                    categoryMaster.ObjectState = ObjectState.Modified;
                    _categoryService.Update(categoryMaster);
                }
                else if (category == null && lstleadSheetTotalModel.RecordStatus == "Added")
                {
                    categoryMaster.Id = Guid.NewGuid();
                    categoryMaster.CompanyId = companyId;
                    categoryMaster.ColorCode = GetColor(nxtRecorder);
                    categoryMaster.Name = lstleadSheetTotalModel.Name;
                    categoryMaster.Type = lstleadSheetTotalModel.Type;
                    categoryMaster.Recorder = nxtRecorder;
                    categoryMaster.LeadsheetId = lstleadSheetTotalModel.LeadSheetTotalModels.Select(a => a.LeadSheetId).FirstOrDefault();
                    categoryMaster.AccountClass = lstleadSheetTotalModel.AccountClass;
                    categoryMaster.IsCollapse = lstleadSheetTotalModel.IsCollapse;
                    categoryMaster.ObjectState = ObjectState.Added;
                    if (lstleadSheetTotalModel.ScreenName == "Income Statement")
                        categoryMaster.IsIncomeStatement = true;
                    else if (lstleadSheetTotalModel.ScreenName == "Balance Sheet")
                        categoryMaster.IsIncomeStatement = false;
                    _categoryService.Insert(categoryMaster);

                    var incomeStatementOrder = _orderService.GetIncomeStatementOrderByCompanyId(companyId);
                    if (categoryMaster.Type != null && categoryMaster.Type != "Disclosure" && categoryMaster.Type != "Category" && lstleadSheetTotalModel.ScreenName == "Income Statement" && incomeStatementOrder.Recorder != null && incomeStatementOrder.Recorder != string.Empty)
                    {
                        var orderUpdate = string.Join(",", lstleadSheetTotalModel.LeadSheetTotalModels.Select(c => c.Id).ToArray());
                        orderUpdate = (orderUpdate != null && orderUpdate != string.Empty) ? (orderUpdate + "," + lstleadSheetTotalModel.SubTotals) : lstleadSheetTotalModel.SubTotals;
                        orderUpdate = orderUpdate.Trim(',');

                        var result = orderUpdate.Split(',').ToList();
                        //filling order for 1 st id
                        FillIncomeStatementOrder(categoryMaster, incomeStatementOrder, result);
                        var order = incomeStatementOrder.Recorder.Trim(',');
                        Order incomeOrder = new Order();
                        incomeOrder = incomeStatementOrder;
                        incomeOrder.Recorder = order;
                        incomeOrder.ObjectState = ObjectState.Modified;
                        _orderService.Update(incomeOrder);
                    }

                    if (categoryMaster.Type != null && categoryMaster.Type != "Disclosure" && categoryMaster.Type != "Category" && (lstleadSheetTotalModel.ScreenName == "Balance Sheet" || lstleadSheetTotalModel.ScreenName == null) && bsorder != null && bsorder.Recorder != null && bsorder.Recorder != string.Empty)
                    {
                        var orderUpdate = string.Join(",", lstleadSheetTotalModel.LeadSheetTotalModels.Select(c => c.Id).ToArray());
                        orderUpdate = (orderUpdate != null && orderUpdate != string.Empty) ? (orderUpdate + "," + lstleadSheetTotalModel.SubTotals) : lstleadSheetTotalModel.SubTotals;
                        orderUpdate = orderUpdate.Trim(',');
                        var result = orderUpdate.Split(',').ToList();
                        int i = 0;
                        foreach (var item in result)
                        {
                            if (i == 0)
                            {
                                bsorder.Recorder = bsorder.Recorder.Replace(item, categoryMaster.Id.ToString());
                            }
                            else
                            {
                                if (bsorder.Recorder.Contains(item + ","))
                                    bsorder.Recorder = bsorder.Recorder.Replace(item + ",", "");
                                else
                                    bsorder.Recorder = bsorder.Recorder.Replace(item, "");
                            }
                            i++;
                        }

                        bsorder.Recorder = bsorder.Recorder.Trim(',');
                        //var order = bsorder.Recorder.Replace(orderUpdate, categoryMaster.Id.ToString());
                        //bsorder.Recorder = order;
                        bsorder.ObjectState = ObjectState.Modified;
                        _orderService.Update(bsorder);
                    }
                }
                else if (category != null && lstleadSheetTotalModel.RecordStatus == "Deleted")
                {
                    var engagement = _orderService.GetIncomeStatementOrderByCompanyId(companyId);
                    if (lstleadSheetTotalModel.LeadSheetTotalModels.Count > 0 && category.Type != null && category.Type != "Disclosure" && category.Type != "Category" && category.IsIncomeStatement == true && engagement.Recorder != null && engagement.Recorder != string.Empty)
                    {
                        var orderUpdate = string.Join(",", lstleadSheetTotalModel.LeadSheetTotalModels.Select(c => c.Id).ToArray());
                        orderUpdate = (orderUpdate != null && orderUpdate != string.Empty) ? (orderUpdate + "," + lstleadSheetTotalModel.SubTotals) : lstleadSheetTotalModel.SubTotals;
                        orderUpdate = orderUpdate.Trim(',');
                        var order = engagement.Recorder.Replace(lstleadSheetTotalModel.Id.ToString(), orderUpdate);
                        Order incomeOrder = new Order();
                        incomeOrder = engagement;
                        incomeOrder.Recorder = order;
                        incomeOrder.ObjectState = ObjectState.Modified;
                        _orderService.Update(incomeOrder);
                    }
                    if (lstleadSheetTotalModel.LeadSheetTotalModels.Count > 0 && category.Type != null && category.Type != "Disclosure" && category.Type != "Category" && category.IsIncomeStatement != true && bsorder != null && bsorder.Recorder != null && bsorder.Recorder != string.Empty)
                    {
                        var orderUpdate = string.Join(",", lstleadSheetTotalModel.LeadSheetTotalModels.Select(c => c.Id).ToArray());
                        orderUpdate = (orderUpdate != null && orderUpdate != string.Empty) ? (orderUpdate + "," + lstleadSheetTotalModel.SubTotals) : lstleadSheetTotalModel.SubTotals;
                        orderUpdate = orderUpdate.Trim(',');
                        var order = bsorder.Recorder.Replace(lstleadSheetTotalModel.Id.ToString(), orderUpdate);
                        bsorder.Recorder = order;
                        _orderService.Update(bsorder);
                    }
                    DeleteSubCategory(category.Id);//delete details
                    category.ObjectState = ObjectState.Deleted;
                    _categoryService.Delete(category);
                }
                FillSubCategoryes(lstleadSheetTotalModel, categoryMaster, lstCategoryes, companyId);
                _UnitOfWorkAsync.SaveChanges();

                return lstleadSheetTotalModel;
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }
        public void DeleteSubCategory(Guid? parentId)
        {
            var subCategoryDetails = _subCategoryService.GetSubcategoryDetails(parentId);//here as parent id recordes
            foreach (var item in subCategoryDetails)
            {
                item.ObjectState = ObjectState.Deleted;
                _subCategoryService.Delete(item);
            }
            var subCategoryDetailsbyTypeId = _subCategoryService.GetSubcategoryDetailsForTypeId(parentId);//here as typeid recordes
            foreach (var item in subCategoryDetailsbyTypeId)
            {
                item.ObjectState = ObjectState.Deleted;
                _subCategoryService.Delete(item);
            }
        }


        private void FillIncomeStatementOrder(Category categoryMaster, Order incomeStatementOrder, List<string> result)
        {
            int i = 0;
            foreach (var item in result)
            {
                if (i == 0)
                {
                    incomeStatementOrder.Recorder = incomeStatementOrder.Recorder.Replace(item, categoryMaster.Id.ToString());
                }
                else
                {
                    if (incomeStatementOrder.Recorder.Contains(item + ","))
                        incomeStatementOrder.Recorder = incomeStatementOrder.Recorder.Replace(item + ",", "");
                    else
                        incomeStatementOrder.Recorder = incomeStatementOrder.Recorder.Replace(item, "");
                }
                i++;
            }
        }

        public CategoryModel SaveCategory(CategoryModel categoryModel)
        {
            try
            {
                if (categoryModel.LeadSheetId != null && categoryModel.LeadSheetId != Guid.Empty)
                {
                    if (categoryModel.RecordStatus == "Added")
                    {
                        var subcategoryexist = _subCategoryService.GetsubcategoryName(categoryModel.CompanyId, categoryModel.Name, categoryModel.LeadSheetId, categoryModel.LeadSheetName);
                        var catorder = _subCategoryService.GetsubcategoryByType(categoryModel.LeadSheetName, categoryModel.CompanyId).Count() + 50;
                        if (subcategoryexist)
                        {
                            throw new Exception("Category exist with same name, please choose another name ...!!! ");
                        }
                        else
                        {
                            SubCategory leadSheetCategory = new SubCategory();
                            leadSheetCategory.Id = Guid.NewGuid();
                            leadSheetCategory.Name = categoryModel.Name;
                            leadSheetCategory.TypeId = categoryModel.LeadSheetId;
                            leadSheetCategory.Recorder = catorder + 1;
                            leadSheetCategory.Type = categoryModel.LeadSheetName;
                            leadSheetCategory.CompanyId = categoryModel.CompanyId;
                            leadSheetCategory.IsCollapse = categoryModel.IsCollapse;

                            if (categoryModel.ScreenName == "Income Statement")
                                leadSheetCategory.IsIncomeStatement = true;
                            else if (categoryModel.ScreenName == "Balance Sheet")
                                leadSheetCategory.IsIncomeStatement = false;
                            leadSheetCategory.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Added;
                            _subCategoryService.Insert(leadSheetCategory);

                            #region TB
                            foreach (var accountmodel in categoryModel.AccountModels)
                            {
                                var trialblance = _chartOfAccountService.GetByIdLid(accountmodel.Id, categoryModel.LeadSheetId.Value);
                                if (trialblance != null)
                                {
                                    trialblance.CategoryId = leadSheetCategory.Id;
                                    trialblance.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                    _chartOfAccountService.Update(trialblance);
                                }
                            }
                            #endregion
                        }
                    }
                    else if (categoryModel.RecordStatus != "Added" && categoryModel.RecordStatus != "Deleted")
                    {
                        //var leadSheetCategory = _leadSheetCategoryService.Getcategoryname(categoryModel.Id, categoryModel.LeadSheetId.Value);
                        //if (leadSheetCategory != null)
                        //{
                        //    var categoryname = _leadSheetCategoryService.GetByNameLId(categoryModel.Name, categoryModel.LeadSheetId.Value);
                        //    if (categoryname)
                        //        throw new Exception("Category exist with same name, please choose another name ...!!! ");
                        //    leadSheetCategory.Name = categoryModel.Name;
                        //    leadSheetCategory.LeadsheetId = categoryModel.LeadSheetId;
                        //    leadSheetCategory.RecOrder = 1;
                        //    leadSheetCategory.Status = RecordStatusEnum.Active;
                        //    leadSheetCategory.IsHide = (categoryModel.AccountModels != null && categoryModel.AccountModels.Count > 0) ? true : false;
                        //    leadSheetCategory.IsCategorised = true;
                        //    leadSheetCategory.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                        //    _leadSheetCategoryService.Update(leadSheetCategory);

                        //}
                    }
                    else if (categoryModel.RecordStatus == "Deleted")
                    {
                        if (categoryModel.AccountModels != null)
                        {
                            foreach (var subCategoryModel in categoryModel.AccountModels)
                            {
                                if (subCategoryModel.IsSubCategoryModel == true)
                                {
                                    var subcategoryexist = _subCategoryService.GetCategory((Guid)subCategoryModel.CategoryId, subCategoryModel.Id);
                                    if (subcategoryexist != null)
                                    {
                                        subcategoryexist.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Deleted;
                                        _subCategoryService.Delete(subcategoryexist);
                                    }

                                    foreach (var account in subCategoryModel.AccountModels)
                                    {
                                        var trialbalance = _chartOfAccountService.GetById(account.Id);
                                        if (trialbalance != null)
                                        {
                                            trialbalance.CategoryId = null;
                                            trialbalance.SubCategoryId = null;
                                            trialbalance.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                            _chartOfAccountService.Update(trialbalance);
                                        }
                                    }

                                }
                            }
                        }


                        var leadSheetCategory = _subCategoryService.Getcategoryname(categoryModel.CompanyId, categoryModel.Name, categoryModel.LeadSheetId.Value, categoryModel.Id, categoryModel.LeadSheetName);
                        if (leadSheetCategory != null)
                        {
                            leadSheetCategory.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Deleted;
                            _subCategoryService.Delete(leadSheetCategory);
                        }
                        foreach (var accountmodel in categoryModel.AccountModels)
                        {
                            var trialblance = _chartOfAccountService.GetByIdLid(accountmodel.Id, categoryModel.LeadSheetId.Value);
                            if (trialblance != null)
                            {
                                trialblance.SubCategoryId = null;
                                trialblance.CategoryId = null;
                                trialblance.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                _chartOfAccountService.Update(trialblance);
                            }
                        }
                        //var subtotals = _subCategoryService.GetsubcategoryTotals(categoryModel.Id);
                        //if (subtotals != null && subtotals.Count <= 2)//here chnaged not considering group
                        //{
                        //    foreach (var subtotal in subtotals)
                        //    {
                        //        subtotal.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Deleted;
                        //        _subCategoryService.Delete(subtotal);
                        //    }
                        //}
                    }
                }
                #region SubCategory
                if (categoryModel.CategoryId != null && categoryModel.CategoryId != Guid.Empty)
                {
                    if (categoryModel.RecordStatus == "Added")
                    {
                        SubCategory subcategory = new SubCategory();
                        subcategory.Id = Guid.NewGuid();
                        subcategory.Name = categoryModel.Name;
                        subcategory.CompanyId = categoryModel.CompanyId;
                        subcategory.CategoryId = categoryModel.CategoryId.Value;
                        subcategory.Recorder = 1;
                        subcategory.SubCategoryOrder = GetColor(null);//accounts color
                        subcategory.IsCollapse = categoryModel.IsCollapse;
                        if (categoryModel.ScreenName == "Income Statement")
                            subcategory.IsIncomeStatement = true;
                        else if (categoryModel.ScreenName == "Balance Sheet")
                            subcategory.IsIncomeStatement = false;
                        foreach (var account in categoryModel.AccountModels)
                        {
                            var trialbalance = _chartOfAccountService.GetById(account.Id);
                            if (trialbalance != null)
                            {
                                trialbalance.SubCategoryId = subcategory.Id;
                                trialbalance.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                _chartOfAccountService.Update(trialbalance);
                            }
                        }
                        subcategory.CompanyId = categoryModel.CompanyId;
                        subcategory.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Added;
                        _subCategoryService.Insert(subcategory);

                    }
                    else if (categoryModel.RecordStatus != "Added" && categoryModel.RecordStatus != "Deleted")
                    {
                        if (categoryModel.Name != null)
                        {
                            var subcategoryexist = _subCategoryService.GetCategory(categoryModel.CategoryId.Value, categoryModel.Id);
                            if (subcategoryexist != null)
                            {
                                subcategoryexist.Name = categoryModel.Name;
                                subcategoryexist.CategoryId = categoryModel.CategoryId.Value;
                                subcategoryexist.Recorder = 1;
                                subcategoryexist.IsCollapse = categoryModel.IsCollapse;
                                subcategoryexist.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                _subCategoryService.Update(subcategoryexist);
                            }
                        }
                    }
                    else if (categoryModel.RecordStatus == "Deleted")
                    {

                        var subcategoryexist = _subCategoryService.GetCategory(categoryModel.CategoryId.Value, categoryModel.Id);
                        if (subcategoryexist != null)
                        {
                            subcategoryexist.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Deleted;
                            _subCategoryService.Delete(subcategoryexist);
                        }
                        foreach (var account in categoryModel.AccountModels)
                        {
                            var trialbalance = _chartOfAccountService.GetById(account.Id);
                            if (trialbalance != null)
                            {
                                trialbalance.SubCategoryId = null;
                                trialbalance.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                _chartOfAccountService.Update(trialbalance);
                            }
                        }
                    }

                }
                #endregion
                _UnitOfWorkAsync.SaveChanges();
                return categoryModel;
            }
            catch (Exception e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                throw e;
            }
        }


        #endregion Audit_Bean

        #region BalanceSheet

        public FinalBalanceSheetModel GetBalanceSheet(CommonModel commonModel)
        {
            try
            {
                #region Common
                FinalBalanceSheetModel finalBalanceSheetModel = new FinalBalanceSheetModel();
                int Period = 0;
                if (commonModel.Period == "Monthly")
                    Period = 3;
                else if (commonModel.Period == "Quarterly")
                    Period = 2;
                else if (commonModel.Period == "Semi-Annually")
                    Period = 1;
                else if (commonModel.Period == "Annually")
                    Period = 0;
                int SamePeriod = commonModel.SamePeriod == true ? 1 : 0;
                string screenName = null;
                string groupname = null;
                //string companyName = _companyService.GetById(commonModel.CompanyId).Name;
                screenName = "Balance Sheet";
                //objects creation
                BalanceSheetModel balanceSheetModel = new BalanceSheetModel();
                List<BalanceSheetSpModel> lsttrialbalance = null;
                List<LeadSheetTotalModel> CurrentAssestslistleadSheetTotalModel = new List<LeadSheetTotalModel>();
                List<LeadSheetTotalModel> noncurrentassestlistleadSheetTotalModel = new List<LeadSheetTotalModel>();
                List<LeadSheetTotalModel> currentLiabilitieslistleadSheetTotalModel = new List<LeadSheetTotalModel>();
                List<LeadSheetTotalModel> nonCurrentLiabilitieslistleadSheetTotalModel = new List<LeadSheetTotalModel>();
                List<LeadSheetTotalModel> EquitylistleadSheetTotalModel = new List<LeadSheetTotalModel>();
                var lstAccountsData = _categoryService.GetAllAccountsBy_Bean_HTMLBalanceSheetSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, (int)commonModel.Frequency, Period, SamePeriod);
                var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
                var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).
                    Select(c => c.Year).ToList();
                var trailbalnces = lstAccountsData.OrderBy(c => c.FRRecOrder).ThenBy(c => c.Name).ToList();

                //** fr dynamic colomns

                BuildColoumnsHTMLData(finalBalanceSheetModel, ColumnList, commonModel);

                //getting at atime all data
                var orderslist = _orderService.GetOrderByEid(commonModel.CompanyId);
                var lstleadsheet = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).OrderBy(c => c.RecOrder).ToList();
                trailbalnces = trailbalnces.Where(c => c.FRPATId != null && c.FRPATId != Guid.Empty).ToList();
                var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement != true).ToList();
                var lstcategories = _categoryService.GetCategories(commonModel.CompanyId).Where(a => a.IsIncomeStatement != true).ToList();
                var incomeandExpenses = _accountTypeService.GetLeadSheetByCid(commonModel.CompanyId, true);
                var iandcIds = incomeandExpenses.Select(a => a.FRATId).ToList();
                var incomandELids = trailbalnces.Where(a => iandcIds.Contains((Guid)a.FRPATId)).Any();
                var lstadjustmentaccount = new List<Address>();
                var years = new Company();
                var lstcomments = new List<Address>();
                var notes = new List<Address>();
                var accountannotations = new List<Address>();
                var engagement = new Company();
                balanceSheetModel.IsFirstEngagement = false;
                //by default flags
                balanceSheetModel.IsAssets = true;
                balanceSheetModel.IsLiabilities = true;
                balanceSheetModel.IsEquity = true;
                #endregion

                #region Assests
                var currentAssests = lstleadsheet.Where(c => c.Class == "Assets").ToList();
                var nonCurrentAssests = lstleadsheet.Where(c => c.Class == "Assets").ToList();
                var Assests = new LeadSheetTypeModel();
                var nonCurrentAssestModel = new NonCurrentModel();
                var currentAssetModel = new CurrentModel();
                Assests.IsCurrent = true;
                Assests.IsNonCurrent = true;
                currentAssetModel.MainId = Guid.Parse("91021766-F6F8-49FE-A230-66295B4BC3FB");
                nonCurrentAssestModel.MainId = Guid.Parse("81021766-F6F8-49FE-A230-66295B4BC3FB");
                #region CurrentAssests
                var currentAssestsids = currentAssests.Where(c => c.SubCategory == "Current").Select(a => a.FRATId).ToList();
                var listsubcategories = lstsubcategorys.Where(a => a.TypeId != null && a.ParentId != null).ToList();
                var subleadsheetsCureent = listsubcategories.Where(a => currentAssestsids.Contains((Guid)a.TypeId) && a.AccountClass == "Current").ToList();
                var typeids = subleadsheetsCureent.Select(a => (Guid)a.TypeId).Distinct().ToList();
                var lstleadtrilbalanceLids = trailbalnces.Where(a => a.FRPATId != Guid.Empty).Select(a => a.FRPATId).Distinct().ToList();
                var lstleadtrilbalance = lstleadtrilbalanceLids.Distinct().Except(typeids).ToList();
                var type = "Current";
                #region LeadSheetSubTotalModels               
                foreach (var categoryMaster in lstcategories.Where(c => c.AccountClass == "Current" && c.IsCollapse != true).ToList())
                {
                    CurrentAssestslistleadSheetTotalModel = BalanceSheetAssestsLeadSheetTotalsCheck(commonModel.CompanyId, screenName, CurrentAssestslistleadSheetTotalModel, years, currentAssests, trailbalnces,
                        lstsubcategorys, lstadjustmentaccount, lstcategories, categoryMaster, 2, currentAssetModel.MainId, type, null, null, notes, accountannotations, lstcomments, groupname, orderslist).Where(a => a.LeadSheetTotalModels.Count > 0).ToList();
                }
                #endregion LeadSheetTotalModel                

                #region LeadsheetModel
                if (lstleadtrilbalance != null && lstleadtrilbalance.Count() > 0)
                {
                    lstleadtrilbalance = lstleadtrilbalance.Where(c => currentAssestsids.Contains(c)).ToList();
                    foreach (var leadsheetId in lstleadtrilbalance)
                    {
                        lsttrialbalance = FillLeadSheetAssetsModel(commonModel.CompanyId, screenName, groupname, lsttrialbalance, CurrentAssestslistleadSheetTotalModel, years, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lstcomments, notes, accountannotations, currentAssests, currentAssetModel.MainId, leadsheetId, type, orderslist);
                    }
                }
                #endregion LeadsheetModel

                #region InnerTotals Ordering and Assigin

                currentAssetModel.LeadSheetTotalModels = CurrentAssestslistleadSheetTotalModel.DistinctBy(a => a.Id).OrderBy(a => a.Recorder).ToList();
                var currentassestsorders = orderslist.Where(a => a.LeadSheetType == "Assets" && a.AccountClass == "Current").FirstOrDefault();
                if (currentassestsorders != null && currentassestsorders.Recorder != null)
                {
                    List<string> result = currentassestsorders.Recorder.Split(',').ToList();
                    currentAssetModel.LeadSheetTotalModels = currentAssetModel.LeadSheetTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                else
                {
                    CurrentAssestslistleadSheetTotalModel = currentAssetModel.LeadSheetTotalModels;
                }

                #endregion InnerTotals Ordering and Assigin

                LeadSheetTotalModel sumCurrentLeadSheetmodels = new LeadSheetTotalModel();
                sumCurrentLeadSheetmodels.LeadSheetTotalModels = currentAssetModel.LeadSheetTotalModels;
                LeadSheetSubTotals(sumCurrentLeadSheetmodels, trailbalnces);
                currentAssetModel.YearModels = sumCurrentLeadSheetmodels.YearModels;
                currentAssetModel.LeadSheetTotalModels = sumCurrentLeadSheetmodels.LeadSheetTotalModels;
                Assests.Current = currentAssetModel;

                #endregion CurrentAssests

                #region Non-CurrentAssests
                var nonCurrentAssestsids = nonCurrentAssests.Where(c => c.SubCategory != null && c.SubCategory.ToUpper() == JournalConstant.NonCurrent.ToUpper()).Select(a => a.FRATId).ToList();
                var NonCurrentAssestssubleadsheets = listsubcategories.Where(a => nonCurrentAssestsids.Contains((Guid)a.TypeId) && a.ParentId != null && a.AccountClass != null
                && a.AccountClass.ToUpper() == JournalConstant.NonCurrent.ToUpper()).ToList();//#GL
                var typeidsnoncurrentassests = NonCurrentAssestssubleadsheets.Select(a => (Guid)a.TypeId).Distinct().ToList();
                var lstleadtrilbalanceLidsnoncurrentassests = trailbalnces.Where(a => a.FRPATId != Guid.Empty).Select(a => a.FRPATId).Distinct().ToList();
                var lstleadtrilbalancenoncurrentassests = lstleadtrilbalanceLidsnoncurrentassests.Distinct().Except(typeidsnoncurrentassests).ToList();
                var type1 = JournalConstant.NonCurrent;
                #region LeadSheetSubTotalModels               
                foreach (var categoryMaster in lstcategories.Where(c => c.AccountClass != null && c.AccountClass.ToUpper() == JournalConstant.NonCurrent.ToUpper() && c.IsCollapse != true).ToList())
                {
                    noncurrentassestlistleadSheetTotalModel = BalanceSheetAssestsLeadSheetTotalsCheck(commonModel.CompanyId, screenName, noncurrentassestlistleadSheetTotalModel, years, nonCurrentAssests, trailbalnces,
                        lstsubcategorys, lstadjustmentaccount, lstcategories, categoryMaster, 2, nonCurrentAssestModel.MainId, JournalConstant.NonCurrent, null, null, notes,
                        accountannotations, lstcomments, groupname, orderslist).Where(a => a.LeadSheetTotalModels.Count > 0).ToList();
                }
                #endregion LeadSheetTotalModel                

                #region LeadsheetModel
                if (lstleadtrilbalancenoncurrentassests != null && lstleadtrilbalancenoncurrentassests.Count() > 0)
                {
                    lstleadtrilbalancenoncurrentassests = lstleadtrilbalancenoncurrentassests.Where(c => nonCurrentAssestsids.Contains(c)).ToList();
                    foreach (var leadsheetId in lstleadtrilbalancenoncurrentassests.Distinct())
                    {
                        lsttrialbalance = FillLeadSheetAssetsModel(commonModel.CompanyId, screenName, groupname,
                            lsttrialbalance, noncurrentassestlistleadSheetTotalModel, years, trailbalnces,
                            lstsubcategorys, lstadjustmentaccount, lstcategories, lstcomments,
                            notes, accountannotations, nonCurrentAssests, nonCurrentAssestModel.MainId,
                            leadsheetId, type1, orderslist);
                    }
                }
                #endregion

                #region  InnerTotals Ordering and Assigin

                nonCurrentAssestModel.LeadSheetTotalModels = noncurrentassestlistleadSheetTotalModel.DistinctBy(a => a.Id).OrderBy(a => a.Recorder).ToList();
                var noncurrentassestsorders = orderslist.Where(a => a.LeadSheetType == "Assets" && a.AccountClass == "NonCurrent").FirstOrDefault();
                if (noncurrentassestsorders != null && noncurrentassestsorders.Recorder != null)
                {
                    List<string> result = noncurrentassestsorders.Recorder.Split(',').ToList();
                    nonCurrentAssestModel.LeadSheetTotalModels = nonCurrentAssestModel.LeadSheetTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                noncurrentassestlistleadSheetTotalModel = nonCurrentAssestModel.LeadSheetTotalModels;

                var assestsNonCurrentTotal = trailbalnces.Where(c => currentAssests.Select(a => a.FRATId).ToList().Contains((Guid)c.FRPATId)).ToList();
                List<AccountModel> finalN = new List<AccountModel>();
                var loopTb = assestsNonCurrentTotal.DistinctBy(c => c.Name).ToList();
                foreach (var finalTotal in loopTb)
                {
                    if (finalTotal.FRPATId != null && finalTotal.FRPATId != Guid.Empty)
                    {
                        var leadSheet = lstleadsheet.Where(c => c.FRATId == finalTotal.FRPATId).FirstOrDefault();
                        if (leadSheet != null)
                            AssestsLeadsheetAccountModel(assestsNonCurrentTotal, leadSheet, finalN, finalTotal, null, type1, notes, accountannotations, lstcomments);
                    }
                }
                var currentAssestsLid = lstleadsheet.Where(c => c.Class == "Assets").Select(a => a.FRATId).ToList();
                var asseststotal = trailbalnces.Where(a => currentAssestsLid.Contains((Guid)a.FRPATId)).ToList();

                #endregion  InnerTotals Ordering and Assigin

                LeadSheetTotalModel sumNonCurrentLeadSheetmodels = new LeadSheetTotalModel();
                sumNonCurrentLeadSheetmodels.LeadSheetTotalModels = nonCurrentAssestModel.LeadSheetTotalModels;
                LeadSheetSubTotals(sumNonCurrentLeadSheetmodels, trailbalnces);
                nonCurrentAssestModel.YearModels = sumNonCurrentLeadSheetmodels.YearModels;
                nonCurrentAssestModel.LeadSheetTotalModels = sumNonCurrentLeadSheetmodels.LeadSheetTotalModels;
                Assests.NonCurrent = nonCurrentAssestModel;

                #endregion Non-CurrentAssests

                balanceSheetModel.Assets = Assests;

                #endregion Assests

                #region Liablities

                var currentLiabilities = lstleadsheet.Where(c => c.SubCategory == "Current" && c.Class == "Liabilities").ToList();
                var nonCurrentLiabilities = lstleadsheet.Where(c => c.SubCategory != null && c.SubCategory.ToUpper() == JournalConstant.NonCurrent.ToUpper() && c.Class == "Liabilities").ToList();
                var Liabilities = new LeadSheetTypeModel();
                var nonCurrentLiabilityModel = new NonCurrentModel();
                var currentLiabilityModel = new CurrentModel();
                Liabilities.IsNonCurrent = true;
                Liabilities.IsCurrent = true;

                #region currentLiabilities

                currentLiabilityModel.MainId = Guid.Parse("71021766-F6F8-49FE-A230-66295B4BC3FB");
                nonCurrentLiabilityModel.MainId = Guid.Parse("61021766-F6F8-49FE-A230-66295B4BC3FB");
                var currentLiabilitiesids = currentLiabilities.Select(a => a.FRATId).ToList();
                var currentLiabilitiessubleadsheets = listsubcategories.Where(a => currentLiabilitiesids.Contains((Guid)a.TypeId) && a.AccountClass == "Current").ToList();
                var typeidscurrentliability = currentLiabilitiessubleadsheets.Select(a => (Guid)a.TypeId).Distinct().ToList();
                var lstleadtrilbalanceLidscurrentliability = trailbalnces.Where(a => a.FRPATId != Guid.Empty).Select(a => a.FRPATId).Distinct().ToList();
                var lstleadtrilbalancecurrentliability = lstleadtrilbalanceLidscurrentliability.Distinct().Except(typeidscurrentliability).ToList();

                #region LeadSheetSubTotalModels               
                foreach (var categoryMaster in lstcategories.Where(c => c.AccountClass == "Current" && c.IsCollapse != true).ToList())
                {
                    currentLiabilitieslistleadSheetTotalModel = BalanceSheetLiabilitiesAndEquityLeadSheetTotalsCheck(commonModel.CompanyId,
                        screenName, currentLiabilitieslistleadSheetTotalModel, years, currentLiabilities, trailbalnces,
                        lstsubcategorys, lstadjustmentaccount, lstcategories, categoryMaster, 2, currentLiabilityModel.MainId,
                        "Current", commonModel.CompanyId, incomandELids, null, null, notes, accountannotations, lstcomments, groupname,
                        orderslist).Where(a => a.LeadSheetTotalModels.Count > 0).ToList();
                }
                #endregion LeadSheetTotalModel                

                #region LeadsheetModel
                if (lstleadtrilbalancecurrentliability != null && lstleadtrilbalancecurrentliability.Count() > 0)
                {
                    lstleadtrilbalancecurrentliability = lstleadtrilbalancecurrentliability.Where(c => currentLiabilitiesids.Contains(c)).ToList();
                    foreach (var leadsheetId in lstleadtrilbalancecurrentliability)
                    {
                        lsttrialbalance = FillLiabilitiesLeadSheetModels(commonModel.CompanyId, screenName, groupname,
                            lsttrialbalance, currentLiabilitieslistleadSheetTotalModel, years, trailbalnces,
                            lstsubcategorys, lstadjustmentaccount, lstcategories, lstcomments, notes,
                            accountannotations, currentLiabilities, currentLiabilityModel, leadsheetId, type, orderslist);
                    }
                }
                #endregion

                #region InnerTotals Ordering and Assigin

                currentLiabilityModel.LeadSheetTotalModels = currentLiabilitieslistleadSheetTotalModel.DistinctBy(a => a.Id).OrderBy(a => a.Recorder).ToList();
                var currentLiabilityorders = orderslist.Where(a => a.LeadSheetType == "Liabilities" &&
                a.AccountClass == "Current").FirstOrDefault();
                if (currentLiabilityorders != null && currentLiabilityorders.Recorder != null)
                {
                    List<string> result = currentLiabilityorders.Recorder.Split(',').ToList();
                    currentLiabilityModel.LeadSheetTotalModels = currentLiabilityModel.LeadSheetTotalModels.
                        OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                currentLiabilitieslistleadSheetTotalModel = currentLiabilityModel.LeadSheetTotalModels;

                var liabilitiesCurrentTotal = trailbalnces.Where(c => (currentLiabilities.Select(a => a.FRATId).ToList()).Contains((Guid)c.FRPATId)).ToList();
                List<AccountModel> finalLC = new List<AccountModel>();
                var loopTb1 = liabilitiesCurrentTotal.DistinctBy(c => c.Name).ToList();
                foreach (var finalTotal in loopTb1)
                {
                    if (finalTotal.FRPATId != null && finalTotal.FRPATId != Guid.Empty)
                    {
                        var leadSheet = lstleadsheet.Where(c => c.FRATId == finalTotal.FRPATId).FirstOrDefault();
                        if (leadSheet != null)
                            FillAccountLiabilitiesAndEquityLeadSheet(liabilitiesCurrentTotal, leadSheet, finalLC, finalTotal, null, type,
                                notes, accountannotations, lstcomments);
                    }
                }

                #endregion InnerTotals Ordering and Assigin

                #region Grand Totals 

                #endregion


                LeadSheetTotalModel sumCurrentLiabilityLeadSheetmodels = new LeadSheetTotalModel();
                sumCurrentLiabilityLeadSheetmodels.LeadSheetTotalModels = currentLiabilityModel.LeadSheetTotalModels;
                LeadSheetSubTotals(sumCurrentLiabilityLeadSheetmodels, trailbalnces);
                currentLiabilityModel.YearModels = sumCurrentLiabilityLeadSheetmodels.YearModels;
                currentLiabilityModel.LeadSheetTotalModels = sumCurrentLiabilityLeadSheetmodels.LeadSheetTotalModels;
                Liabilities.Current = currentLiabilityModel;

                #endregion currentLiabilities

                #region noncurrentLiabilities

                var noncurrentLiabilitiesids = nonCurrentLiabilities.Select(a => a.FRATId).ToList();
                var noncurrentLiabilitiessubleadsheets = listsubcategories.Where(a => noncurrentLiabilitiesids.Contains((Guid)a.TypeId)).ToList();
                var typeidsnoncurrentliability = noncurrentLiabilitiessubleadsheets.Select(a => (Guid)a.TypeId).Distinct().ToList();
                var lstleadtrilbalanceLidsnoncurrentliability = trailbalnces.Where(a => a.FRPATId != Guid.Empty).Select(a => a.FRPATId).Distinct().ToList();
                var lstleadtrilbalancenoncurrentliability = lstleadtrilbalanceLidsnoncurrentliability.Distinct().Except(typeidsnoncurrentliability).ToList();

                #region LeadSheetSubTotalModels               
                foreach (var categoryMaster in lstcategories.Where(c => c.AccountClass == "NonCurrent" && c.IsCollapse != true).ToList())
                {
                    nonCurrentLiabilitieslistleadSheetTotalModel = BalanceSheetLiabilitiesAndEquityLeadSheetTotalsCheck(commonModel.CompanyId, screenName, nonCurrentLiabilitieslistleadSheetTotalModel, years, nonCurrentLiabilities, trailbalnces,
                            lstsubcategorys, lstadjustmentaccount, lstcategories, categoryMaster, 2, nonCurrentLiabilityModel.MainId, "NonCurrent", commonModel.CompanyId, incomandELids, null, null, notes,
                            accountannotations, lstcomments, groupname, orderslist)
                            .Where(a => a.LeadSheetTotalModels.Count > 0).ToList();
                }
                #endregion LeadSheetTotalModel                

                #region LeadsheetModel
                if (lstleadtrilbalancenoncurrentliability != null && lstleadtrilbalancenoncurrentliability.Count() > 0)
                {
                    foreach (var leadsheetId in lstleadtrilbalancenoncurrentliability)
                    {
                        var leadsheet = nonCurrentLiabilities.Where(a => a.FRATId == leadsheetId).FirstOrDefault();
                        if (leadsheet != null)
                        {
                            LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                            leadSheetModel.Id = (Guid)leadsheet.FRATId;
                            leadSheetModel.LeadSheetId = leadsheet.FRATId;
                            leadSheetModel.CommonId = Guid.NewGuid();
                            leadSheetModel.IsCollapse = false;
                            leadSheetModel.MainId = nonCurrentLiabilityModel.MainId;
                            leadSheetModel.IsLeadsheet = true;
                            leadSheetModel.Name = leadsheet.Name;
                            leadSheetModel.LeadSheetId = leadsheet.FRATId;
                            leadSheetModel.AccountClass = leadsheet.SubCategory;
                            leadSheetModel.LeadSheetType = leadsheet.Class;

                            #region Categories
                            lsttrialbalance = FillCategoryTotalModelsForLiabilities(commonModel.CompanyId, screenName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadSheetModel, "NonCurrent", notes, accountannotations, lstcomments);
                            #endregion

                            #region Account
                            lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId);
                            List<AccountModel> lstAccountModels = new List<AccountModel>();
                            var loopTb3 = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                            foreach (var trialbalance in loopTb3.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty && a.SubCategoryId == null))
                            {
                                FillAccountLiabilitiesAndEquityLeadSheet(lsttrialbalance, leadsheet, lstAccountModels, trialbalance, leadSheetModel.CommonId, "NonCurrent", notes, accountannotations, lstcomments);
                            }
                            leadSheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                            #endregion
                            //leadSheet total
                            LeadSheetTotals(lsttrialbalance, leadSheetModel, null);
                            //if (leadSheetModel.AccountModels.Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 ||
                            //         leadSheetModel.CategoryTotalModels.Where(c => c.SubCategoryModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)//#BL
                            var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                            leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                            nonCurrentLiabilitieslistleadSheetTotalModel.Add(leadSheetModel);
                        }

                    }
                }
                #endregion

                #region InnerTotals Ordering and Assigin

                nonCurrentLiabilityModel.LeadSheetTotalModels = nonCurrentLiabilitieslistleadSheetTotalModel.DistinctBy(a => a.Id).OrderBy(a => a.Recorder).ToList();
                var noncurrentLiabilityorders = orderslist.Where(a => a.LeadSheetType == "Liabilities" &&
                a.AccountClass == "NonCurrent").FirstOrDefault();
                if (noncurrentLiabilityorders != null && noncurrentLiabilityorders.Recorder != null)
                {
                    List<string> result = noncurrentLiabilityorders.Recorder.Split(',').ToList();
                    nonCurrentLiabilityModel.LeadSheetTotalModels = nonCurrentLiabilityModel.LeadSheetTotalModels
                        .OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                nonCurrentLiabilitieslistleadSheetTotalModel = nonCurrentLiabilityModel.LeadSheetTotalModels;

                var liabilitiesnonCurrentTotal = trailbalnces.Where(c => (currentLiabilities.Select(a => a.FRATId).ToList()).Contains((Guid)c.FRPATId)).ToList();
                List<AccountModel> finalLNC = new List<AccountModel>();
                var loopTb2 = liabilitiesnonCurrentTotal.DistinctBy(c => c.Name).ToList();
                foreach (var finalTotal in loopTb2)
                {
                    if (finalTotal.FRPATId != null && finalTotal.FRPATId != Guid.Empty)
                    {
                        var leadSheet = lstleadsheet.Where(c => c.FRATId == finalTotal.FRPATId).FirstOrDefault();
                        if (leadSheet != null)
                            FillAccountLiabilitiesAndEquityLeadSheet(liabilitiesnonCurrentTotal, leadSheet, finalLNC, finalTotal, null, type1, notes, accountannotations, lstcomments);
                    }
                }

                #endregion InnerTotals Ordering and Assigin

                #region Grand Totals 


                #endregion


                LeadSheetTotalModel sumNonCurrentLiabilityLeadSheetmodels = new LeadSheetTotalModel();
                sumNonCurrentLiabilityLeadSheetmodels.LeadSheetTotalModels = nonCurrentLiabilityModel.LeadSheetTotalModels;
                LeadSheetSubTotals(sumNonCurrentLiabilityLeadSheetmodels, trailbalnces);
                nonCurrentLiabilityModel.YearModels = sumNonCurrentLiabilityLeadSheetmodels.YearModels;
                nonCurrentLiabilityModel.LeadSheetTotalModels = sumNonCurrentLiabilityLeadSheetmodels.LeadSheetTotalModels;
                Liabilities.NonCurrent = nonCurrentLiabilityModel;

                #endregion noncurrentLiabilities

                balanceSheetModel.Liabilities = Liabilities;

                #endregion noncurrentLiabilities

                #region  Equity

                var lstEquity = lstleadsheet.Where(c => c.Class == "Equity").ToList();
                var lstEquityids = lstEquity.Select(a => a.FRATId).ToList();
                var subleadsheets = listsubcategories.Where(a => lstEquityids.Contains((Guid)a.TypeId) && a.AccountClass == "Equity").ToList();
                var Equitymodel = new LeadSheetTypeModel();
                var lstleadsheetModels = new List<LeadsheetModel>();
                Equitymodel.IsLeadSheet = true;
                Equitymodel.MainId = Guid.Parse("41021766-F6F8-49FE-A230-66295B4BC3FB");

                var typeidsequity = subleadsheets.Select(a => (Guid)a.TypeId).Distinct().ToList();
                var lstleadtrilbalanceLidsequity = trailbalnces.Where(a => a.FRPATId != Guid.Empty).Select(a => a.FRPATId).Distinct().ToList();
                var lstleadtrilbalanceequity = lstleadtrilbalanceLidsequity.Distinct().Except(typeidsequity).ToList();

                #region LeadSheetSubTotalModels               
                foreach (var categoryMaster in lstcategories.Where(c => c.AccountClass == "Equity" && c.IsCollapse != true).ToList())
                {
                    EquitylistleadSheetTotalModel = BalanceSheetLiabilitiesAndEquityLeadSheetTotalsCheck(commonModel.CompanyId,
                        screenName, EquitylistleadSheetTotalModel, years, lstEquity, trailbalnces,
                        lstsubcategorys, lstadjustmentaccount, lstcategories, categoryMaster, 2, Equitymodel.MainId,
                        "Equity", commonModel.CompanyId, incomandELids, null, null, notes, accountannotations, lstcomments, groupname,
                        orderslist).Where(a => a.LeadSheetTotalModels.Count > 0).ToList();
                }
                #endregion LeadSheetTotalModel                

                #region LeadsheetModel
                if (lstleadtrilbalanceequity != null && lstleadtrilbalanceequity.Count() > 0)
                {
                    foreach (var leadsheetId in lstleadtrilbalanceequity)
                    {
                        var leadsheet = lstEquity.Where(a => a.FRATId == leadsheetId && a.Class == "Equity").FirstOrDefault();

                        if (leadsheet != null)
                        {
                            LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                            leadSheetModel.Id = (Guid)leadsheet.FRATId;
                            leadSheetModel.LeadSheetId = leadsheet.FRATId;
                            leadSheetModel.CommonId = Guid.NewGuid();
                            leadSheetModel.MainId = Equitymodel.MainId;
                            leadSheetModel.IsCollapse = false;
                            if (leadsheet != null)
                            {
                                var collapse = orderslist.Where(a => a.TypeId == leadsheet.FRATId).Select(a => a.IsCollapse).FirstOrDefault();
                                if (collapse != null)
                                    leadSheetModel.IsCollapse = (bool)collapse;
                            }
                            leadSheetModel.IsLeadsheet = true;
                            leadSheetModel.Name = leadsheet.Name;
                            leadSheetModel.LeadSheetType = leadsheet.Class;
                            #region Category
                            lsttrialbalance = FillEquityCategoryTotal(commonModel.CompanyId, screenName, trailbalnces,
                                lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance,
                                leadsheet, leadSheetModel, incomandELids, notes, accountannotations, lstcomments);
                            #endregion
                            #region Account
                            lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId);
                            List<AccountModel> lstAccountModels = new List<AccountModel>();
                            var loopTb3 = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                            foreach (var trialbalance in loopTb3.Where(a => a.CategoryId == null && a.SubCategoryId == null).ToList())
                            {
                                FillAccountLiabilitiesAndEquityLeadSheet(lsttrialbalance, leadsheet,
                                    lstAccountModels, trialbalance, leadSheetModel.CommonId, null, notes,
                                    accountannotations, lstcomments);
                            }

                            leadSheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                            if (leadsheet.Remarks != null)
                            {
                                List<string> result = leadsheet.Remarks.Split(',').ToList();
                                leadSheetModel.CategoryTotalModels = leadSheetModel.CategoryTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                            }
                            //Lead Sheet Sub total 
                            LeadSheetTotals(lsttrialbalance, leadSheetModel, null);
                            if (leadSheetModel.Name == "Retained earnings")
                                leadSheetModel.AccountModels = leadSheetModel.AccountModels.OrderByDescending(c => c.Name).ToList();
                            var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                            leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                            EquitylistleadSheetTotalModel.Add(leadSheetModel);

                        }

                        #endregion
                    }
                }

                #endregion LeadsheetModel

                lstleadsheetModels.ForEach(a => a.CategoryModels = a.CategoryModels.Where(s => s.AccountModels.Count() > 0).ToList());
                Equitymodel.LeadSheetTotalModels = EquitylistleadSheetTotalModel.DistinctBy(a => a.Id).ToList();
                var equityorders = orderslist.Where(a => a.LeadSheetType == "Equity" && a.AccountClass == "Equity").FirstOrDefault();
                if (equityorders != null && equityorders.Recorder != null)
                {
                    List<string> result = equityorders.Recorder.Split(',').ToList();
                    Equitymodel.LeadSheetTotalModels = Equitymodel.LeadSheetTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                EquitylistleadSheetTotalModel = Equitymodel.LeadSheetTotalModels;

                LeadSheetTotalModel sumEquitymodel = new LeadSheetTotalModel();
                sumEquitymodel.LeadSheetTotalModels = Equitymodel.LeadSheetTotalModels;
                LeadSheetSubTotals(sumEquitymodel, trailbalnces);
                Equitymodel.YearModels = sumEquitymodel.YearModels;
                Equitymodel.LeadSheetTotalModels = sumEquitymodel.LeadSheetTotalModels;
                balanceSheetModel.Equity = Equitymodel;

                #endregion Equity

                #region FinalGrandTotal

                var lstEquityTotal = trailbalnces.Where(a => (lstEquity.Select(c => c.FRATId).ToList()).Contains(a.FRPATId)).ToList();
                AccountModel accountModelEquity = new AccountModel();

                #endregion FinalGrandTotal

                #region OrderSavingFirstTime and providing index order 

                BalanceSheetOrderSaving(commonModel.CompanyId, balanceSheetModel, currentassestsorders, noncurrentassestsorders, currentLiabilityorders, noncurrentLiabilityorders, equityorders, lstleadsheet);

                CurrentAssestslistleadSheetTotalModel = balanceSheetModel.Assets.Current.LeadSheetTotalModels;
                noncurrentassestlistleadSheetTotalModel = balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels;
                currentLiabilitieslistleadSheetTotalModel = balanceSheetModel.Liabilities.Current.LeadSheetTotalModels;
                nonCurrentLiabilitieslistleadSheetTotalModel = balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels;
                EquitylistleadSheetTotalModel = balanceSheetModel.Equity.LeadSheetTotalModels;

                #endregion OrderSavingFirstTime and providing index order 

                #region Grand Sub Totals
                List<string> lsttotalsstrings = new List<string>() { "Non-current Assets", "Current Assets", "Equity", "Non-current Liabilities", "Current Liabilities" };

                List<LeadSheetTotalModel> lstmainleadsheetTotalModels = new List<LeadSheetTotalModel>();

                if (lstcategories.Any(a => a.IsCollapse == true))
                {
                    foreach (var maincategories in lstcategories.Where(a => a.IsCollapse == true).ToList())
                    {
                        FillNewMethod(lstAccountsData, CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel,
                        currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel,
                        EquitylistleadSheetTotalModel, years, lstsubcategorys, nonCurrentAssestModel, currentAssetModel,
                        null, null, nonCurrentLiabilityModel, currentLiabilityModel, null,
                        null, Equitymodel, accountModelEquity, lstmainleadsheetTotalModels, maincategories, lstcategories, 2, null);
                    }
                }
                #region Normal Totals
                FillGrandLeadSheetModels(lstAccountsData, CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel,
                    currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel,
                    EquitylistleadSheetTotalModel, null, lstsubcategorys, null, null,
                    null, null, accountModelEquity, lsttotalsstrings, lstmainleadsheetTotalModels,
                    nonCurrentAssestModel, currentAssetModel, nonCurrentLiabilityModel, currentLiabilityModel, Equitymodel, trailbalnces);

                #endregion
                var finalorder = orderslist.Where(a => a.LeadSheetType == "Balance Sheet" && a.IsCollapse == true).FirstOrDefault();

                #region Final Order
                if (finalorder == null)
                {
                    var totalorder = lstmainleadsheetTotalModels.Where(a => (a.LeadSheetTotalModels != null && a.LeadSheetTotalModels.Count > 0)).ToList();
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = commonModel.CompanyId;
                    order.LeadSheetType = "Balance Sheet";
                    order.AccountClass = "Balance Sheet";
                    order.IsCollapse = true;
                    order.Recorder = string.Join(",", totalorder.Select(c => c.Id).ToList());
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                    _UnitOfWorkAsync.SaveChanges();
                }
                #endregion
                if (finalorder != null && finalorder.Recorder != null)
                {
                    List<string> result = finalorder.Recorder.Split(',').ToList();
                    lstmainleadsheetTotalModels = lstmainleadsheetTotalModels.
                        OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                }
                lstmainleadsheetTotalModels = lstmainleadsheetTotalModels.
                    Where(a => (a.LeadSheetTotalModels != null && a.LeadSheetTotalModels.Count > 0)).ToList();

                #endregion

                finalBalanceSheetModel.LeadSheetTotalModels = lstmainleadsheetTotalModels.OrderBy(c => c.Recorder).ToList();
                return finalBalanceSheetModel;

            }
            catch (Exception e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                throw e;
            }
        }


        //private void NewBuildColoumnsHTMLData(NewStatementModel finalBalanceSheetModel, List<string> ColumnList, CommonModel commonModel)
        //{
        //    Dictionary<string, string> columnList = new Dictionary<string, string>();
        //    columnList.Add("AccountName", "Account Name");

        //    foreach (var item in ColumnList)
        //    {
        //        if (item.Contains("Vs"))
        //            columnList.Add(item, "% Change");
        //        else
        //            columnList.Add(item, item);
        //    }

        //    List<ColumnLsts> columns = new List<ColumnLsts>();
        //    foreach (var lst in columnList)
        //    {
        //        ColumnLsts column = new ColumnLsts();
        //        column.Column = lst.Key;
        //        column.HtmlData = lst.Value;

        //        if (lst.Key == "AccountName" || lst.Key == "Code")
        //        {
        //            column.IsAmount = false;
        //        }
        //        else
        //        {
        //            column.IsAmount = true;
        //        }
        //        columns.Add(column);
        //    }
        //    finalBalanceSheetModel.ColumnLists = columns;
        //    if (commonModel.Frequency != 1)
        //    {
        //        int index = 0;
        //        bool isFirst = true;
        //        List<ColumnLsts> lstClmList = new List<ColumnLsts>();
        //        foreach (var item in finalBalanceSheetModel.ColumnLists)
        //        {
        //            if (item.Column.Contains("Vs"))
        //            {
        //                if (isFirst)
        //                {
        //                    lstClmList.Insert(index - 2, item);
        //                    isFirst = false;
        //                }
        //                else
        //                    lstClmList.Insert(index - 1, item);
        //            }
        //            else
        //                lstClmList.Add(item);
        //            index++;
        //        }
        //        finalBalanceSheetModel.ColumnLists = lstClmList;
        //    }
        //}

        private static void BuildColoumnsHTMLData(FinalBalanceSheetModel finalBalanceSheetModel, List<string> ColumnList, CommonModel commonModel)
        {
            Dictionary<string, string> columnList = new Dictionary<string, string>();
            columnList.Add("Name", "<p>Account Name</p>");
            //columnList.Add("Code", "<p>Account Code</p>");
            //foreach (var item in ColumnList)
            //{
            //    if (item.Contains("Vs"))
            //        columnList.Add(item,
            //            "<p class=" + "text-center" + ">" + item.Split(new string[] { "Vs" }, StringSplitOptions.None).ToList().FirstOrDefault() + "</p><p class=" + "text-center" + ">Vs</p><p class=" + "text-center" + ">" + item.Split(new string[] { "Vs" }, StringSplitOptions.None).ToList().LastOrDefault() + "</p><p class=" + "text-center" + ">(% Change)</p>");
            //    else
            //        columnList.Add(item, "<p>" + item + "</p>");
            //}
            foreach (var item in ColumnList)
            {
                if (item.Contains("Vs"))
                {
                    //** old
                    //columnList.Add(item,
                    //    "<p class=" + "text-center" + ">" + item.Split(new string[] { "Vs" }, StringSplitOptions.None).ToList().FirstOrDefault() + "</p><p class=" + "text-center" + ">Vs</p><p class=" + "text-center" + ">" + item.Split(new string[] { "Vs" }, StringSplitOptions.None).ToList().LastOrDefault() + "</p><p class=" + "text-center" + ">(% Change)</p>");
                    var value = item.Replace("Vs", "&#013;&#8195;&#8195;Vs &#013;");
                    columnList.Add(item, "<p class=text-center data-toggle=" + "\"" + "tooltip" + "\"" + " data-placement=" + "\"" + "right" + "\"" + " data-html=" + "\"" + "true" + "\"" + " title=" + "\"" + value + "\"" + ">% Change</p>");
                }
                else
                {
                    var value = item.Replace("To", "<br> To <br>");
                    columnList.Add(item, "<p class=text-center>" + value + "</p>");
                    //columnList.Add(item, "<p>" + item + "</p>");//**old
                }
            }

            List<ColumnLsts> columns = new List<ColumnLsts>();
            foreach (var lst in columnList)
            {
                ColumnLsts column = new ColumnLsts();
                column.Column = lst.Key;
                column.HtmlData = lst.Value;

                if (lst.Key == "Name" || lst.Key == "Code")
                {
                    column.IsAmount = false;
                }
                else
                {
                    column.IsAmount = true;
                }
                columns.Add(column);
            }
            finalBalanceSheetModel.ColumnLists = columns;
            if (commonModel.Frequency != 1)
            {
                int index = 0;
                bool isFirst = true;
                List<ColumnLsts> lstClmList = new List<ColumnLsts>();
                foreach (var item in finalBalanceSheetModel.ColumnLists)
                {
                    if (item.Column.Contains("Vs"))
                    {
                        if (isFirst)
                        {
                            lstClmList.Insert(index - 2, item);
                            isFirst = false;
                        }
                        else
                            lstClmList.Insert(index - 1, item);
                    }
                    else
                        lstClmList.Add(item);
                    index++;
                }
                finalBalanceSheetModel.ColumnLists = lstClmList;
            }
        }

        #endregion BalanceSheet

        private List<LeadSheetTotalModel> BalanceSheetAssestsLeadSheetTotalsCheck(long companyId, string featureName, List<LeadSheetTotalModel> listleadSheetTotalModel,
       Company years, List<AccountType> lstleadsheet, List<BalanceSheetSpModel> trailbalnces,
       List<SubCategory> lstsubcategorys, List<Address> lstadjustmentaccount, List<Category> lstcategories,
       Category categoryMaster, int loop, Guid mainId, string type, Guid? parentId = null, int? Rec = null,
       List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null,
       string groupname = null, List<Order> lstorders = null)
        {
            //#BL            
            var notRequired = lstsubcategorys.Where(c => c.TypeId == categoryMaster.Id && c.AccountClass.ToUpper() == type.ToUpper()
            && c.Type == "SubTotal").Any();//t
            if (loop == 1)
                notRequired = false;

            if (!notRequired)
            {
                if (categoryMaster.Type == "LeadSheet")
                {
                    LeadSheetTotalModel leadSheetTotalModel = AddMethodForAssestsCheck(categoryMaster, years,
                        lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount, companyId, featureName,
                        lstcategories, mainId, type, notes, accountannotations, lstcomments, groupname, lstorders);
                    leadSheetTotalModel.DupRecorder = Rec == null ? categoryMaster.Recorder : Rec;
                    //LeadSheetSubTotals(leadSheetTotalModel, trailbalnces);

                    var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                    leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    listleadSheetTotalModel.Add(leadSheetTotalModel);
                }
                else if (categoryMaster.Type == "SubTotal")
                {
                    List<BalanceSheetSpModel> lsttrialbalance = null;
                    LeadSheetTotalModel ChildSubTotal = new LeadSheetTotalModel();
                    var lstChildSubCategory = lstsubcategorys.Where(c => c.ParentId == categoryMaster.Id && c.AccountClass.ToUpper() == type.ToUpper()).ToList();
                    if (lstChildSubCategory.Count > 0)
                    {
                        ChildSubTotal.Id = categoryMaster.Id;
                        ChildSubTotal.Name = categoryMaster.Name;
                        ChildSubTotal.ColorCode = categoryMaster.ColorCode;
                        ChildSubTotal.MainId = mainId;
                        ChildSubTotal.IsLeadsheet = false;
                        ChildSubTotal.CommonId = categoryMaster.Id;
                        ChildSubTotal.ParentId = parentId != null ? (Guid)parentId : new Guid();
                        ChildSubTotal.Recorder = categoryMaster.Recorder;
                        ChildSubTotal.DupRecorder = Rec == null ? categoryMaster.Recorder : Rec;
                        List<LeadSheetTotalModel> leadSheetSubChildModel = new List<LeadSheetTotalModel>();
                        foreach (var item in lstChildSubCategory)
                        {
                            var subleadsheet = item;
                            LeadSheetTotalModel leadSheetTotalModel = new LeadSheetTotalModel();
                            if (item.Type == "LeadSheet")
                            {
                                lsttrialbalance = FillSuTotalLeadSheetModels(companyId, featureName, years, lstleadsheet, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, mainId, type, notes, accountannotations, lstcomments, groupname, lsttrialbalance, ChildSubTotal, lstChildSubCategory, leadSheetSubChildModel, item, subleadsheet, lstorders);
                            }
                            else
                            {
                                var masterData = lstcategories.Where(c => c.Id == item.TypeId).FirstOrDefault();
                                var data = AddMethodForAssestsCheck(masterData, years, lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount, companyId, featureName, lstcategories, mainId, type, notes, accountannotations, lstcomments, groupname, lstorders);
                                data.Recorder = item.Recorder;
                                data.ColorCode = masterData.ColorCode;
                                data.ParentId = ChildSubTotal.Id;
                                data.DupRecorder = ChildSubTotal.Recorder;
                                leadSheetTotalModel = data;
                                LeadSheetSubTotals(leadSheetTotalModel, trailbalnces);

                                var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                                leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                                if (leadSheetTotalModel.LeadSheetTotalModels.Count > 0)
                                    leadSheetSubChildModel.Add(leadSheetTotalModel);
                            }
                        }
                        ChildSubTotal.LeadSheetTotalModels = leadSheetSubChildModel.OrderBy(a => a.Recorder).ToList();
                        LeadSheetSubTotals(ChildSubTotal, trailbalnces);

                        var amount1 = ChildSubTotal.YearModels.Sum(c => c.Balance);
                        ChildSubTotal.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;
                        if (ChildSubTotal.LeadSheetTotalModels.Count > 0)
                            listleadSheetTotalModel.Add(ChildSubTotal);
                    }
                    else
                    {
                        LeadSheetTotalModel leadSheetTotalModel = AddMethodForAssestsCheck(categoryMaster, years, lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount, companyId, featureName, lstcategories, mainId, type, notes, accountannotations, lstcomments, groupname, lstorders);

                        var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                        leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                        listleadSheetTotalModel.Add(leadSheetTotalModel);
                    }
                }
            }
            return listleadSheetTotalModel;
        }

        private List<LeadSheetTotalModel> BalanceSheetLiabilitiesAndEquityLeadSheetTotalsCheck(long companyId, string featureName, List<LeadSheetTotalModel> listleadSheetTotalModel,
      Company years, List<AccountType> lstleadsheet, List<BalanceSheetSpModel> trailbalnces,
      List<SubCategory> lstsubcategorys, List<Address> lstadjustmentaccount, List<Category> lstcategories,
      Category categoryMaster, int loop, Guid mainId, string type, long companyid, bool incomandELids,
      Guid? parentId = null, int? Rec = null, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null, string groupname = null, List<Order> lstorders = null)
        {
            var notRequired = lstsubcategorys.Where(c => c.TypeId == categoryMaster.Id && c.AccountClass.ToUpper() == type.ToUpper() && c.Type == "SubTotal").Any();//#GL
            if (loop == 1)
                notRequired = false;

            if (!notRequired)
            {
                if (categoryMaster.Type == "LeadSheet")
                {
                    LeadSheetTotalModel leadSheetTotalModel = AddMethodForLiabilitiesAndEquityCheck(categoryMaster, years, lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount, companyid, featureName, lstcategories, mainId, type, companyid, incomandELids, notes, accountannotations, lstcomments, groupname, lstorders);
                    leadSheetTotalModel.DupRecorder = Rec == null ? categoryMaster.Recorder : Rec;

                    var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                    leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    listleadSheetTotalModel.Add(leadSheetTotalModel);
                }
                else if (categoryMaster.Type == "SubTotal")
                {
                    List<BalanceSheetSpModel> lsttrialbalance = null;
                    LeadSheetTotalModel ChildSubTotal = new LeadSheetTotalModel();
                    var lstChildSubCategory = lstsubcategorys.Where(c => c.ParentId == categoryMaster.Id && c.AccountClass.ToUpper() == type.ToUpper()).ToList();
                    if (lstChildSubCategory.Count > 0)
                    {
                        ChildSubTotal.Id = categoryMaster.Id;
                        ChildSubTotal.Name = categoryMaster.Name;
                        ChildSubTotal.ColorCode = GetColor(6);
                        ChildSubTotal.MainId = mainId;
                        ChildSubTotal.IsLeadsheet = false;
                        ChildSubTotal.IsCollapse = categoryMaster.IsCollapse;
                        ChildSubTotal.CommonId = categoryMaster.Id;
                        ChildSubTotal.ParentId = parentId != null ? (Guid)parentId : new Guid();
                        ChildSubTotal.Recorder = categoryMaster.Recorder;
                        ChildSubTotal.DupRecorder = Rec == null ? categoryMaster.Recorder : Rec;
                        List<LeadSheetTotalModel> leadSheetSubChildModel = new List<LeadSheetTotalModel>();
                        foreach (var item in lstChildSubCategory)
                        {
                            var subleadsheet = item;
                            LeadSheetTotalModel leadSheetTotalModel = new LeadSheetTotalModel();

                            if (item.Type == "LeadSheet")
                            {
                                var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
                                if (leadsheet != null)
                                {
                                    LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                                    leadSheetModel.Id = (Guid)leadsheet.FRATId;
                                    leadSheetModel.LeadSheetId = leadsheet.FRATId;
                                    leadSheetModel.MainId = mainId;
                                    leadSheetModel.CommonId = Guid.NewGuid();
                                    leadSheetModel.IsCollapse = item.IsCollapse;
                                    leadSheetModel.IsLeadsheet = true;
                                    leadSheetModel.Name = leadsheet.Name;
                                    leadSheetModel.AccountClass = leadsheet.SubCategory;
                                    leadSheetModel.DupRecorder = item.Recorder;
                                    leadSheetModel.Recorder = categoryMaster.Recorder;
                                    leadSheetModel.ParentId = ChildSubTotal.Id;
                                    leadSheetModel.LeadSheetType = leadsheet.Class;
                                    var incometotals = trailbalnces.Where(a => a.FRPATId == leadsheet.FRATId);
                                    var accountids = trailbalnces.Where(a => a.FRPATId == leadsheet.FRATId).Select(a => a.FRCoaId).ToList();

                                    #region Categories
                                    if (leadSheetModel.LeadSheetType == "Liabilities")
                                    {
                                        lsttrialbalance = FillCategoryTotalModelsForLiabilities(companyId, featureName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadSheetModel, "Current", notes, accountannotations, lstcomments);
                                    }
                                    else
                                    {
                                        lsttrialbalance = FillEquityCategoryTotal(companyId, featureName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadSheetModel, incomandELids, notes, accountannotations, lstcomments);

                                    }
                                    #endregion

                                    #region Account
                                    lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId);
                                    List<AccountModel> lstAccountModels = new List<AccountModel>();
                                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                    foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null && a.SubCategoryId == null))
                                    {
                                        FillAccountLiabilitiesAndEquityLeadSheet(lsttrialbalance, leadsheet, lstAccountModels, trialbalance, leadSheetModel.CommonId, type, notes, accountannotations, lstcomments);

                                    }
                                    leadSheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                                    #endregion
                                    if (leadSheetModel.CategoryTotalModels.Count > 0)
                                    {
                                        var savedOrder = lstChildSubCategory.Where(c => c.SubCategoryOrder != null).Select(b => b.SubCategoryOrder).FirstOrDefault();
                                        if (savedOrder != null && savedOrder != string.Empty)
                                        {
                                            var lstSavedOrder = savedOrder.Split(',').ToList();
                                            var orderedList = leadSheetModel.CategoryTotalModels.OrderBy(d => lstSavedOrder.IndexOf(d.Id.ToString())).ToList();
                                            leadSheetModel.CategoryTotalModels = orderedList;
                                        }
                                    }
                                    //if (leadSheetModel.AccountModels.Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.SubCategoryModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)
                                    //{
                                    LeadSheetTotals(trailbalnces, leadSheetModel, type);
                                    var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                                    leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                                    leadSheetSubChildModel.Add(leadSheetModel);
                                    //}
                                }
                            }
                            else
                            {
                                var masterData = lstcategories.Where(c => c.Id == item.TypeId).FirstOrDefault();
                                var data = AddMethodForLiabilitiesAndEquityCheck(masterData, years, lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount, companyId, featureName, lstcategories, mainId, type, companyid, incomandELids, notes, accountannotations, lstcomments, groupname, lstorders);
                                data.DupRecorder = ChildSubTotal.Recorder;
                                data.Recorder = item.Recorder;
                                data.ParentId = ChildSubTotal.Id;
                                leadSheetTotalModel = data;

                                var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                                leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                                if (leadSheetTotalModel.LeadSheetTotalModels.Count > 0)
                                    leadSheetSubChildModel.Add(leadSheetTotalModel);
                            }
                        }
                        ChildSubTotal.LeadSheetTotalModels = leadSheetSubChildModel.OrderBy(a => a.Recorder).ToList();
                        LeadSheetSubTotals(ChildSubTotal, trailbalnces);
                        var amount1 = ChildSubTotal.YearModels.Sum(c => c.Balance);
                        ChildSubTotal.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;
                        if (ChildSubTotal.LeadSheetTotalModels.Count > 0)
                            listleadSheetTotalModel.Add(ChildSubTotal);
                    }
                    else
                    {
                        LeadSheetTotalModel leadSheetTotalModel = AddMethodForLiabilitiesAndEquityCheck(categoryMaster, years, lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount, companyId, featureName, lstcategories, mainId, type, companyid, incomandELids, notes, accountannotations, lstcomments, groupname, lstorders);

                        var amount = leadSheetTotalModel.YearModels.Sum(c => c.Balance);
                        leadSheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                        listleadSheetTotalModel.Add(leadSheetTotalModel);
                    }
                }
            }
            return listleadSheetTotalModel;
        }

        private List<BalanceSheetSpModel> FillSuTotalLeadSheetModels1(Category categoryMaster,
            Company years, List<SubCategory> lstsubcategorys, List<AccountType> lstleadsheet,
            List<BalanceSheetSpModel> trailbalnces, List<Address> lstadjustmentaccount,
            long companyId, string featureName, List<Category> lstcategories, Guid mainId,
            string type, List<Address> notes, List<Address> accountannotations, List<Address>
            lstcomments, string groupname, LeadSheetTotalModel leadSheetTotalModel, List<BalanceSheetSpModel>
            lsttrialbalance, List<LeadSheetTotalModel> listLeadsheetModel, List<SubCategory> leadsheettotaldetails,
            SubCategory subleadsheet, List<Order> lstorders = null)
        {
            var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
            if (leadsheet != null)
            {
                LeadSheetTotalModel leadsheetModel = new LeadSheetTotalModel();
                leadsheetModel.Id = (Guid)leadsheet.FRATId;
                leadsheetModel.LeadSheetId = leadsheet.FRATId;
                leadsheetModel.Name = leadsheet.Name;
                leadsheetModel.CommonId = Guid.NewGuid();
                leadsheetModel.AccountClass = leadsheet.SubCategory;
                leadsheetModel.ParentId = leadSheetTotalModel.Id;
                leadsheetModel.LeadSheetType = leadsheet.Class;
                leadsheetModel.IsCollapse = subleadsheet.IsCollapse;
                leadsheetModel.IsLeadsheet = true;
                leadsheetModel.LeadSheetId = leadsheet.FRATId;
                leadsheetModel.MainId = mainId;
                leadsheetModel.DupRecorder = categoryMaster.Recorder;
                leadsheetModel.Recorder = subleadsheet.Recorder;

                #region Category
                lsttrialbalance = FillAssestsCategoryTotalModels(companyId, featureName, trailbalnces,
                    lstsubcategorys, null, lstcategories, lsttrialbalance, leadsheet,
                    leadsheetModel, type, null, null, null);
                #endregion

                #region Account
                lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == subleadsheet.TypeId).ToList();
                List<AccountModel> lstAccountModels = new List<AccountModel>();
                var loopTb = lsttrialbalance.DistinctBy(c => c.FRCoaId).ToList();
                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null && a.SubCategoryId == null))
                {
                    AssestsLeadsheetAccountModel(lsttrialbalance, leadsheet, lstAccountModels, trialbalance, leadsheetModel.CommonId, type, notes, accountannotations, lstcomments);
                }
                leadsheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(c => c.Name).ToList();
                #endregion


                if (leadsheetModel.CategoryTotalModels.Count > 0)
                {
                    var savedOrder = leadsheettotaldetails.Where(c => c.SubCategoryOrder != null && c.TypeId == leadsheetModel.Id).Select(b => b.SubCategoryOrder).FirstOrDefault();
                    if (savedOrder != null && savedOrder != string.Empty)
                    {
                        var lstSavedOrder = savedOrder.Split(',').ToList();
                        var orderedList = leadsheetModel.CategoryTotalModels.OrderBy(d => lstSavedOrder.IndexOf(d.Id.ToString())).ToList();
                        leadsheetModel.CategoryTotalModels = orderedList;
                    }
                }
                if (leadsheetModel.AccountModels.Count() > 0 || leadsheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 ||
                    leadsheetModel.CategoryTotalModels.SelectMany(c => c.CategoryTotalModels).Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0)//#BL
                {
                    LeadSheetTotals(lsttrialbalance, leadsheetModel, null);

                    var amount = leadsheetModel.YearModels.Sum(c => c.Balance);
                    leadsheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    listLeadsheetModel.Add(leadsheetModel);
                }

            }

            return lsttrialbalance;
        }


        private List<BalanceSheetSpModel> FillEquityCategoryTotal(long companyId, string screenName,
        List<BalanceSheetSpModel> trailbalnces, List<SubCategory> lstsubcategorys, List<Address>
        lstadjustmentaccount, List<Category> lstcategories, List<BalanceSheetSpModel> lsttrialbalance, AccountType leadsheet,
        LeadSheetTotalModel leadSheetModel, bool incomandELids, List<Address> notes = null, List<Address>
        accountannotations = null, List<Address> lstcomments = null, List<Order> lstOrder = null)
        {
            #region Category
            var lstCategories = lstcategories.Where(a => a.Type == "Category" && a.LeadsheetId == leadsheet.FRATId).ToList();
            var lstsubCategorys = lstsubcategorys.Where(a => a.Type == "Category").ToList();
            var typeidscategory = lstsubCategorys.Select(a => a.TypeId).ToList();
            var lstleadtrilbalanceCids = trailbalnces.Where(a => a.FRPATId != Guid.Empty && a.CategoryId != null).Select(a => a.CategoryId).ToList();
            var lstcatrgorytrilbalance = lstleadtrilbalanceCids.Distinct().Except(typeidscategory).ToList();
            var balancecategory = lstsubcategorys.Where(a => a.Type == leadSheetModel.Name && a.CompanyId == companyId).ToList();
            List<CategoryTotalModel> lstCategoryTotalModels = new List<CategoryTotalModel>();
            if (lstCategories != null && lstCategories.Count > 0)
            {
                foreach (var categorys in lstCategories)
                {
                    var lstcategory = lstsubCategorys.Select(a => a.TypeId).FirstOrDefault();
                    CategoryTotalModel categoryTotalModels = new CategoryTotalModel();
                    categoryTotalModels.Id = categorys.Id;
                    categoryTotalModels.IsCollapse = false;
                    categoryTotalModels.LeadSheetId = leadSheetModel.Id;
                    categoryTotalModels.Name = categorys.Name;
                    categoryTotalModels.RecOrder = (int)categorys.Recorder;
                    categoryTotalModels.ColorCode = GetColor(4);
                    categoryTotalModels.CommonId = Guid.NewGuid();
                    var totals = trailbalnces.Where(a => typeidscategory.Contains(a.CategoryId));
                    var lstcategorytrilbalanceids = totals.Select(a => a.FRCoaId).Distinct().ToList();
                    var subcategorytotalslist = lstsubcategorys.Where(a => a.ParentId == categoryTotalModels.Id).OrderBy(a => a.Recorder).ToList();
                    List<CategoryTotalModel> lstCategoryModel = new List<CategoryTotalModel>();
                    foreach (var categoryid in subcategorytotalslist)
                    {
                        var balancecategoryid = balancecategory.Select(a => a.Id).ToList();
                        if (balancecategoryid.Contains((Guid)categoryid.TypeId))
                        {
                            var categorybalance = balancecategory.FirstOrDefault(a => a.Id == categoryid.TypeId);
                            CategoryTotalModel categoryModel = new CategoryTotalModel();
                            categoryModel.Id = categorybalance.Id;
                            categoryModel.CategoryId = categorybalance.Id;
                            categoryModel.RecOrder = (int)categorybalance.Recorder;
                            categoryModel.Name = categorybalance.Name;
                            categoryModel.CommonId = categoryTotalModels.CommonId;
                            categoryModel.IsCollapse = false;
                            categoryModel.IsCategory = true;
                            categoryModel.IsCategorised = true;
                            categoryModel.LeadSheetId = leadsheet.FRATId;
                            categoryModel.LeadSheetName = leadsheet.Name;
                            lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id);
                            if (!lsttrialbalance.Any())
                            {
                                lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId);
                                List<AccountModel> lstAccountModel = new List<AccountModel>();
                                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
                                {
                                    FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                }
                                leadSheetModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                            }
                            else
                            {
                                var lstsubcategory = _subCategoryService.GetByCid(categorybalance.Id);
                                List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
                                if (lstsubcategory.Any())
                                {
                                    foreach (var subcategorys in lstsubcategory)
                                    {
                                        AccountModel subcategoryModel = new AccountModel();
                                        subcategoryModel.Id = subcategorys.Id;
                                        subcategoryModel.IsSubCategoryModel = true;
                                        subcategoryModel.Name = subcategorys.Name;
                                        subcategoryModel.ColorCode = GetColor(8);
                                        subcategoryModel.CommonId = Guid.NewGuid();
                                        subcategoryModel.IsCollapse = false;
                                        subcategoryModel.CategoryId = subcategorys.CategoryId;
                                        var lsttrialbalancesub = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id && c.SubCategoryId == subcategorys.Id);
                                        List<AccountModel> lstAccountModel = new List<AccountModel>();
                                        var loopTb1 = lsttrialbalancesub.DistinctBy(c => c.Name).ToList();
                                        foreach (var trialbalance in loopTb1)
                                        {
                                            FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, subcategorys, lstAccountModel, trialbalance, subcategoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                        }
                                        subcategoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList(); ;
                                        if (subcategoryModel.AccountModels.Count() > 0)
                                        {
                                            SubCategoryTotals(trailbalnces, subcategoryModel, leadsheet);
                                            var amount2 = subcategoryModel.YearModels.Sum(c => c.Balance);
                                            subcategoryModel.IsShowZero = (amount2 == null || amount2 == 0) ? true : false;

                                            lstSubCategoryModel.Add(subcategoryModel);
                                        }
                                    }
                                    //categoryModel.SubCategoryModels = lstSubCategoryModel;
                                    #region Accounts
                                    List<AccountModel> lstAccountModelsc = new List<AccountModel>();
                                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                    foreach (var trialbalance in loopTb.Where(a => a.CategoryId == categorybalance.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)))
                                    {
                                        FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstSubCategoryModel, trialbalance, categoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                    }
                                    categoryModel.AccountModels = lstSubCategoryModel;
                                    #endregion
                                }
                                else
                                {
                                    List<AccountModel> lstAccountModel = new List<AccountModel>();
                                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                    foreach (var trialbalance in loopTb)
                                    {
                                        FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                    }
                                    categoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                                }
                            }
                            #region Order
                            if (lstOrder != null)
                            {
                                var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
                                if (categoryOrderLeadSheet != null)
                                {
                                    leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                                    List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                                    categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                                }
                            }
                            #endregion
                            //category totals
                            CategoryTotals(trailbalnces, categoryModel, leadsheet);
                            var amount = categoryModel.YearModels.Sum(c => c.Balance);
                            categoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                            lstCategoryModel.Add(categoryModel);
                        }
                    }
                    categoryTotalModels.CategoryTotalModels = lstCategoryModel.DistinctBy(a => a.Name).ToList();
                    var amount1 = categoryTotalModels.YearModels.Sum(c => c.Balance);
                    categoryTotalModels.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;
                    lstCategoryTotalModels.Add(categoryTotalModels);
                }
                leadSheetModel.CategoryTotalModels = lstCategoryTotalModels.Where(a => a.CategoryTotalModels != null).DistinctBy(a => a.Name).ToList();
            }
            if (lstcatrgorytrilbalance != null && lstcatrgorytrilbalance.Count > 0)
            {
                foreach (var categoryid in lstcatrgorytrilbalance)
                {
                    var balancecategoryid = balancecategory.Select(a => a.Id).ToList();
                    if (balancecategoryid.Contains((Guid)categoryid))
                    {
                        var categorybalance = balancecategory.FirstOrDefault(a => a.Id == categoryid);
                        CategoryTotalModel categoryModel = new CategoryTotalModel();
                        categoryModel.Id = categorybalance.Id;
                        categoryModel.CategoryId = categorybalance.Id;
                        categoryModel.Name = categorybalance.Name;
                        categoryModel.CommonId = Guid.NewGuid();
                        categoryModel.IsCollapse = false;
                        categoryModel.IsCategory = true;
                        categoryModel.IsCategorised = true;
                        categoryModel.LeadSheetId = leadsheet.FRATId;
                        categoryModel.LeadSheetName = leadsheet.Name;
                        lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id);
                        if (!lsttrialbalance.Any())
                        {
                            lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId);
                            List<AccountModel> lstAccountModel = new List<AccountModel>();
                            var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                            foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
                            {
                                FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, null, notes, accountannotations, lstcomments);
                            }
                            leadSheetModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                        }
                        else
                        {
                            var lstsubcategory = _subCategoryService.GetByCid(categorybalance.Id);
                            List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
                            if (lstsubcategory.Any())
                            {
                                foreach (var subcategorys in lstsubcategory)
                                {
                                    AccountModel subcategoryModel = new AccountModel();
                                    subcategoryModel.Id = subcategorys.Id;
                                    subcategoryModel.IsSubCategoryModel = true;
                                    subcategoryModel.Name = subcategorys.Name;
                                    subcategoryModel.ColorCode = GetColor(2);
                                    subcategoryModel.CommonId = Guid.NewGuid();
                                    subcategoryModel.IsCollapse = false;
                                    subcategoryModel.CategoryId = subcategorys.CategoryId;
                                    var lsttrialbalancesub = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id && c.SubCategoryId == subcategorys.Id);
                                    List<AccountModel> lstAccountModel = new List<AccountModel>();
                                    var loopTb1 = lsttrialbalancesub.DistinctBy(c => c.Name).ToList();
                                    foreach (var trialbalance in loopTb1)
                                    {
                                        FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, subcategorys, lstAccountModel, trialbalance, subcategoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                    }
                                    subcategoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                                    if (subcategoryModel.AccountModels.Count() > 0)
                                    {
                                        SubCategoryTotals(trailbalnces, subcategoryModel, leadsheet);
                                        var amount1 = subcategoryModel.YearModels.Sum(c => c.Balance);
                                        subcategoryModel.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;

                                        lstSubCategoryModel.Add(subcategoryModel);
                                    }
                                }
                                //categoryModel.AccountModels = lstSubCategoryModel;
                                #region Accounts
                                //	List<AccountModel> lstAccountModelsc = new List<AccountModel>();
                                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == categorybalance.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)))
                                {
                                    FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstSubCategoryModel, trialbalance, categoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                }
                                categoryModel.AccountModels = lstSubCategoryModel;
                                #endregion
                            }
                            else
                            {
                                List<AccountModel> lstAccountModel = new List<AccountModel>();
                                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                foreach (var trialbalance in loopTb)
                                {
                                    FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, null, notes, accountannotations, lstcomments);
                                }
                                categoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList(); ;
                            }
                        }
                        #region Order
                        if (lstOrder != null)
                        {
                            var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
                            if (categoryOrderLeadSheet != null)
                            {
                                leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                                List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                                categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                            }
                        }
                        #endregion
                        //category totals
                        CategoryTotals(trailbalnces, categoryModel, leadsheet);
                        var amount = categoryModel.YearModels.Sum(c => c.Balance);
                        categoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                        if (categoryModel.AccountModels.Count() > 0 || categoryModel.SubCategoryModels.Count() > 0)
                            lstCategoryTotalModels.Add(categoryModel);
                    }

                }
            }
            #endregion

            leadSheetModel.CategoryTotalModels = lstCategoryTotalModels.DistinctBy(a => a.Id).OrderBy(a => a.RecOrder).ToList();
            return lsttrialbalance;
        }

        private List<BalanceSheetSpModel> FillAssestsCategoryTotalModels(long companyId,
            string screenName, List<BalanceSheetSpModel> trailbalnces, List<SubCategory>
            lstsubcategorys, List<Address> lstadjustmentaccount, List<Category>
            lstcategories, List<BalanceSheetSpModel> lsttrialbalance, AccountType leadsheet,
            LeadSheetTotalModel leadSheetModel, string type, List<Address> notes = null,
            List<Address> accountannotations = null, List<Address> lstcomments = null,
            List<Order> lstOrder = null)
        {
            var lstsubCategorys = lstcategories.Where(a => a.Type == "Category" && a.AccountClass.ToUpper() == type.ToUpper() && a.LeadsheetId == leadsheet.FRATId).ToList();
            var lstsubcategories = lstsubcategorys.Where(a => a.Type == "Category" && a.AccountClass.ToUpper() == type.ToUpper()).ToList();
            var typeidscategory = lstsubcategories.Select(a => a.TypeId).ToList();
            var lstleadtrilbalanceCids = trailbalnces.Where(a => a.FRPATId != Guid.Empty && a.CategoryId != null).Select(a => a.CategoryId).ToList();
            var lstcatrgorytrilbalance = lstleadtrilbalanceCids.Distinct().Except(typeidscategory).ToList();
            var balancecategory = lstsubcategorys.Where(a => a.Type == leadSheetModel.Name && a.CompanyId
            == companyId).ToList();
            List<CategoryTotalModel> lstCategoryTotalModels = new List<CategoryTotalModel>();
            if (lstsubCategorys != null && lstsubCategorys.Count > 0)
            {
                foreach (var categorys in lstsubCategorys)
                {
                    CategoryTotalModel categoryTotalModels = new CategoryTotalModel();
                    categoryTotalModels.Id = categorys.Id;
                    categoryTotalModels.CategoryId = categorys.Id;
                    categoryTotalModels.RecOrder = (int)categorys.Recorder;
                    categoryTotalModels.Name = categorys.Name;
                    categoryTotalModels.ColorCode = categorys.ColorCode;
                    categoryTotalModels.CommonId = Guid.NewGuid();
                    categoryTotalModels.LeadSheetId = leadSheetModel.Id;
                    categoryTotalModels.IsCategory = false;
                    categoryTotalModels.IsCollapse = false;
                    categoryTotalModels.LeadSheetId = leadSheetModel.Id;

                    var trailbalncesTotal = trailbalnces;
                    var totals = trailbalncesTotal.Where(a => typeidscategory.Contains(a.CategoryId));

                    var subcategorytotalslist = lstsubcategorys.Where(a => a.ParentId == categoryTotalModels.Id).OrderBy(a => a.Recorder).ToList();
                    List<CategoryTotalModel> lstCategoryModel = new List<CategoryTotalModel>();
                    foreach (var categoryid in subcategorytotalslist)
                    {
                        var newbalancecategory = balancecategory.FirstOrDefault(a => a.Id == categoryid.TypeId);
                        if (newbalancecategory != null)
                        {
                            lsttrialbalance = FillNewCategoryAssetsModels(trailbalnces, leadsheet, leadSheetModel, type, notes, accountannotations, lstcomments, lstCategoryModel, newbalancecategory, categoryTotalModels.CommonId, lstOrder);
                        }
                    }
                    categoryTotalModels.CategoryTotalModels = lstCategoryModel.DistinctBy(a => a.Id).ToList();
                    CategoryTotals(trailbalnces, categoryTotalModels, leadsheet);

                    var amount = categoryTotalModels.YearModels.Sum(c => c.Balance);
                    categoryTotalModels.IsShowZero = (amount == null || amount == 0) ? true : false;

                    lstCategoryTotalModels.Add(categoryTotalModels);
                }
                leadSheetModel.CategoryTotalModels = lstCategoryTotalModels.DistinctBy(a => a.Id).OrderBy(a => a.RecOrder).ToList();

            }
            if (lstcatrgorytrilbalance != null)
            {
                foreach (var categoryid in lstcatrgorytrilbalance)
                {
                    var newbalancecategory = balancecategory.FirstOrDefault(a => a.Id == categoryid);
                    if (newbalancecategory != null)
                    {
                        lsttrialbalance = FillNewCategoryAssetsModels(trailbalnces, leadsheet, leadSheetModel, type, notes, accountannotations,
                            lstcomments, lstCategoryTotalModels, newbalancecategory, null, lstOrder);
                    }
                    leadSheetModel.CategoryTotalModels = lstCategoryTotalModels.DistinctBy(a => a.Id).OrderBy(a => a.RecOrder).ToList();
                }
            }
            return lsttrialbalance;
        }

        private List<BalanceSheetSpModel> FillNewCategoryAssetsModels(List<BalanceSheetSpModel> trailbalnces, AccountType leadsheet,
            LeadSheetTotalModel leadSheetModel, string type, List<Address> notes, List<Address> accountannotations,
            List<Address> lstcomments, List<CategoryTotalModel> lstCategoryModel, SubCategory newbalancecategory, Guid? commonId = null, List<Order> lstOrder = null)
        {
            List<BalanceSheetSpModel> lsttrialbalance;
            CategoryTotalModel categoryModel = new CategoryTotalModel();
            categoryModel.Id = newbalancecategory.Id;
            categoryModel.RecOrder = (int)newbalancecategory.Recorder;
            categoryModel.CategoryId = newbalancecategory.Id;
            categoryModel.Name = newbalancecategory.Name;
            categoryModel.CommonId = commonId;
            categoryModel.IsCollapse = false;
            categoryModel.IsCategory = true;
            categoryModel.LeadSheetId = leadsheet.FRATId;
            categoryModel.IsCategorised = true;
            categoryModel.LeadSheetName = newbalancecategory.Type;
            lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == newbalancecategory.Id);
            if (!lsttrialbalance.Any())
            {
                lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId);
                List<AccountModel> lstAccountModel = new List<AccountModel>();
                var loopTb = lsttrialbalance.DistinctBy(c => c.FRCoaId).ToList();
                foreach (var trialbalance in loopTb/*.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty)*/)
                {
                    AssestsAccountModel(lsttrialbalance, newbalancecategory, lstAccountModel, trialbalance, leadsheet, categoryModel.CommonId, type);
                }
                leadSheetModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
            }
            else
            {
                var lstsubcategory = _subCategoryService.GetByCid(newbalancecategory.Id);
                List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
                if (lstsubcategory.Any())
                {
                    foreach (var subcategorys in lstsubcategory)
                    {
                        AccountModel subcategoryModel = new AccountModel();
                        subcategoryModel.Id = subcategorys.Id;
                        subcategoryModel.IsSubCategoryModel = true;
                        subcategoryModel.Name = subcategorys.Name;
                        subcategoryModel.ColorCode = GetColor(4);
                        subcategoryModel.CommonId = Guid.NewGuid();
                        subcategoryModel.IsCollapse = false;
                        subcategoryModel.CategoryId = subcategorys.CategoryId;
                        var lsttrialbalancesub = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == newbalancecategory.Id && c.SubCategoryId == subcategorys.Id);
                        List<AccountModel> lstAccountModel = new List<AccountModel>();
                        var loopTb1 = lsttrialbalancesub.DistinctBy(c => c.Name).ToList();
                        foreach (var trialbalance in loopTb1)
                        {
                            AssestsAccountModel(lsttrialbalance, subcategorys, lstAccountModel, trialbalance, leadsheet, subcategoryModel.CommonId, type);
                        }

                        subcategoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                        SubCategoryTotals(lsttrialbalance, subcategoryModel, leadsheet);
                        if (subcategoryModel.AccountModels.Count() > 0)
                        {
                            SubCategoryTotals(trailbalnces, subcategoryModel, leadsheet);

                            var amount = subcategoryModel.YearModels.Sum(c => c.Balance);
                            subcategoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                            lstSubCategoryModel.Add(subcategoryModel);
                        }
                    }
                    //categoryModel.SubCategoryModels = lstSubCategoryModel.Where(a => a.AccountModels != null).ToList();
                    #region Accounts
                    //List<AccountModel> lstAccountModelsc = new List<AccountModel>();
                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                    foreach (var trialbalance in loopTb.Where(a => a.CategoryId == newbalancecategory.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)))
                    {
                        AssestsAccountModel(trailbalnces, newbalancecategory, lstSubCategoryModel, trialbalance, leadsheet, categoryModel.CommonId, type);
                    }
                    categoryModel.AccountModels = lstSubCategoryModel.OrderBy(a => a.FRRecOrder).ToList();
                    #endregion
                }
                else
                {
                    List<AccountModel> lstAccountModel = new List<AccountModel>();
                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                    foreach (var trialbalance in loopTb)
                    {
                        AssestsAccountModel(lsttrialbalance, newbalancecategory, lstAccountModel, trialbalance, leadsheet, categoryModel.CommonId, type);
                    }
                    categoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                }
            }


            #region Order
            if (lstOrder != null)
            {
                var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
                if (categoryOrderLeadSheet != null)
                {
                    leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                    List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                    categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ThenBy(a => a.Name).ToList();
                }
            }
            #endregion

            //category totals
            //CategoryTotals(categoryModel, type);
            if (categoryModel.AccountModels.Count > 0 || categoryModel.SubCategoryModels.Count > 0)
            {
                CategoryTotals(lsttrialbalance, categoryModel, leadsheet);
                var amount = categoryModel.YearModels.Sum(c => c.Balance);
                categoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                lstCategoryModel.Add(categoryModel);
            }
            return lsttrialbalance;
        }

        private List<BalanceSheetSpModel> FillCategoryTotalModelsForLiabilities(long compannyId, string screenName, List<BalanceSheetSpModel>
            trailbalnces, List<SubCategory> lstsubcategorys, List<Address>
            lstadjustmentaccount, List<Category> lstcategories, List<BalanceSheetSpModel> lsttrialbalance, AccountType leadsheet, LeadSheetTotalModel leadSheetModel, string type, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null, List<Order> lstOrder = null)
        {
            var lstCategories = lstcategories.Where(a => a.Type == "Category" && a.LeadsheetId == leadsheet.FRATId).ToList();
            var lstsubcategories = lstsubcategorys.Where(a => a.Type == "Category").ToList();
            var lstsubCategorys = lstsubcategorys.Where(a => a.Type == "Category").ToList();
            var typeidscategory = lstsubCategorys.Select(a => a.TypeId).ToList();
            var lstleadtrilbalanceCids = trailbalnces.Where(a => a.FRPATId != Guid.Empty && a.CategoryId != null).Select(a => a.CategoryId).ToList();
            var lstcatrgorytrilbalance = lstleadtrilbalanceCids.Distinct().Except(typeidscategory).ToList();
            var balancecategory = lstsubcategorys.Where(a => a.Type == leadSheetModel.Name && a.CompanyId == compannyId).ToList();
            List<CategoryTotalModel> lstCategoryTotalModels = new List<CategoryTotalModel>();

            if (lstCategories != null && lstCategories.Count > 0)
            {
                foreach (var categorys in lstCategories)
                {
                    List<CategoryTotalModel> lstCategoryModel = new List<CategoryTotalModel>();
                    var lstcategory = lstsubCategorys.Select(a => a.TypeId).FirstOrDefault();
                    var subcategory = balancecategory.Where(a => a.Id == lstcategory).Any();
                    CategoryTotalModel categoryTotalModels = new CategoryTotalModel();
                    categoryTotalModels.Id = categorys.Id;
                    categoryTotalModels.Name = categorys.Name;
                    categoryTotalModels.ColorCode = categorys.ColorCode;
                    categoryTotalModels.IsCollapse = categorys.IsCollapse;
                    categoryTotalModels.IsCategory = false;
                    categoryTotalModels.CommonId = Guid.NewGuid();
                    categoryTotalModels.LeadSheetId = leadSheetModel.Id;
                    var trailbalncesTotal = trailbalnces;
                    var totals = trailbalncesTotal.Where(a => typeidscategory.Contains(a.CategoryId));
                    var lstcategorytrilbalanceids = totals.Select(a => a.FRCoaId).Distinct().ToList();
                    var subcategorytotalslist = lstsubcategorys.Where(a => a.ParentId == categoryTotalModels.Id).OrderBy(a => a.Recorder).ToList();
                    foreach (var categoryid in subcategorytotalslist)
                    {
                        var categorybalance = lstsubcategorys.Where(a => a.Id == categoryid.TypeId).FirstOrDefault();
                        if (categorybalance != null)
                        {
                            CategoryTotalModel categoryModel = new CategoryTotalModel();
                            categoryModel.Id = categorybalance.Id;
                            categoryModel.CategoryId = categorybalance.Id;
                            categoryModel.RecOrder = (int)categorybalance.Recorder;
                            categoryModel.Name = categorybalance.Name;
                            categoryModel.CommonId = categoryTotalModels.CommonId;
                            categoryModel.IsCollapse = categorybalance.IsCollapse;
                            categoryModel.LeadSheetId = leadsheet.FRATId;
                            categoryModel.IsCategorised = true;
                            categoryModel.IsCategory = true;
                            categoryModel.LeadSheetName = categorybalance.Type;
                            lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id);
                            if (!lsttrialbalance.Any())
                            {
                                lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId);
                                List<AccountModel> lstAccountModel = new List<AccountModel>();
                                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
                                {
                                    FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                }
                                leadSheetModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                            }
                            else
                            {
                                var lstsubcategory = _subCategoryService.GetByCid(categorybalance.Id);
                                List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
                                if (lstsubcategory.Any())
                                {
                                    foreach (var subcategorys in lstsubcategory)
                                    {
                                        AccountModel subcategoryModel = new AccountModel();
                                        subcategoryModel.Id = subcategorys.Id;
                                        subcategoryModel.IsSubCategoryModel = true;
                                        subcategoryModel.Name = subcategorys.Name;
                                        subcategoryModel.ColorCode = GetColor(8);
                                        subcategoryModel.CommonId = Guid.NewGuid();
                                        subcategoryModel.IsCollapse = subcategorys.IsCollapse;
                                        subcategoryModel.CategoryId = subcategorys.CategoryId;
                                        var lsttrialbalancesub = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id && c.SubCategoryId == subcategorys.Id);
                                        List<AccountModel> lstAccountModel = new List<AccountModel>();
                                        var loopTb = lsttrialbalancesub.DistinctBy(c => c.Name).ToList();
                                        foreach (var trialbalance in loopTb)
                                        {
                                            FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, subcategorys, lstAccountModel, trialbalance, subcategoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                        }
                                        subcategoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                                        if (subcategoryModel.AccountModels.Count() > 0)
                                        {
                                            SubCategoryTotals(trailbalnces, subcategoryModel, leadsheet);

                                            var amount1 = subcategoryModel.YearModels.Sum(c => c.Balance);
                                            subcategoryModel.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;

                                            lstSubCategoryModel.Add(subcategoryModel);
                                        }
                                    }
                                    #region Accounts
                                    List<AccountModel> lstAccountModelsc = new List<AccountModel>();
                                    foreach (var trialbalance in lsttrialbalance.Where(a => a.CategoryId == categorybalance.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)))
                                    {
                                        FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstSubCategoryModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                    }
                                    categoryModel.AccountModels = lstSubCategoryModel;
                                    #endregion
                                }
                                else
                                {
                                    List<AccountModel> lstAccountModel = new List<AccountModel>();
                                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                    foreach (var trialbalance in loopTb)
                                    {
                                        FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                    }
                                    categoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                                }
                            }
                            #region Order
                            if (lstOrder != null)
                            {
                                var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
                                if (categoryOrderLeadSheet != null)
                                {
                                    leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                                    List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                                    categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                                }
                            }
                            #endregion
                            //category totals
                            CategoryTotals(trailbalnces, categoryModel, leadsheet);
                            if (categoryModel.AccountModels.Count() > 0 || categoryModel.SubCategoryModels.Count() > 0)
                            {
                                CategoryTotals(trailbalnces, categoryModel, leadsheet);

                                var amount2 = categoryModel.YearModels.Sum(c => c.Balance);
                                categoryModel.IsShowZero = (amount2 == null || amount2 == 0) ? true : false;

                                lstCategoryModel.Add(categoryModel);
                            }
                        }
                        categoryTotalModels.CategoryTotalModels = lstCategoryModel.OrderBy(a => a.Name).DistinctBy(a => a.Name).ToList();
                        CategoryTotals(trailbalnces, categoryTotalModels, leadsheet);

                        var amount = categoryTotalModels.YearModels.Sum(c => c.Balance);
                        categoryTotalModels.IsShowZero = (amount == null || amount == 0) ? true : false;


                        lstCategoryTotalModels.Add(categoryTotalModels);

                    }
                    leadSheetModel.CategoryTotalModels = lstCategoryTotalModels.Where(a => a.CategoryTotalModels != null).DistinctBy(a => a.Name).ToList();

                }
            }
            if (lstcatrgorytrilbalance != null && lstcatrgorytrilbalance.Count > 0)
            {
                foreach (var categoryid in lstcatrgorytrilbalance)
                {
                    var categorybalance = balancecategory.Where(a => a.Id == categoryid).FirstOrDefault();
                    if (categorybalance != null)
                    {
                        CategoryTotalModel categoryModel = new CategoryTotalModel();
                        categoryModel.Id = categorybalance.Id;
                        categoryModel.CategoryId = categorybalance.Id;
                        categoryModel.Name = categorybalance.Name;
                        categoryModel.RecOrder = (int)categorybalance.Recorder;
                        categoryModel.CommonId = Guid.NewGuid();
                        categoryModel.IsCollapse = false;
                        categoryModel.IsCategorised = true;
                        categoryModel.IsCategory = true;
                        categoryModel.LeadSheetId = leadsheet.FRATId;
                        categoryModel.LeadSheetName = leadsheet.Name;
                        lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id);
                        if (!lsttrialbalance.Any())
                        {
                            lsttrialbalance = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId);
                            List<AccountModel> lstAccountModel = new List<AccountModel>();
                            var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                            foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
                            {
                                FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
                            }
                            leadSheetModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                        }
                        else
                        {
                            var lstsubcategory = _subCategoryService.GetByCid(categorybalance.Id);
                            List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
                            if (lstsubcategory.Any())
                            {
                                foreach (var subcategorys in lstsubcategory)
                                {
                                    AccountModel subcategoryModel = new AccountModel();
                                    subcategoryModel.Id = subcategorys.Id;
                                    subcategoryModel.IsSubCategoryModel = true;
                                    subcategoryModel.Name = subcategorys.Name;
                                    subcategoryModel.ColorCode = GetColor(3);
                                    subcategoryModel.CommonId = Guid.NewGuid();
                                    subcategoryModel.IsCollapse = false;
                                    subcategoryModel.CategoryId = subcategorys.CategoryId;
                                    var lsttrialbalancesub = trailbalnces.FindAll(c => c.FRPATId == leadsheet.FRATId && c.CategoryId == categorybalance.Id && c.SubCategoryId == subcategorys.Id);
                                    List<AccountModel> lstAccountModel = new List<AccountModel>();

                                    var loopTb1 = lsttrialbalancesub.DistinctBy(c => c.Name).ToList();
                                    foreach (var trialbalance in loopTb1)
                                    {
                                        FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, subcategorys, lstAccountModel, trialbalance, subcategoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                    }
                                    subcategoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                                    if (subcategoryModel.AccountModels.Count() > 0)
                                        lstSubCategoryModel.Add(subcategoryModel);
                                }
                                #region Accounts
                                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == categorybalance.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)))
                                {
                                    FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstSubCategoryModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                }
                                categoryModel.AccountModels = lstSubCategoryModel;
                                #endregion
                            }
                            else
                            {
                                List<AccountModel> lstAccountModel = new List<AccountModel>();
                                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                                foreach (var trialbalance in loopTb)
                                {
                                    FillAccountLiabilitiesAndEquityNew(leadsheet, trailbalnces, categorybalance, lstAccountModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
                                }
                                categoryModel.AccountModels = lstAccountModel.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                            }
                        }
                        #region Order
                        if (lstOrder != null)
                        {
                            var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
                            if (categoryOrderLeadSheet != null)
                            {
                                leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                                List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                                categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                            }
                        }
                        #endregion

                        if (categoryModel.AccountModels.Count() > 0 || categoryModel.SubCategoryModels.Count() > 0)
                        {
                            CategoryTotals(trailbalnces, categoryModel, leadsheet);

                            var amount = categoryModel.YearModels.Sum(c => c.Balance);
                            categoryModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                            lstCategoryTotalModels.Add(categoryModel);
                        }
                    }

                    leadSheetModel.CategoryTotalModels = lstCategoryTotalModels.DistinctBy(a => a.Id).OrderBy(a => a.RecOrder).ToList();
                }
            }
            return lsttrialbalance;
        }

        private string GetColor(int? nxtRecorder)
        {
            List<string> result = ("clr1,clr2,clr3,clr4,clr5,clr6,clr7,clr8,clr9,clr10,clr11,clr12,clr13,clr14,clr15").Split(',').ToList();
            Random ran = new Random();
            int index = 0;

            if (nxtRecorder != null && nxtRecorder < 8)
                index = (int)nxtRecorder;
            else
                index = ran.Next(result.Count);

            var name = result[index];

            return name;
        }
        private void LeadSheetSubTotals(LeadSheetTotalModel leadSheetTotalModel, List<BalanceSheetSpModel> lstTrailBalncesModel)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();



            var lstCredit = leadSheetTotalModel.LeadSheetTotalModels.Where(c => (c.LeadSheetType == "Liabilities" || c.LeadSheetType == "Non-current Liabilities" || c.LeadSheetType == "Current Liabilities" || c.LeadSheetType == "Equity")).ToList();
            var lstDebit = leadSheetTotalModel.LeadSheetTotalModels.Where(c => (c.LeadSheetType == "Assets" || c.LeadSheetType == "Non-current Assets" || c.LeadSheetType == "Current Assets")).ToList();

            var isIncome = lstCredit.Any();
            var isExpence = lstDebit.Any();

            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            if (isIncome && isExpence)
            {
                leadSheetTotalModel.LeadSheetType = "Assets";
                foreach (var colom in columnList)
                {
                    YearModels yearModels = new YearModels();
                    yearModels.Year = colom;
                    yearModels.Balance = ((lstDebit.Where(c => c.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0) -
                        (lstCredit.Where(c => c.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0));
                    yearModels.Percentage = 0;
                    if (i == 0)
                        currentPeriod = yearModels.Balance;
                    else if (i == 1)
                        PriorPeriod = yearModels.Balance;
                    if (colom.Contains("Vs"))
                    {
                        decimal? assignnull = null;
                        //assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                        if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                        {
                            yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                        }
                        else
                        {
                            yearModels.Percentage = assignnull;
                        }
                        currentPeriod = PriorPeriod;
                        i = 0;
                        yearModels.IsPercentage = true;
                        yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                    }
                    i++;
                    lstYearModels.Add(yearModels);
                }
            }
            else if (isIncome && !isExpence)
            {
                leadSheetTotalModel.LeadSheetType = "Equity";
                foreach (var colom in columnList)
                {
                    YearModels yearModels = new YearModels();
                    yearModels.Year = colom;
                    //yearModels.Balance = (lstCredit.Where(c => c.YearModels != null).SelectMany(c => c.YearModels.Where(x => x.Year == colom).Select(v => v.Balance).ToList()).ToList().Sum() ?? 0);
                    yearModels.Balance = lstCredit.Where(c => c.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0;
                    yearModels.Percentage = 0;
                    if (i == 0)
                        currentPeriod = yearModels.Balance;
                    else if (i == 1)
                        PriorPeriod = yearModels.Balance;
                    if (colom.Contains("Vs"))
                    {
                        decimal? assignnull = null;
                        // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                        if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                        {
                            yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                        }
                        else
                        {
                            yearModels.Percentage = assignnull;
                        }
                        currentPeriod = PriorPeriod;
                        i = 0;
                        yearModels.IsPercentage = true;
                        yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                    }
                    i++;
                    lstYearModels.Add(yearModels);
                }
            }
            else if (!isIncome && isExpence)
            {
                leadSheetTotalModel.LeadSheetType = "Assets";
                foreach (var colom in columnList)
                {
                    YearModels yearModels = new YearModels();
                    yearModels.Year = colom;
                    //yearModels.Balance = (lstDebit.Where(c => c.YearModels != null).SelectMany(c => c.YearModels.Where(x => x.Year == colom).Select(v => v.Balance).ToList()).ToList().Sum() ?? 0);
                    yearModels.Balance = lstDebit.Where(c => c.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0;
                    yearModels.Percentage = 0;
                    if (i == 0)
                        currentPeriod = yearModels.Balance;
                    else if (i == 1)
                        PriorPeriod = yearModels.Balance;
                    if (colom.Contains("Vs"))
                    {
                        decimal? assignnull = null;
                        //assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                        if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                        {
                            yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                        }
                        else
                        {
                            yearModels.Percentage = assignnull;
                        }
                        currentPeriod = PriorPeriod;
                        i = 0;
                        yearModels.IsPercentage = true;
                        yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                    }
                    i++;
                    lstYearModels.Add(yearModels);
                }
            }




            //foreach (var colom in columnList)
            //{
            //    YearModels yearModels = new YearModels();

            //    yearModels.Year = colom;
            //    yearModels.Balance = leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.YearModels != null).SelectMany(c => c.YearModels.Where(x => x.Year == colom).Select(v => v.Balance).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Percentage = leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.YearModels != null).SelectMany(c => c.YearModels.Where(v => v.Year == colom).Select(x => x.Percentage).ToList()).ToList().Sum() ?? 0;
            //    lstYearModels.Add(yearModels);
            //}
            leadSheetTotalModel.YearModels = lstYearModels;
        }

        private void IncomeStatementLeadSheetSubTotals(LeadSheetTotalModel leadSheetTotalModel, List<IncomeStatementSpModel> lstTrailBalncesModel)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();



            var lstCredit = leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.LeadSheetType == "Income").ToList();
            var lstDebit = leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.LeadSheetType == "Expenses").ToList();



            //lstCredit = lstCredit.Add(leadSheetTotalModel.(c => c.LeadSheetType == "Income").se);
            //lstDebit = lstDebit.Add(leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.LeadSheetType == "Expenses").ToList());

            var isIncome = lstCredit.Any();
            var isExpence = lstDebit.Any();

            var lstIncomeYearTotals = lstCredit.SelectMany(c => c.YearModels).ToList();
            var lstExpenceYearTotals = lstDebit.SelectMany(c => c.YearModels).ToList();

            if (leadSheetTotalModel.LeadSheetType == "Income")
            {
                var adata = leadSheetTotalModel.AccountModels.Where(v => v.YearModels != null).SelectMany(v => v.YearModels).ToList();
                lstIncomeYearTotals.AddRange(adata);
                isIncome = true;
            }
            else if (leadSheetTotalModel.LeadSheetType == "Expenses")
            {
                var adata = leadSheetTotalModel.AccountModels.Where(v => v.YearModels != null).SelectMany(v => v.YearModels).ToList();
                lstExpenceYearTotals.AddRange(adata);
                isExpence = true;
            }


            if (leadSheetTotalModel.LeadSheetType == "Income")
            {
                var adata = leadSheetTotalModel.CategoryTotalModels.Where(v => v.YearModels != null).SelectMany(v => v.YearModels).ToList();
                lstIncomeYearTotals.AddRange(adata);
                isIncome = true;
            }
            else if (leadSheetTotalModel.LeadSheetType == "Expenses")
            {
                var adata = leadSheetTotalModel.CategoryTotalModels.Where(v => v.YearModels != null).SelectMany(v => v.YearModels).ToList();
                lstExpenceYearTotals.AddRange(adata);
                isExpence = true;
            }



            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            if (isIncome && isExpence)
            {
                leadSheetTotalModel.LeadSheetType = "Income";

                foreach (var colom in columnList)
                {
                    YearModels yearModels = new YearModels();
                    yearModels.Year = colom;

                    //yearModels.Balance = (lstCredit.SelectMany(c => c.YearModels).Where(x => x.Year == colom).Sum(c => c.Balance) ?? 0 -
                    //(lstDebit.SelectMany(c => c.YearModels).Where(x => x.Year == colom).Sum(c => c.Balance))) ?? 0;

                    var data = ((lstIncomeYearTotals.Where(x => x.Year == colom).Sum(c => c.Balance) ?? 0) - ((lstExpenceYearTotals.Where(x => x.Year == colom).Sum(c => c.Balance)))) ?? 0;
                    yearModels.Balance = data;// /*yearModels.Balance +*/ (lstIncomeYearTotals/*.SelectMany(c => c.YearModels)*/.Where(x => x.Year == colom).Sum(c => c.Balance) ?? 0 - (lstExpenceYearTotals./*SelectMany(c => c.YearModels).*/Where(x => x.Year == colom).Sum(c => c.Balance))) ?? 0;
                    yearModels.Percentage = 0;
                    if (i == 0)
                        currentPeriod = yearModels.Balance;
                    else if (i == 1)
                        PriorPeriod = yearModels.Balance;
                    if (colom.Contains("Vs"))
                    {
                        decimal? assignnull = null;
                        // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                        if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                        {
                            yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                        }
                        else
                        {
                            yearModels.Percentage = assignnull;
                        }
                        i = 0;
                        yearModels.IsPercentage = true;
                        if (leadSheetTotalModel.LeadSheetType == "Expenses")
                        {
                            yearModels.FontColor = AssignColorTotal(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                        }
                        else
                        {
                            yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                        }
                        currentPeriod = PriorPeriod;
                    }
                    i++;

                    lstYearModels.Add(yearModels);
                }

            }
            else if (isIncome && !isExpence)
            {
                leadSheetTotalModel.LeadSheetType = "Income";

                foreach (var colom in columnList)
                {
                    YearModels yearModels = new YearModels();
                    yearModels.Year = colom;

                    //yearModels.Balance = (lstCredit.SelectMany(c => c.YearModels).Where(x => x.Year == colom).Sum(c => c.Balance)) ?? 0;
                    yearModels.Balance = /*yearModels.Balance +*/ (lstIncomeYearTotals/*.SelectMany(c => c.YearModels)*/.Where(x => x.Year == colom).Sum(c => c.Balance)) ?? 0;
                    yearModels.Percentage = 0;
                    if (i == 0)
                        currentPeriod = yearModels.Balance;
                    else if (i == 1)
                        PriorPeriod = yearModels.Balance;
                    if (colom.Contains("Vs"))
                    {
                        decimal? assignnull = null;
                        //assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                        if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                        {
                            yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                        }
                        else
                        {
                            yearModels.Percentage = assignnull;
                        }

                        i = 0;
                        yearModels.IsPercentage = true;
                        if (leadSheetTotalModel.LeadSheetType == "Expenses")
                        {
                            yearModels.FontColor = AssignColorTotal(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                        }
                        else
                        {
                            yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                        }
                        currentPeriod = PriorPeriod;
                    }
                    i++;

                    lstYearModels.Add(yearModels);
                }

            }
            else if (!isIncome && isExpence)
            {
                leadSheetTotalModel.LeadSheetType = "Expenses";

                foreach (var colom in columnList)
                {
                    YearModels yearModels = new YearModels();
                    yearModels.Year = colom;
                    //yearModels.Balance = (lstDebit.SelectMany(c => c.YearModels).Where(x => x.Year == colom).Sum(c => c.Balance)) ?? 0;
                    yearModels.Balance =/* yearModels.Balance +*/ (lstExpenceYearTotals/*.SelectMany(c => c.YearModels)*/.Where(x => x.Year == colom).Sum(c => c.Balance)) ?? 0;
                    yearModels.Percentage = 0;
                    if (i == 0)
                        currentPeriod = yearModels.Balance;
                    else if (i == 1)
                        PriorPeriod = yearModels.Balance;
                    if (colom.Contains("Vs"))
                    {
                        decimal? assignnull = null;
                        // assignnull = (currentPeriod ==0 && PriorPeriod == 0) ? 0 : assignnull;
                        if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                        {
                            yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                        }
                        else
                        {
                            yearModels.Percentage = assignnull;
                        }
                        i = 0;
                        yearModels.IsPercentage = true;
                        if (leadSheetTotalModel.LeadSheetType == "Expenses")
                        {
                            yearModels.FontColor = AssignColorTotal(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                        }
                        else
                        {
                            yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                        }
                        currentPeriod = PriorPeriod;
                    }
                    i++;

                    lstYearModels.Add(yearModels);
                }
            }

            List<YearModels> finalYearModels = new List<YearModels>();

            decimal? currentPeriods = 0;
            decimal? PriorPeriods = 0;
            int j = 0;
            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();

                yearModels.Year = colom;
                //yearModels.Balance = leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.YearModels != null).SelectMany(c => c.YearModels.Where(x => x.Year == colom).Select(v => v.Balance).ToList()).ToList().Sum() ?? 0;
                //yearModels.Percentage = leadSheetTotalModel.LeadSheetTotalModels.Where(c => c.YearModels != null).SelectMany(c => c.YearModels.Where(v => v.Year == colom).Select(x => x.Percentage).ToList()).ToList().Sum() ?? 0;
                //yearModels.Balance = yearModels.Balance + leadSheetTotalModel.AccountModels.Where(v => v.YearModels != null).SelectMany(m => m.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0;
                //yearModels.Percentage = yearModels.Percentage + leadSheetTotalModel.AccountModels.Where(v => v.YearModels != null).SelectMany(m => m.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Percentage).Sum() ?? 0;
                //yearModels.Balance = yearModels.Balance + leadSheetTotalModel.CategoryTotalModels.Where(v => v.YearModels != null).SelectMany(m => m.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0;
                //yearModels.Percentage = yearModels.Percentage + leadSheetTotalModel.CategoryTotalModels.Where(v => v.YearModels != null).SelectMany(m => m.YearModels).ToList().Where(x => x.Year == colom).Select(v => v.Percentage).Sum() ?? 0;

                yearModels.Balance = lstYearModels.Where(x => x.Year == colom).Select(v => v.Balance).Sum() ?? 0;
                yearModels.Percentage = lstYearModels.Where(x => x.Year == colom && x.Percentage != null).Select(v => v.Percentage).Any() ? lstYearModels.Where(x => x.Year == colom && x.Percentage != null).Select(v => v.Percentage).Sum() : null;
                if (j == 0)
                    currentPeriods = yearModels.Balance;
                else if (j == 1)
                    PriorPeriods = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    yearModels.IsPercentage = true;

                    if (leadSheetTotalModel.LeadSheetType == "Expenses")
                    {
                        yearModels.FontColor = AssignColorTotal(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0, currentPeriods, PriorPeriods);
                    }
                    else
                    {
                        yearModels.FontColor = AssignColor(leadSheetTotalModel.LeadSheetType, yearModels.Percentage ?? 0);
                    }
                    currentPeriods = PriorPeriods;//divya
                }



                finalYearModels.Add(yearModels);
                j++;
            }
            leadSheetTotalModel.YearModels = finalYearModels;
        }
        public IncomeStatementModel SaveIncomeStatementss(IncomeStatementModel lstIncomeStatementModels, long companyId)
        {
            try
            {
                //here for category order based on lead sheet
                var lstOrder = _orderService.GetOrderByEid(companyId);
                var getLeadSheets = _categoryService.GetAllAccounyTypeByCompanyId(companyId);



                var lsttrialbalance = _chartOfAccountService.GetChartofAccountsByCompanyId(companyId);
                var subcategory = _subCategoryService.GetSubCategoryByCompanyId(companyId);
                var lstCategoryes = _categoryService.GetCategories(companyId);
                //here for total order
                string mainOrder = string.Join(",", lstIncomeStatementModels.LeadSheetTotalModels.Select(c => c.Id).ToList());
                if (mainOrder != null)
                {
                    var incomecomeorder = lstOrder.Where(a => a.LeadSheetType == "Income Statement" && a.AccountClass == "Income Statement").FirstOrDefault();
                    if (incomecomeorder != null)
                    {
                        incomecomeorder.Recorder = mainOrder;
                        incomecomeorder.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                        _orderService.Update(incomecomeorder);
                    }
                }

                int i = 1;
                if (lstIncomeStatementModels != null)
                {
                    if (lstIncomeStatementModels.LeadSheetTotalModels != null && lstIncomeStatementModels.LeadSheetTotalModels.Any())
                    {
                        foreach (var leadSheetTotalModels in lstIncomeStatementModels.LeadSheetTotalModels.ToList())
                        {
                            if (leadSheetTotalModels.IsLeadsheet == false)
                            {
                                Category(leadSheetTotalModels, lsttrialbalance, subcategory, i, companyId, lstOrder);
                            }
                            if (leadSheetTotalModels.IsLeadsheet == true)
                            {
                                var leadSheet = getLeadSheets.Where(c => c.FRATId == leadSheetTotalModels.Id).FirstOrDefault();
                                if (leadSheet != null)
                                {
                                    SaveOrder(lstOrder, leadSheetTotalModels, leadSheet, companyId);//categoryOrder&IsCollpse
                                    int d = 0;
                                    LeadsheetMethod1(lsttrialbalance, subcategory, leadSheetTotalModels, null, d, leadSheetTotalModels, companyId, null, lstOrder);
                                }
                            }
                        }
                    }
                }
                _UnitOfWorkAsync.SaveChanges();
            }
            catch (Exception e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                throw e;
            }
            return lstIncomeStatementModels;
        }

        private void Category(LeadSheetTotalModel leadSheetTotalModels, List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, int i, long companyId, List<Order> lstOrder)
        {
            var categories = _categoryService.GetCategorie(leadSheetTotalModels.Id);
            if (categories != null)
            {
                categories.IsCollapse = leadSheetTotalModels.IsCollapse;
                categories.Name = leadSheetTotalModels.Name;
                categories.Recorder = i;
                categories.ObjectState = ObjectState.Modified;
                _categoryService.Update(categories);
            }
            i++;
            RepeatMode(lsttrialbalance, subcategory, leadSheetTotalModels, i, companyId, lstOrder);
        }
        private void SaveOrder(List<Order> lstOrder, LeadSheetTotalModel leadSheetTotalModels, AccountType leadSheet, long? companyid)
        {
            var categoryOrder = string.Join(",", leadSheetTotalModels.CategoryTotalModels.Select(c => c.Id).ToList());
            var leadSheetCategoryOrder = lstOrder.Where(c => c.TypeId == leadSheet.FRATId).FirstOrDefault();
            if (leadSheetCategoryOrder != null)
            {
                leadSheetCategoryOrder.Recorder = categoryOrder;
                leadSheetCategoryOrder.ObjectState = ObjectState.Modified;
                leadSheetCategoryOrder.IsCollapse = leadSheetTotalModels.IsCollapse;
                _orderService.Update(leadSheetCategoryOrder);
            }
            else
            {
                Order order = new Order();
                order.Id = Guid.NewGuid();
                order.Recorder = categoryOrder;
                order.CompanyId = companyid;
                order.TypeId = leadSheet.FRATId;
                order.LeadSheetType = leadSheet.SubCategory;
                order.AccountClass = leadSheet.Class;
                order.IsCollapse = leadSheetTotalModels.IsCollapse;
                _orderService.Insert(order);
            }


        }
        private void RepeatMode(List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, LeadSheetTotalModel leadSheetTotalModels, int i, long companyId, List<Order> lstOrder)
        {
            int j = 1;
            foreach (var item in leadSheetTotalModels.LeadSheetTotalModels)
            {
                if (item.IsLeadsheet == false)
                {
                    var subleadsheet = subcategory.Where(a => a.TypeId == item.Id).FirstOrDefault();
                    if (subleadsheet != null)
                    {
                        subleadsheet.Name = item.Name;
                        subleadsheet.Recorder = j;
                        subleadsheet.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                        _subCategoryService.Update(subleadsheet);
                    }
                    Category(item, lsttrialbalance, subcategory, i, companyId, lstOrder);
                }
                if (item.IsLeadsheet == true)
                {
                    LeadsheetMethod1(lsttrialbalance, subcategory, leadSheetTotalModels, null, j, item, companyId, item.ParentId, lstOrder);
                }
                j++;
            }
        }
        private int LeadsheetMethod1(List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, LeadSheetTotalModel leadSheetTotalModels, string combindedString, int d, LeadSheetTotalModel leadSheetModel, long companyId, Guid? parentId, List<Order> lstOrder = null)
        {
            var subleadsheet = subcategory.Where(a => a.TypeId == leadSheetModel.Id && a.ParentId == parentId && a.CompanyId == companyId && a.CategoryId == Guid.Empty && leadSheetModel.IsLeadsheet == true && a.Type != "Category").FirstOrDefault();
            if (subleadsheet != null)
            {
                //subleadsheet.Name = leadSheetModel.Name;
                subleadsheet.Recorder = d;
                combindedString = leadSheetModel.CategoryTotalModels != null ? string.Join(",", leadSheetModel.CategoryTotalModels.Select(c => c.Id).ToList()) : null;
                if (combindedString != null)//ksk
                    subleadsheet.SubCategoryOrder = combindedString;
                subleadsheet.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                subleadsheet.IsCollapse = leadSheetModel.IsCollapse;
                _subCategoryService.Update(subleadsheet);
            }
            if (leadSheetModel.AccountModels != null && leadSheetModel.AccountModels.Any())
            {
                int j = 1;
                foreach (var accountModel in leadSheetModel.AccountModels)
                {
                    var tb = lsttrialbalance.Find(c => c.FRCoaId == accountModel.Id);
                    if (tb != null)
                    {
                        tb.FRPATId = leadSheetModel.Id;
                        tb.CategoryId = null;
                        tb.SubCategoryId = null;
                        tb.FRRecOrder = j++;
                        tb.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                        // tb.IsCollapse = leadSheetModel.IsCollapse;
                        _chartOfAccountService.Update(tb);
                    }
                }
            }
            if (leadSheetModel.CategoryTotalModels != null && leadSheetModel.CategoryTotalModels.Any())
            {
                foreach (var CategoryModel in leadSheetModel.CategoryTotalModels)
                {
                    if (CategoryModel.IsCategory == false)
                    {
                        int e = 1;
                        foreach (var category in CategoryModel.CategoryTotalModels)
                        {
                            var lstsubCategory = subcategory.Where(a => a.ParentId == CategoryModel.Id && a.TypeId == category.Id && a.CompanyId == companyId && a.CategoryId == Guid.Empty && leadSheetModel.IsLeadsheet == true && a.Type == "Category").FirstOrDefault();
                            if (lstsubCategory != null)
                            {
                                lstsubCategory.Recorder = e;
                                combindedString = leadSheetModel.CategoryTotalModels != null ? string.Join(",", leadSheetModel.CategoryTotalModels.Select(c => c.Id).ToList()) : null;
                                if (combindedString != null)//ksk
                                    lstsubCategory.SubCategoryOrder = combindedString;
                                lstsubCategory.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                lstsubCategory.IsCollapse = leadSheetModel.IsCollapse;
                                _subCategoryService.Update(lstsubCategory);
                                e++;
                            }
                            FillCategoryAccountsOrder(lsttrialbalance, leadSheetModel, companyId, lstOrder, category);
                        }
                    }

                    FillCategoryAccountsOrder(lsttrialbalance, leadSheetModel, companyId, lstOrder, CategoryModel);
                }
                if (subleadsheet != null)
                {
                    combindedString = leadSheetModel.CategoryTotalModels != null ? string.Join(",", leadSheetModel.CategoryTotalModels.Select(c => c.Id).ToList()) : null;
                    if (combindedString != null)//ksk
                        subleadsheet.SubCategoryOrder = combindedString;
                    subleadsheet.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                    _subCategoryService.Update(subleadsheet);
                }
            }
            //}
            return d;
        }
        private void FillCategoryAccountsOrder(List<ChartOfAccount> lsttrialbalance, LeadSheetTotalModel leadSheetModel, long companyId, List<Order> lstOrder, CategoryTotalModel CategoryModel)
        {
            int i = 1;
            if (CategoryModel.AccountModels != null)
            {
                var accountsorder = lstOrder.Where(a => a.TypeId == CategoryModel.Id && a.LeadSheetType == leadSheetModel.LeadSheetType && a.AccountClass.ToUpper() == leadSheetModel.AccountClass.ToUpper()).FirstOrDefault();
                var accountsorder1 = CategoryModel.AccountModels.Select(a => a.Id).ToList();
                if (accountsorder == null)
                {
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = companyId;
                    order.AccountClass = leadSheetModel.AccountClass;
                    order.LeadSheetType = leadSheetModel.LeadSheetType;
                    order.Recorder = string.Join(",", accountsorder1);
                    order.TypeId = CategoryModel.Id;
                    order.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Added;
                    _orderService.Insert(order);
                }
                else
                {
                    accountsorder.Recorder = string.Join(",", accountsorder1);
                    accountsorder.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                    _orderService.Update(accountsorder);
                }
                foreach (var accountModel in CategoryModel.AccountModels)
                {
                    if (accountModel.IsSubCategoryModel == true)
                    {
                        int k = 1;
                        foreach (var accountModels in accountModel.AccountModels)
                        {
                            var tb = lsttrialbalance.Find(c => c.FRCoaId == accountModels.Id);
                            if (tb != null)
                            {
                                tb.FRPATId = leadSheetModel.Id;
                                tb.CategoryId = CategoryModel.Id;
                                tb.SubCategoryId = accountModel.Id;
                                tb.FRRecOrder = k++;
                                //tb.IsCollapse = CategoryModel.IsCollapse;
                                tb.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                                _chartOfAccountService.Update(tb);
                            }
                        }
                    }
                    else
                    {
                        var tb = lsttrialbalance.Find(c => c.FRCoaId == accountModel.Id);
                        if (tb != null)
                        {
                            tb.FRPATId = leadSheetModel.Id;
                            tb.CategoryId = CategoryModel.Id;
                            tb.SubCategoryId = null;
                            tb.FRRecOrder = i++;
                            // tb.IsCollapse = CategoryModel.IsCollapse;
                            tb.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                            _chartOfAccountService.Update(tb);
                        }
                    }

                }


            }
        }
        public FinalBalanceSheetModel SaveBalanceSheetsCheck(FinalBalanceSheetModel lstleadSheetTotalModels, long companyid)
        {
            try
            {
                if (lstleadSheetTotalModels != null)
                {
                    //here getting all things at atime
                    var lsttrialbalance = _chartOfAccountService.GetChartofAccountsByCompanyId(companyid);
                    var subcategory = _subCategoryService.GetBalanceSheetSubCategoryByCompanyId(companyid);
                    var category = _categoryService.GetCategories(companyid).Where(a => a.IsIncomeStatement != true).ToList();
                    var totalorder = _orderService.GetOrderByEid(companyid);
                    var getLeadSheets = _categoryService.GetAllAccounyTypeByCompanyId(companyid);
                    string finalorderlst = string.Join(",", lstleadSheetTotalModels.LeadSheetTotalModels.Select(c => c.Id).ToList());
                    var finalorder = totalorder.Where(a => a.LeadSheetType == "Balance Sheet" && a.IsCollapse == true).FirstOrDefault();
                    if (finalorder != null)
                    {
                        finalorder.Recorder = finalorderlst;
                        finalorder.ObjectState = ObjectState.Modified;
                        _orderService.Update(finalorder);
                    }
                    int i = 1;
                    foreach (var leadSheetTotalModels in lstleadSheetTotalModels.LeadSheetTotalModels)
                    {
                        if (leadSheetTotalModels.IsCollapse == true)
                        {
                            FinalTotalOrder(leadSheetTotalModels, lsttrialbalance, subcategory, i, companyid, totalorder, getLeadSheets);
                        }
                        else
                        {
                            #region Grand Total Order
                            FillGrandTotalOrder(companyid, lsttrialbalance, subcategory, totalorder, getLeadSheets, leadSheetTotalModels);
                            #endregion
                        }
                        i++;
                    }

                }
                _UnitOfWorkAsync.SaveChanges();
                return lstleadSheetTotalModels;
            }
            catch (Exception e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                throw e;
            }
        }
        private void FillGrandTotalOrder(long companyid, List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, List<Order> totalorder, List<AccountType> getLeadSheets, LeadSheetTotalModel leadSheetTotalModels)
        {
            if (leadSheetTotalModels.Name != null && leadSheetTotalModels != null && leadSheetTotalModels.LeadSheetTotalModels.Count > 0)
            {
                string mainOrder = string.Join(",", leadSheetTotalModels.LeadSheetTotalModels.Select(c => c.Id).ToList());

                if (leadSheetTotalModels.Name == "Current Assets")
                {
                    if (mainOrder != null)
                    {
                        var currentAssests = totalorder.Where(a => a.LeadSheetType == DocSubTypeConstants.Assets && a.AccountClass == DocSubTypeConstants.Current && a.TypeId == leadSheetTotalModels.Id).FirstOrDefault();
                        if (currentAssests != null)
                        {
                            currentAssests.Recorder = mainOrder;
                            currentAssests.ObjectState = ObjectState.Modified;
                            _orderService.Update(currentAssests);
                        }
                    }
                }
                else if (leadSheetTotalModels.Name == "Non-current Assets")
                {
                    if (mainOrder != null)
                    {
                        var noncurrentAssests = totalorder.Where(a => a.LeadSheetType == DocSubTypeConstants.Assets && a.AccountClass.ToUpper() == DocSubTypeConstants.NonCurrent.ToUpper() && a.TypeId == leadSheetTotalModels.Id).FirstOrDefault();
                        if (noncurrentAssests != null)
                        {
                            noncurrentAssests.Recorder = mainOrder;
                            noncurrentAssests.ObjectState = ObjectState.Modified;
                            _orderService.Update(noncurrentAssests);
                        }
                    }
                }
                else if (leadSheetTotalModels.Name == "Equity")
                {
                    if (mainOrder != null)
                    {
                        var equity = totalorder.Where(a => a.LeadSheetType == DocSubTypeConstants.Equity && a.AccountClass == DocSubTypeConstants.Equity && a.TypeId == leadSheetTotalModels.Id).FirstOrDefault();
                        if (equity != null)
                        {
                            equity.Recorder = mainOrder;
                            equity.ObjectState = ObjectState.Modified;
                            _orderService.Update(equity);
                        }
                    }
                }
                else if (leadSheetTotalModels.Name == "Non-current Liabilities")
                {
                    if (mainOrder != null)
                    {
                        var noncurrentLiabilities = totalorder.Where(a => a.LeadSheetType == DocSubTypeConstants.Liabilities && a.AccountClass.ToUpper() == DocSubTypeConstants.NonCurrent.ToUpper() && a.TypeId == leadSheetTotalModels.Id).FirstOrDefault();
                        if (noncurrentLiabilities != null)
                        {
                            noncurrentLiabilities.Recorder = mainOrder;
                            noncurrentLiabilities.ObjectState = ObjectState.Modified;
                            _orderService.Update(noncurrentLiabilities);
                        }
                    }
                }
                else if (leadSheetTotalModels.Name == "Current Liabilities")
                {
                    if (mainOrder != null)
                    {
                        var currentLiabilities = totalorder.Where(a => a.LeadSheetType == DocSubTypeConstants.Liabilities && a.AccountClass == DocSubTypeConstants.Current && a.TypeId == leadSheetTotalModels.Id).FirstOrDefault();
                        if (currentLiabilities != null)
                        {
                            currentLiabilities.Recorder = mainOrder;
                            currentLiabilities.ObjectState = ObjectState.Modified;
                            _orderService.Update(currentLiabilities);
                        }
                    }
                }

                NewMethodCommon(leadSheetTotalModels.LeadSheetTotalModels, lsttrialbalance, subcategory, getLeadSheets, companyid, totalorder);
            }
        }
        private void FinalTotalOrder(LeadSheetTotalModel leadSheetTotalModels, List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, int i, long companyid, List<Order> totalorder, List<AccountType> getLeadSheets)
        {
            var categories = _categoryService.GetCategorie(leadSheetTotalModels.Id);
            if (categories != null)
            {
                categories.Recorder = i;
                categories.ObjectState = ObjectState.Modified;
                _categoryService.Update(categories);
            }
            i++;
            FinalSubTotalOrder(lsttrialbalance, subcategory, leadSheetTotalModels, i, companyid, totalorder, getLeadSheets);
        }
        private void FinalSubTotalOrder(List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, LeadSheetTotalModel leadSheetTotalModels, int i, long companyid, List<Order> totalorder, List<AccountType> getLeadSheets)
        {
            int j = 1;
            foreach (var item in leadSheetTotalModels.LeadSheetTotalModels)
            {
                if (item.IsCollapse == true)
                {
                    var subleadsheet = subcategory.Where(a => a.TypeId == item.Id).FirstOrDefault();
                    if (subleadsheet != null)
                    {
                        subleadsheet.Recorder = j;
                        subleadsheet.ObjectState = Repository.Pattern.Infrastructure.ObjectState.Modified;
                        _subCategoryService.Update(subleadsheet);
                    }
                    FinalTotalOrder(item, lsttrialbalance, subcategory, i, companyid, totalorder, getLeadSheets);
                }
                else
                {
                    FillGrandTotalOrder(companyid, lsttrialbalance, subcategory, totalorder, getLeadSheets, leadSheetTotalModels);
                }
                j++;
            }
        }
        private void NewMethodCommon(List<LeadSheetTotalModel> lstLeadSheetModel, List<ChartOfAccount> lsttrialbalance, List<SubCategory> subcategory, List<AccountType> getLeadSheets, long companyId, List<Order> lstorders)
        {
            int i = 1;
            foreach (var leadSheetTotalModels in lstLeadSheetModel)
            {
                if (leadSheetTotalModels.IsLeadsheet == false)
                {
                    Category(leadSheetTotalModels, lsttrialbalance, subcategory, i, companyId, lstorders);
                }
                if (leadSheetTotalModels.IsLeadsheet == true)
                {
                    var leadSheet = getLeadSheets.Where(c => c.FRATId == leadSheetTotalModels.Id).FirstOrDefault();
                    if (leadSheet != null)
                    {
                        SaveOrder(lstorders, leadSheetTotalModels, leadSheet, companyId);//categoryOrder&IsCollpse
                        int d = 0;
                        LeadsheetMethod1(lsttrialbalance, subcategory, leadSheetTotalModels, null, d, leadSheetTotalModels, companyId, null, lstorders);
                    }
                }
            }
        }



        #region LiabilitiesAndEquity Check
        private void FillAccountLiabilitiesAndEquityLeadSheet(List<BalanceSheetSpModel> lstTrailBalances, AccountType leadsheet, List<AccountModel> lstAccountModels, BalanceSheetSpModel trialbalance, Guid? commonId = null, string type = null, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null)
        {

            AccountModel accountModel = new AccountModel();
            accountModel.Id = trialbalance.FRCoaId;
            accountModel.CommonId = commonId;
            accountModel.Code = trialbalance.Code;
            accountModel.Name = trialbalance.Name;
            accountModel.LeadSheetId = trialbalance.FRPATId;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Class = leadsheet.Class;
            accountModel.CategoryId = trialbalance.CategoryId;
            accountModel.SubCategoryId = trialbalance.SubCategoryId;
            accountModel.YearModels = lstTrailBalances.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
            {
                Year = x.Year,
                Balance = x.Balance != null ? (decimal)x.Balance : 0,
                Percentage = x.Percentage,
                IsPercentage = x.Year.Contains("Vs"),
                FontColor = x.Year.Contains("Vs") ? AssignColor(accountModel.Class, x.Percentage) : null
            }).ToList();

            var amount = accountModel.YearModels.Sum(c => c.Balance);
            accountModel.IsShowZero = (amount == null || amount == 0) ? true : false;

            lstAccountModels.Add(accountModel);
        }
        private void FillAccountLiabilitiesAndEquityNew(AccountType leadsheet, List<BalanceSheetSpModel> lstTrailBalances, SubCategory categorybalance, List<AccountModel> lstAccountModel, BalanceSheetSpModel trialbalance, Guid? commonId = null, string type = null, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null)
        {
            AccountModel accountModel = new AccountModel();
            accountModel.Id = trialbalance.FRCoaId;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Code = trialbalance.Code;
            accountModel.Name = trialbalance.Name;
            accountModel.LeadSheetId = trialbalance.FRPATId;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Class = leadsheet.Class;
            accountModel.CategoryId = trialbalance.CategoryId;
            accountModel.SubCategoryId = trialbalance.SubCategoryId;
            accountModel.YearModels = lstTrailBalances.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
            {
                Year = x.Year,
                Balance = x.Balance != null ? (decimal)x.Balance : 0,
                Percentage = x.Percentage,
                IsPercentage = x.Year.Contains("Vs"),
                FontColor = x.Year.Contains("Vs") ? AssignColor(accountModel.Class, x.Percentage) : null
            }).ToList();

            var amount = accountModel.YearModels.Sum(c => c.Balance);
            accountModel.IsShowZero = (amount == null || amount == 0) ? true : false;


            lstAccountModel.Add(accountModel);
        }

        #endregion LiabilitiesAndEquity

        #region Assests Check
        private void AssestsLeadsheetAccountModel(List<BalanceSheetSpModel> lstTrailBalances, AccountType leadsheet, List<AccountModel> lstAccountModels, BalanceSheetSpModel trialbalance, Guid? commonId = null, string type = null, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null)
        {
            AccountModel accountModel = new AccountModel();
            accountModel.Id = trialbalance.FRCoaId;
            accountModel.CommonId = commonId;
            accountModel.Code = trialbalance.Code;
            accountModel.Name = trialbalance.Name;
            accountModel.LeadSheetId = trialbalance.FRPATId;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Class = leadsheet.Class;
            accountModel.CategoryId = trialbalance.CategoryId;
            accountModel.SubCategoryId = trialbalance.SubCategoryId;

            if (leadsheet.Class == "Assets")
                accountModel.YearModels = FillAssetsAccountsModels(lstTrailBalances, leadsheet, trialbalance);
            else
                accountModel.YearModels = lstTrailBalances.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? (decimal)x.Balance : 0,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColor(accountModel.Class, x.Percentage) : null
                }).ToList();

            var amount = accountModel.YearModels.Sum(c => c.Balance);
            accountModel.IsShowZero = (amount == null || amount == 0) ? true : false;

            lstAccountModels.Add(accountModel);
        }

        private List<YearModels> FillAssetsAccountsModels(List<BalanceSheetSpModel> lstTrailBalances, AccountType leadsheet, BalanceSheetSpModel trialbalance)
        {
            var lstAccounts = lstTrailBalances.Where(c => c.Name == trialbalance.Name).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            var accountName = lstAccounts.Select(c => c.Name).FirstOrDefault();
            var ColumnList = lstAccounts.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).
                Select(c => c.Year).ToList();
            foreach (var colom in ColumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = lstAccounts.Where(v => v.Year == colom).Sum(x => x.Balance) ?? 0;

                yearModels.Percentage = 0;
                bool changeAssetColor = false;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        if (currentPeriod < 0 && PriorPeriod < 0)
                            changeAssetColor = true;
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    currentPeriod = PriorPeriod;
                    i = 0;
                    yearModels.IsPercentage = true;
                    yearModels.FontColor = AssignColor(leadsheet.Class, yearModels.Percentage ?? 0, changeAssetColor);
                }
                i++;
                lstYearModels.Add(yearModels);
            }

            return lstYearModels;
        }

        #region For LeadSheet Categories

        //private List<BalanceSheetSpModel> FillLeadSheetCategoryAssetsModels(List<BalanceSheetSpModel> trailbalnces, AccountType leadsheet, LeadSheetTotalModel leadSheetModel, string type, List<Address> notes, List<Address> accountannotations, List<Address> lstcomments, List<CategoryTotalModel> lstCategoryModel, LeadSheetCategory category, Guid? commonId = null, List<Order> lstOrder = null)
        //{
        //    List<TrialBalanceImport> lsttrialbalance;
        //    CategoryTotalModel categoryModel = new CategoryTotalModel();
        //    categoryModel.Id = category.Id;
        //    categoryModel.CategoryId = category.Id;
        //    categoryModel.Name = category.Name;
        //    categoryModel.CommonId = (Guid?)commonId;
        //    categoryModel.IsCollapse = false;
        //    categoryModel.IsCategory = true;
        //    categoryModel.LeadSheetId = leadsheet.Id;
        //    categoryModel.RecOrder = category.RecOrder;
        //    categoryModel.IsCategorised = category.IsCategorised;
        //    List<AccountAnnotationModel> lstaccountannotationcategorymodel = new List<AccountAnnotationModel>();
        //    var lstaccountannotation = accountannotations.Where(a => a.AccountName == categoryModel.Name && a.AccountClass == type && a.CategoryName == category.Name && a.LeadsheetId == leadsheet.Id).ToList();
        //    if (lstaccountannotation != null && lstaccountannotation.Count > 0)
        //    {
        //        FillNotes(notes, lstaccountannotationcategorymodel, lstaccountannotation, lstcomments, type);
        //    }
        //    categoryModel.AccountAnnotationModel = lstaccountannotationcategorymodel.OrderBy(a => a.AnnotationTypeName).ToList();

        //    categoryModel.CommentCount = lstcomments.Where(c => c.TypeId == category.Id).Count();
        //    categoryModel.ReviewCommentCount = lstcomments.Where(c => c.TypeId == category.Id && c.IsReview == true && c.AccountClass == type).Count();
        //    categoryModel.NormalCommentCount = lstcomments.Where(c => c.TypeId == category.Id && c.IsReview == false && c.AccountClass == type).Count();
        //    lsttrialbalance = trailbalnces.FindAll(c => c.LeadSheetId == leadsheet.Id && c.CategoryId == category.Id);
        //    if (!lsttrialbalance.Any())
        //    {
        //        lsttrialbalance = trailbalnces.FindAll(c => c.LeadSheetId == leadsheet.Id);
        //        List<AccountModel> lstAccountModel = new List<AccountModel>();

        //        foreach (var trialbalance in lsttrialbalance.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty).OrderBy(c => c.RecOrder))
        //        {
        //            FillAssestsAccountModel(category, lstAccountModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
        //        }
        //        leadSheetModel.AccountModels = lstAccountModel;
        //    }
        //    else
        //    {
        //        var lstsubcategory = _subCategoryService.GetByCid(category.Id);
        //        List<AccountModel> lstSubCategoryModel = new List<AccountModel>();
        //        if (lstsubcategory.Any())
        //        {
        //            foreach (var subcategorys in lstsubcategory)
        //            {
        //                AccountModel subcategoryModel = new AccountModel();
        //                subcategoryModel.Id = subcategorys.Id;
        //                subcategoryModel.IsSubCategoryModel = true;
        //                subcategoryModel.Name = subcategorys.Name;
        //                subcategoryModel.ColorCode = GetColor(5);
        //                subcategoryModel.CommonId = Guid.NewGuid();
        //                subcategoryModel.IsCollapse = false;
        //                subcategoryModel.CategoryId = subcategorys.CategoryId;
        //                var lsttrialbalancesub = trailbalnces.FindAll(c => c.LeadSheetId == leadsheet.Id && c.CategoryId == category.Id && c.SubCategoryId == subcategorys.Id);
        //                List<AccountModel> lstAccountModel = new List<AccountModel>();
        //                foreach (var trialbalance in lsttrialbalancesub)
        //                {
        //                    AssestsAccountModel(subcategorys, lstAccountModel, trialbalance, subcategoryModel.CommonId, type, notes, accountannotations, lstcomments);
        //                }
        //                subcategoryModel.AccountModels = lstAccountModel;
        //                if (subcategoryModel.AccountModels.Count() > 0)
        //                    lstSubCategoryModel.Add(subcategoryModel);
        //            }
        //            //categoryModel.SubCategoryModels = lstSubCategoryModel.Where(a => a.AccountModels != null).ToList();
        //            #region Accounts
        //            //List<AccountModel> lstAccountModelsc = new List<AccountModel>();

        //            foreach (var trialbalance in lsttrialbalance.Where(a => a.CategoryId == category.Id && (a.SubCategoryId == null || a.SubCategoryId == Guid.Empty)).OrderBy(c => c.RecOrder))
        //            {
        //                FillAssestsAccountModel(category, lstSubCategoryModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
        //            }
        //            categoryModel.AccountModels = lstSubCategoryModel;
        //            #endregion
        //        }
        //        else
        //        {
        //            List<AccountModel> lstAccountModel = new List<AccountModel>();

        //            foreach (var trialbalance in lsttrialbalance.OrderBy(s => s.RecOrder))
        //            {
        //                FillAssestsAccountModel(category, lstAccountModel, trialbalance, categoryModel.CommonId, type, notes, accountannotations, lstcomments);
        //            }
        //            categoryModel.AccountModels = lstAccountModel;
        //        }
        //    }

        //    #region Order
        //    if (lstOrder != null)
        //    {
        //        var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == categoryModel.Id).FirstOrDefault();
        //        if (categoryOrderLeadSheet != null)
        //        {
        //            leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
        //            List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
        //            categoryModel.AccountModels = categoryModel.AccountModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
        //        }
        //    }
        //    #endregion
        //    //category totals
        //    CategoryTotals(categoryModel, type);
        //    if (categoryModel.AccountModels.Count > 0 || categoryModel.SubCategoryModels.Count > 0)
        //        lstCategoryModel.Add(categoryModel);
        //    return lsttrialbalance;
        //}

        //private void FillAccountLiabilitiesAndEquity(LeadSheetCategory category, List<AccountModel> lstAccountModel, BalanceSheetSpModel trialbalance, Guid? commonId, string type = null, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null)
        //{
        //    var lstAdjMent = _adjustmentService.GetAdjsByIdAndType(trialbalance.Id);
        //    AccountModel accountModel = new AccountModel();
        //    accountModel.CategoryId = category.Id;
        //    if (type == null || type == ControlCodeConstant.Equity)
        //    {
        //        accountModel.Id = trialbalance.Id;
        //        accountModel.Name = trialbalance.AccountName;
        //        accountModel.CommonId = commonId;
        //        accountModel.LeadSheetId = category.Id;
        //        accountModel.CurrentYear = trialbalance.CYBalance * -1;
        //        accountModel.PriorYear = trialbalance.PreviousYearBalance * -1;
        //        var aje = _adjustmentService.GetAdjsById(trialbalance.Id);
        //        accountModel.Aje = Convert.ToDecimal(aje) * -1;
        //    }
        //    else
        //    {
        //        if (type == "Current")
        //        {
        //            int count = lstAdjMent.Where(v => v.AccountClass == type).Count();
        //            if ((trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == true) || (trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == false) || (trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == true))
        //            {
        //                accountModel.Id = trialbalance.Id;
        //                accountModel.Name = trialbalance.AccountName;
        //                accountModel.CommonId = commonId;
        //                accountModel.LeadSheetId = category.LeadsheetId;
        //                accountModel.CategoryId = category.Id;
        //                accountModel.SubCategoryId = category.Id;
        //                //FillAccountModel(trialbalance, type, accountModel);
        //                accountModel.CurrentYear = trialbalance.CYBalance * -1;
        //                accountModel.PriorYear = trialbalance.PreviousYearBalance * -1;

        //                if (trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == false)
        //                {
        //                    accountModel.PriorYear = 0;
        //                }
        //                if (trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == true)
        //                {
        //                    accountModel.CurrentYear = 0;
        //                }
        //                accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum()) * -1;
        //            }
        //            else if (count > 0)
        //            {
        //                accountModel.Id = trialbalance.Id;
        //                accountModel.Name = trialbalance.AccountName;
        //                accountModel.CommonId = commonId;
        //                accountModel.LeadSheetId = category.LeadsheetId;
        //                accountModel.CategoryId = category.Id;
        //                accountModel.SubCategoryId = category.Id;
        //                accountModel.CurrentYear = 0;
        //                accountModel.PriorYear = 0;
        //                accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum()) * -1;
        //                //accountModel.Aje = Convert.ToDecimal(lstAdjMent.Select(c => c.DebitOrCredit).Sum());
        //            }
        //            accountModel.PyCurrent = accountModel.PriorYear;
        //            accountModel.CyCurrent = accountModel.CurrentYear;


        //        }
        //        if (type == JournalConstant.NonCurrent)
        //        {
        //            int count = lstAdjMent.Count(v => v.AccountClass == type);
        //            if ((trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == false) || (trialbalance.IsPyCurrent == true && trialbalance.IsCyCurrent == false) || (trialbalance.IsPyCurrent == false && trialbalance.IsCyCurrent == true))
        //            {
        //                accountModel.Id = trialbalance.Id;
        //                accountModel.Name = trialbalance.AccountName;
        //                accountModel.CommonId = commonId;
        //                accountModel.LeadSheetId = category.LeadsheetId;
        //                accountModel.CategoryId = category.Id;
        //                accountModel.SubCategoryId = category.Id;
        //                accountModel.CurrentYear = trialbalance.CYBalance * -1;
        //                accountModel.PriorYear = trialbalance.PreviousYearBalance * -1;
        //                if (trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == true)
        //                {
        //                    accountModel.PriorYear = 0;
        //                }
        //                if (trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == false)
        //                {
        //                    accountModel.CurrentYear = 0;
        //                }
        //                //FillAccountModel(trialbalance, type, accountModel);
        //                accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum()) * -1;
        //            }
        //            else if (count > 0)
        //            {
        //                accountModel.Id = trialbalance.Id;
        //                accountModel.Name = trialbalance.AccountName;
        //                accountModel.CommonId = commonId;
        //                accountModel.LeadSheetId = category.LeadsheetId;
        //                accountModel.CategoryId = category.Id;
        //                accountModel.SubCategoryId = category.Id;
        //                accountModel.CurrentYear = 0;
        //                accountModel.PriorYear = 0;
        //                accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum()) * -1;
        //                //accountModel.Aje = Convert.ToDecimal(lstAdjMent.Select(c => c.DebitOrCredit).Sum());
        //            }
        //            accountModel.PyNonCurrent = accountModel.PriorYear;
        //            accountModel.CyNonCurrent = accountModel.CurrentYear;

        //        }
        //    }

        //    accountModel.Final = accountModel.Aje + accountModel.CurrentYear;
        //    accountModel.AmountChange = accountModel.Final - accountModel.PriorYear;
        //    if (trialbalance.PreviousYearBalance == 0)
        //    {
        //        if (trialbalance.CYBalance == 0)
        //            accountModel.IsInfinity = false;
        //        else
        //            accountModel.IsInfinity = true;
        //    }
        //    else
        //    {
        //        accountModel.PercentageChange = trialbalance.PreviousYearBalance == 0 ? 0 : ((accountModel.AmountChange / trialbalance.PreviousYearBalance) * 100);
        //        accountModel.PercentageChange = Convert.ToDecimal((Math.Round((Convert.ToDouble(accountModel.PercentageChange)), 2)));
        //    }
        //    List<AccountAnnotationModel> lstaccountannotationmodel = new List<AccountAnnotationModel>();
        //    var lstaccountannotation = accountannotations.Where(a => a.AccountName == accountModel.Name && a.AccountClass == type).ToList();
        //    if (lstaccountannotation != null && lstaccountannotation.Count > 0)
        //    {
        //        FillNotes(notes, lstaccountannotationmodel, lstaccountannotation, lstcomments, type);
        //    }
        //    accountModel.AccountAnnotationModel = lstaccountannotationmodel.OrderBy(a => a.AnnotationTypeName).ToList();
        //    accountModel.CommentCount = lstcomments.Where(c => c.TypeId == trialbalance.Id && (c.AccountClass == type || c.AccountClass == null)).Count();
        //    accountModel.ReviewCommentCount = lstcomments.Where(c => c.TypeId == trialbalance.Id && c.IsReview == true && (c.AccountClass == type || c.AccountClass == null)).Count();
        //    accountModel.NormalCommentCount = lstcomments.Where(c => c.TypeId == trialbalance.Id && c.IsReview == false && (c.AccountClass == type || c.AccountClass == null)).Count();
        //    if (accountModel.Id != Guid.Empty && accountModel.Id != null)
        //    {
        //        lstAccountModel.Add(accountModel);
        //    }
        //}

        //private void FillAssestsAccountModel(LeadSheetCategory category, List<AccountModel> lstAccountModel, TrialBalanceImport trialbalance, Guid? commonId = null, string type = null, List<Note> notes = null, List<AccountAnnotation> accountannotations = null, List<Comment> lstcomments = null)
        //{
        //    var lstAdjMent = _adjustmentService.GetAdjsByIdAndType(trialbalance.Id);
        //    AccountModel accountModel = new AccountModel();
        //    accountModel.CategoryId = category.Id;
        //    if (type == "Current")
        //    {
        //        int count = lstAdjMent.Where(v => v.AccountClass == type).Count();
        //        if ((trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == true) || (trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == false) || (trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == true))
        //        {
        //            accountModel.Id = trialbalance.Id;
        //            accountModel.Name = trialbalance.AccountName;
        //            accountModel.CommonId = commonId;
        //            accountModel.LeadSheetId = category.LeadsheetId;
        //            accountModel.CurrentYear = trialbalance.CYBalance;
        //            accountModel.PriorYear = trialbalance.PreviousYearBalance;
        //            if (trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == false)
        //            {
        //                accountModel.PriorYear = 0;
        //            }
        //            if (trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == true)
        //            {
        //                accountModel.CurrentYear = 0;
        //            }

        //            accountModel.PyCurrent = accountModel.PriorYear;
        //            accountModel.CyCurrent = accountModel.CurrentYear;
        //            accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum());
        //        }
        //        else if (count > 0)
        //        {
        //            accountModel.Id = trialbalance.Id;
        //            accountModel.Name = trialbalance.AccountName;
        //            accountModel.CommonId = commonId;
        //            accountModel.LeadSheetId = category.LeadsheetId;
        //            accountModel.CurrentYear = 0;
        //            accountModel.PriorYear = 0;
        //            accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum());
        //        }
        //        accountModel.PyCurrent = accountModel.PriorYear;
        //        accountModel.CyCurrent = accountModel.CurrentYear;

        //    }
        //    if (type == JournalConstant.NonCurrent)
        //    {
        //        int count = lstAdjMent.Count(v => v.AccountClass == type);
        //        if ((trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == false) || (trialbalance.IsPyCurrent == true && trialbalance.IsCyCurrent == false) || (trialbalance.IsPyCurrent == false && trialbalance.IsCyCurrent == true))
        //        {
        //            accountModel.Id = trialbalance.Id;
        //            accountModel.Name = trialbalance.AccountName;
        //            accountModel.CommonId = commonId;
        //            accountModel.LeadSheetId = category.LeadsheetId;
        //            accountModel.CurrentYear = trialbalance.CYBalance;
        //            accountModel.PriorYear = trialbalance.PreviousYearBalance;

        //            if (trialbalance.IsCyCurrent == false && trialbalance.IsPyCurrent == true)
        //            {
        //                accountModel.PriorYear = 0;
        //            }
        //            if (trialbalance.IsCyCurrent == true && trialbalance.IsPyCurrent == false)
        //            {
        //                accountModel.CurrentYear = 0;
        //            }

        //            accountModel.PyNonCurrent = accountModel.PriorYear;
        //            accountModel.CyNonCurrent = accountModel.CurrentYear;
        //            accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum());
        //        }
        //        else if (count > 0)
        //        {
        //            accountModel.Id = trialbalance.Id;
        //            accountModel.Name = trialbalance.AccountName;
        //            accountModel.CommonId = commonId;
        //            accountModel.LeadSheetId = category.LeadsheetId;
        //            accountModel.CurrentYear = 0;
        //            accountModel.PriorYear = 0;
        //            accountModel.Aje = Convert.ToDecimal(lstAdjMent.Where(a => a.AccountClass == type).Select(c => c.DebitOrCredit).Sum());
        //        }
        //        accountModel.PyNonCurrent = accountModel.PriorYear;
        //        accountModel.CyNonCurrent = accountModel.CurrentYear;


        //    }

        //    accountModel.Final = accountModel.Aje + accountModel.CurrentYear;
        //    accountModel.AmountChange = accountModel.Final - accountModel.PriorYear;
        //    if (trialbalance.PreviousYearBalance == 0)
        //    {
        //        if (trialbalance.CYBalance == 0)
        //            accountModel.IsInfinity = false;
        //        else
        //            accountModel.IsInfinity = true;
        //    }
        //    else
        //    {
        //        accountModel.PercentageChange = trialbalance.PreviousYearBalance == 0 ? 0 : ((accountModel.AmountChange / trialbalance.PreviousYearBalance) * 100);
        //        accountModel.PercentageChange = Convert.ToDecimal((Math.Round((Convert.ToDouble(accountModel.PercentageChange)), 2)));
        //    }

        //    List<AccountAnnotationModel> lstaccountannotationmodel = new List<AccountAnnotationModel>();
        //    var lstaccountannotation = accountannotations.Where(a => a.AccountName == accountModel.Name && a.AccountClass == type).ToList();
        //    if (lstaccountannotation != null && lstaccountannotation.Count > 0)
        //    {
        //        FillNotes(notes, lstaccountannotationmodel, lstaccountannotation, lstcomments, type);
        //    }
        //    accountModel.AccountAnnotationModel = lstaccountannotationmodel.OrderBy(a => a.AnnotationTypeName).ToList();
        //    accountModel.CommentCount = lstcomments.Where(c => c.TypeId == trialbalance.Id && c.AccountClass == type).Count();
        //    accountModel.ReviewCommentCount = lstcomments.Where(c => c.TypeId == trialbalance.Id && c.IsReview == true && c.AccountClass == type).Count();
        //    accountModel.NormalCommentCount = lstcomments.Where(c => c.TypeId == trialbalance.Id && c.IsReview == false && c.AccountClass == type).Count();
        //    if (accountModel.Id != Guid.Empty && accountModel.Id != null)
        //    {
        //        lstAccountModel.Add(accountModel);
        //    }
        //}

        private void AssestsAccountModel(List<BalanceSheetSpModel> lsttrialbalance, SubCategory newbalancecategory, List<AccountModel> lstAccountModel, BalanceSheetSpModel trialbalance, AccountType leadsheet, Guid? commonId = null, string type = null)
        {
            AccountModel accountModel = new AccountModel();
            accountModel.Id = trialbalance.FRCoaId;
            accountModel.Code = trialbalance.Code;
            accountModel.Name = trialbalance.Name;
            accountModel.LeadSheetId = trialbalance.FRPATId;
            accountModel.FRRecOrder = trialbalance.FRRecOrder;
            accountModel.Class = newbalancecategory.AccountClass;
            accountModel.CategoryId = trialbalance.CategoryId;
            accountModel.SubCategoryId = trialbalance.SubCategoryId;

            if (leadsheet.Class == "Assets")
                accountModel.YearModels = FillAssetsAccountsModels(lsttrialbalance, leadsheet, trialbalance);
            else
                accountModel.YearModels = lsttrialbalance.Where(c => c.Name == trialbalance.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? (decimal)x.Balance : 0,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColor(accountModel.Class, x.Percentage) : null
                }).ToList();

            var amount = accountModel.YearModels.Sum(c => c.Balance);
            accountModel.IsShowZero = (amount == null || amount == 0) ? true : false;
            lstAccountModel.Add(accountModel);
        }



        #endregion For LeadSheet Categories

        private void BalanceSheetOrderSaving(long companyId, BalanceSheetModel balanceSheetModel, Order currentassestsorders, Order noncurrentassestsorders, Order currentLiabilityorders, Order noncurrentLiabilityorders, Order equityorders, List<AccountType> lstAccountTypeOrder)
        {
            if (currentassestsorders == null)
            {
                var currentAssetsOrder = lstAccountTypeOrder.Where(c => c.SubCategory == "Current" && c.Class == "Assets").OrderBy(c => c.RecOrder).Select(c => c.FRATId).ToList();

                balanceSheetModel.Assets.Current.LeadSheetTotalModels = balanceSheetModel.Assets.Current.LeadSheetTotalModels.OrderBy(d => currentAssetsOrder.IndexOf(d.Id)).ToList();

                //balanceSheetModel.Assets.Current.LeadSheetTotalModels = balanceSheetModel.Assets.Current.LeadSheetTotalModels.OrderBy(c => c.Index).ToList();
                if (balanceSheetModel.Assets.Current.LeadSheetTotalModels.Count > 0)
                {
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = companyId;
                    order.LeadSheetType = "Assets";
                    order.AccountClass = "Current";
                    order.TypeId = balanceSheetModel.Assets.Current.MainId;
                    order.Recorder = string.Join(",", balanceSheetModel.Assets.Current.LeadSheetTotalModels.Select(c => c.Id).ToList());
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                }
            }

            if (noncurrentassestsorders == null)
            {
                var nonCurrentAssetsOrder = lstAccountTypeOrder.Where(c => c.SubCategory == "Non-current" && c.Class == "Assets").OrderBy(c => c.RecOrder).Select(c => c.FRATId).ToList();

                balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels = balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels.OrderBy(d => nonCurrentAssetsOrder.IndexOf(d.Id)).ToList();

                //balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels = balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels.OrderBy(c => c.Index).ToList();
                if (balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels.Count > 0)
                {
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = companyId;
                    order.TypeId = balanceSheetModel.Assets.NonCurrent.MainId;
                    order.LeadSheetType = "Assets";
                    order.AccountClass = "NonCurrent";
                    order.Recorder = string.Join(",", balanceSheetModel.Assets.NonCurrent.LeadSheetTotalModels.Select(c => c.Id).ToList());
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                }
            }
            if (currentLiabilityorders == null)
            {

                var currentLiabilitiesOrder = lstAccountTypeOrder.Where(c => c.SubCategory == "Current" && c.Class == "Liabilities").OrderBy(c => c.RecOrder).Select(c => c.FRATId).ToList();

                balanceSheetModel.Liabilities.Current.LeadSheetTotalModels = balanceSheetModel.Liabilities.Current.LeadSheetTotalModels.OrderBy(d => currentLiabilitiesOrder.IndexOf(d.Id)).ToList();


                //balanceSheetModel.Liabilities.Current.LeadSheetTotalModels = balanceSheetModel.Liabilities.Current.LeadSheetTotalModels.OrderBy(c => c.Index).ToList();
                if (balanceSheetModel.Liabilities.Current.LeadSheetTotalModels.Count > 0)
                {
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = companyId;
                    order.TypeId = balanceSheetModel.Liabilities.Current.MainId;
                    order.LeadSheetType = "Liabilities";
                    order.AccountClass = "Current";
                    order.Recorder = string.Join(",", balanceSheetModel.Liabilities.Current.LeadSheetTotalModels.Select(c => c.Id).ToList());
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                }
            }
            if (noncurrentLiabilityorders == null)
            {
                var nonCurrentCurrentLiabilitiesOrder = lstAccountTypeOrder.Where(c => c.SubCategory == "Non-current" && c.Class == "Liabilities").OrderBy(c => c.RecOrder).Select(c => c.FRATId).ToList();

                balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels = balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels.OrderBy(d => nonCurrentCurrentLiabilitiesOrder.IndexOf(d.Id)).ToList();


                //balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels = balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels.OrderBy(c => c.Index).ToList();
                if (balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels.Count > 0)
                {
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = companyId;
                    order.TypeId = balanceSheetModel.Liabilities.NonCurrent.MainId;
                    order.LeadSheetType = "Liabilities";
                    order.AccountClass = "NonCurrent";
                    order.Recorder = string.Join(",", balanceSheetModel.Liabilities.NonCurrent.LeadSheetTotalModels.Select(c => c.Id).ToList());
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                }
            }
            if (equityorders == null)
            {

                var equityOrder = lstAccountTypeOrder.Where(c => c.SubCategory == "Equity" && c.Class == "Equity").OrderBy(c => c.RecOrder).Select(c => c.FRATId).ToList();

                balanceSheetModel.Equity.LeadSheetTotalModels = balanceSheetModel.Equity.LeadSheetTotalModels.OrderBy(d => equityOrder.IndexOf(d.Id)).ToList();

                //balanceSheetModel.Equity.LeadSheetTotalModels = balanceSheetModel.Equity.LeadSheetTotalModels.OrderBy(c => c.Index).ToList();
                if (balanceSheetModel.Equity.LeadSheetTotalModels.Count > 0)
                {
                    Order order = new Order();
                    order.Id = Guid.NewGuid();
                    order.CompanyId = companyId;
                    order.TypeId = balanceSheetModel.Equity.MainId;
                    order.LeadSheetType = "Equity";
                    order.AccountClass = "Equity";
                    order.Recorder = string.Join(",", balanceSheetModel.Equity.LeadSheetTotalModels.Select(c => c.Id).ToList());
                    order.ObjectState = ObjectState.Added;
                    _orderService.Insert(order);
                }
            }
            _UnitOfWorkAsync.SaveChanges();
        }

        private List<BalanceSheetSpModel> FillLeadSheetAssetsModel(long companyId, string screenName, string groupname, List<BalanceSheetSpModel> lsttrialbalance,
            List<LeadSheetTotalModel> CurrentAssestslistleadSheetTotalModel, Company years, List<BalanceSheetSpModel> trailbalnces, List<SubCategory> lstsubcategorys, List<Address> lstadjustmentaccount, List<Category> lstcategories, List<Address> lstcomments, List<Address> notes, List<Address> accountannotations, List<AccountType> currentAssests, Guid mainId, Guid? leadsheetId, string type, List<Order> lstOrder)
        {
            var leadsheet = currentAssests.Where(a => a.FRATId == leadsheetId).FirstOrDefault();
            if (leadsheet != null)
            {
                LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                leadSheetModel.Id = (Guid)leadsheet.FRATId;
                leadSheetModel.IsLeadsheet = true;
                leadSheetModel.MainId = mainId;
                leadSheetModel.CommonId = Guid.NewGuid();
                leadSheetModel.IsCollapse = false;
                leadSheetModel.LeadSheetId = leadsheet.FRATId;
                leadSheetModel.AccountClass = leadsheet.SubCategory;
                leadSheetModel.Name = leadsheet.Name;
                leadSheetModel.LeadSheetType = leadsheet.Class;

                #region Category
                lsttrialbalance = FillAssestsCategoryTotalModels(companyId, screenName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadSheetModel, type, notes, accountannotations, lstcomments, lstOrder);

                #endregion

                #region Account
                lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId && a.CategoryId == null && a.SubCategoryId == null);
                List<AccountModel> lstAccountModels = new List<AccountModel>();
                var loopTB = lsttrialbalance.DistinctBy(c => c.FRCoaId).ToList();
                foreach (var trialbalance in loopTB.Where(a => (a.CategoryId == null && a.SubCategoryId == null)))
                {
                    AssestsLeadsheetAccountModel(lsttrialbalance, leadsheet, lstAccountModels, trialbalance, leadSheetModel.CommonId, type, notes, accountannotations, lstcomments);
                }
                #endregion
                leadSheetModel.AccountModels = lstAccountModels.OrderBy(c => c.FRRecOrder).ThenBy(c => c.Name).ToList();
                if (lstOrder != null)
                {
                    var categoryOrderLeadSheet = lstOrder.Where(c => c.TypeId == leadsheet.FRATId).FirstOrDefault();
                    if (categoryOrderLeadSheet != null)
                    {
                        leadSheetModel.IsCollapse = categoryOrderLeadSheet.IsCollapse;
                        List<string> result = categoryOrderLeadSheet.Recorder.Split(',').ToList();
                        leadSheetModel.CategoryTotalModels = leadSheetModel.CategoryTotalModels.OrderBy(d => result.IndexOf(d.Id.ToString())).ToList();
                    }
                }
                else
                {
                    if (leadSheetModel.CategoryTotalModels.Count > 0)
                    {
                        var savedOrder = lstsubcategorys.Where(c => c.SubCategoryOrder != null && c.TypeId == leadSheetModel.Id).Select(b => b.SubCategoryOrder).FirstOrDefault();
                        if (savedOrder != null && savedOrder != string.Empty)
                        {
                            var lstSavedOrder = savedOrder.Split(',').ToList();
                            var orderedList = leadSheetModel.CategoryTotalModels.OrderBy(d => lstSavedOrder.IndexOf(d.Id.ToString())).ToList();
                            leadSheetModel.CategoryTotalModels = orderedList;
                        }
                    }
                }
                //for lead sheet totals
                if (leadSheetModel.AccountModels.Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 ||
                    leadSheetModel.CategoryTotalModels.Where(c => c.SubCategoryModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)//#BL
                {
                    LeadSheetTotals(trailbalnces, leadSheetModel, null);

                    var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                    leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    CurrentAssestslistleadSheetTotalModel.Add(leadSheetModel);
                }
            }

            return lsttrialbalance;
        }

        private List<BalanceSheetSpModel> FillLiabilitiesLeadSheetModels(long companyId, string screenName, string groupname, List<BalanceSheetSpModel> lsttrialbalance, List<LeadSheetTotalModel> currentLiabilitieslistleadSheetTotalModel, Company years, List<BalanceSheetSpModel> trailbalnces, List<SubCategory> lstsubcategorys, List<Address> lstadjustmentaccount, List<Category> lstcategories, List<Address> lstcomments, List<Address> notes, List<Address> accountannotations, List<AccountType> currentLiabilities, CurrentModel currentLiabilityModel, Guid? leadsheetId, string type, List<Order> lstorders)
        {
            var leadsheet = currentLiabilities.FirstOrDefault(a => a.FRATId == leadsheetId);
            if (leadsheet != null)
            {
                LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                leadSheetModel.Id = (Guid)leadsheet.FRATId;
                leadSheetModel.CommonId = Guid.NewGuid();
                leadSheetModel.IsLeadsheet = true;
                leadSheetModel.MainId = currentLiabilityModel.MainId;
                leadSheetModel.IsCollapse = false;
                leadSheetModel.LeadSheetId = leadsheet.FRATId;
                leadSheetModel.Name = leadsheet.Name;
                leadSheetModel.AccountClass = leadsheet.SubCategory;
                leadSheetModel.LeadSheetType = leadsheet.Class;


                #region Categories
                lsttrialbalance = FillCategoryTotalModelsForLiabilities(companyId, screenName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadSheetModel, type, notes, accountannotations, lstcomments);
                #endregion

                #region Account
                lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId);
                List<AccountModel> lstAccountModels = new List<AccountModel>();

                //lsttrialbalance = lsttrialbalance.Where(c => (c.IsCyCurrent == true && c.IsPyCurrent == true) || (c.IsCyCurrent == true && c.IsPyCurrent == false) || (c.IsCyCurrent == false && c.IsPyCurrent == true)).ToList();//current
                var loopTb = lsttrialbalance.DistinctBy(c => c.FRCoaId).ToList();
                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null && a.SubCategoryId == null))
                {
                    FillAccountLiabilitiesAndEquityLeadSheet(lsttrialbalance, leadsheet, lstAccountModels, trialbalance, leadSheetModel.CommonId, type, notes, accountannotations, lstcomments);
                }
                leadSheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                #endregion

                //for lead sheet totals
                LeadSheetTotals(lsttrialbalance, leadSheetModel, null);

                //if (leadSheetModel.AccountModels.Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 ||
                //         leadSheetModel.CategoryTotalModels.Where(c => c.SubCategoryModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)//#BL

                var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                currentLiabilitieslistleadSheetTotalModel.Add(leadSheetModel);
            }

            return lsttrialbalance;
        }
        private void CategoryTotals(List<BalanceSheetSpModel> lstTrailBalncesModel, CategoryTotalModel categoryModel, AccountType leadsheet)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();

            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = (categoryModel.AccountModels.Where(a => a.YearModels != null).SelectMany(c => c.YearModels.Where(v => v.Year == colom).Select(x => x.Balance).ToList()).ToList().Sum() ?? 0);
                //+
                // (categoryModel.AccountModels.Where(c => c.AccountModels != null).SelectMany(c => c.AccountModels).ToList().SelectMany(c => c.YearModels).ToList().Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0);
                yearModels.Balance = (yearModels.Balance ?? 0) + (categoryModel.CategoryTotalModels != null ? categoryModel.CategoryTotalModels.SelectMany(c => c.YearModels).Where(c => c.Year == colom).Sum(x => x.Balance) ?? 0 : 0);
                yearModels.Balance = yearModels.Balance ?? 0 + (categoryModel.SubCategoryModels.Select(c => c.Balance).Sum() ?? 0);
                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    currentPeriod = PriorPeriod;
                    i = 0;
                    yearModels.IsPercentage = true;
                    yearModels.FontColor = AssignColor(leadsheet.Class, yearModels.Percentage ?? 0);
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            //foreach (var colom in columnList)
            //{
            //    YearModels yearModels = new YearModels();
            //    yearModels.Year = colom;
            //    yearModels.Balance = categoryModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).Select(x => x.Balance).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Percentage = categoryModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).
            //                    Select(x => x.Percentage).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Balance = yearModels.Balance ?? 0 + (categoryModel.SubCategoryModels.Select(c => c.Balance).Sum() ?? 0);
            //    lstYearModels.Add(yearModels);
            //}
            categoryModel.YearModels = lstYearModels;
        }
        private void IncomeStatementCategoryTotals(List<IncomeStatementSpModel> lstTrailBalncesModel, CategoryTotalModel categoryModel, AccountType leadsheet)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();

            List<YearModels> lstYearModels = new List<YearModels>();

            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = (categoryModel.AccountModels.Where(c => c != null).ToList().SelectMany(c => c.YearModels).ToList().Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0);
                yearModels.Balance = yearModels.Balance + (categoryModel.AccountModels.Where(c => c.AccountModels != null).SelectMany(c => c.AccountModels).ToList().SelectMany(c => c.YearModels).ToList().Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0);
                yearModels.Balance = (yearModels.Balance ?? 0) + (categoryModel.CategoryTotalModels != null ? categoryModel.CategoryTotalModels.SelectMany(c => c.YearModels).Where(c => c.Year == colom).Sum(x => x.Balance) ?? 0 : 0);
                yearModels.Balance = yearModels.Balance ?? 0 + (categoryModel.SubCategoryModels.Select(c => c.Balance).Sum() ?? 0);



                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    i = 0;
                    yearModels.IsPercentage = true;
                    if (leadsheet.Class == "Expenses")
                    {
                        yearModels.FontColor = AssignColorTotal(leadsheet.Class, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.FontColor = AssignColor(leadsheet.Class, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            categoryModel.YearModels = lstYearModels;
        }

        private void IncomeStatementLeadSheetTotals(List<IncomeStatementSpModel> lstTrailBalncesModel, LeadSheetTotalModel leadSheetModel)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = leadSheetModel.AccountModels.Where(c => c.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(v => v.Year == colom).Sum(x => x.Balance) ?? 0;
                yearModels.Balance = (yearModels.Balance ?? 0) + (leadSheetModel.CategoryTotalModels.SelectMany(c => c.YearModels).ToList().Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0);
                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    i = 0;
                    yearModels.IsPercentage = true;
                    if (leadSheetModel.LeadSheetType == "Expenses")
                    {
                        yearModels.FontColor = AssignColorTotal(leadSheetModel.LeadSheetType, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.FontColor = AssignColor(leadSheetModel.LeadSheetType, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }


            //foreach (var colom in columnList)
            //{
            //    YearModels yearModels = new YearModels();

            //    yearModels.Year = colom;
            //    yearModels.Balance = leadSheetModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).Select(x => x.Balance).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Percentage = leadSheetModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).Select(x => x.Percentage).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Balance = yearModels.Balance ?? 0 + (leadSheetModel.CategoryTotalModels.Select(c => c.Balance).Sum() ?? 0);
            //    lstYearModels.Add(yearModels);
            //}
            leadSheetModel.YearModels = lstYearModels;
        }
        private void LeadSheetTotals(List<BalanceSheetSpModel> lstTrailBalncesModel, LeadSheetTotalModel leadSheetModel, string type = null)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();

            //uncategorized counts
            leadSheetModel.OtherYearModels = UncategorizedAccountTotals(columnList, leadSheetModel, leadSheetModel.LeadSheetType);

            List<YearModels> lstYearModels = new List<YearModels>();

            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = leadSheetModel.AccountModels.Where(c => c.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(v => v.Year == colom).Sum(x => x.Balance) ?? 0;
                yearModels.Balance = (yearModels.Balance ?? 0) + (leadSheetModel.CategoryTotalModels.Where(v => v.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0);
                yearModels.Balance = (yearModels.Balance ?? 0) + (leadSheetModel.LeadSheetTotalModels.Where(v => v.YearModels != null).SelectMany(c => c.YearModels).ToList().Where(c => c.Year == colom).Sum(c => c.Balance) ?? 0);
                yearModels.Percentage = 0;
                bool changeAssetColor = false;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        if (currentPeriod < 0 && PriorPeriod < 0)
                            changeAssetColor = true;
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    currentPeriod = PriorPeriod;
                    i = 0;
                    yearModels.IsPercentage = true;
                    yearModels.FontColor = AssignColor(leadSheetModel.LeadSheetType, yearModels.Percentage ?? 0, changeAssetColor);
                }
                i++;
                lstYearModels.Add(yearModels);
            }
            leadSheetModel.YearModels = lstYearModels;
        }



        private void SubCategoryTotals(List<BalanceSheetSpModel> lstTrailBalncesModel, AccountModel categoryModel, AccountType leadsheet)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = categoryModel.AccountModels.SelectMany(x => x.YearModels).Where(x => x.Year == colom).Sum(v => v.Balance);
                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    currentPeriod = PriorPeriod;
                    i = 0;
                    yearModels.IsPercentage = true;
                    yearModels.FontColor = AssignColor(leadsheet.Class, yearModels.Percentage ?? 0);
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            //foreach (var colom in columnList)
            //{
            //    YearModels yearModels = new YearModels();

            //    yearModels.Year = colom;
            //    yearModels.Balance = categoryModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).Select(x => x.Balance).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Percentage = categoryModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).
            //                    Select(x => x.Percentage).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Balance = yearModels.Balance ?? 0 + (categoryModel.SubCategoryModels.Select(c => c.Balance).Sum() ?? 0);
            //    lstYearModels.Add(yearModels);
            //}
            categoryModel.YearModels = lstYearModels;
        }
        private void IncomeStatementSubCategoryTotals(List<IncomeStatementSpModel> lstTrailBalncesModel, AccountModel categoryModel, AccountType leadsheet)
        {
            var accountName = lstTrailBalncesModel.Select(c => c.Name).FirstOrDefault();
            List<string> columnList = lstTrailBalncesModel.Where(c => c.Name == accountName).Select(c => c.Year).ToList();
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in columnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = categoryModel.AccountModels.SelectMany(x => x.YearModels).Where(x => x.Year == colom).Sum(v => v.Balance);
                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    // assignnull = (currentPeriod == 0 && PriorPeriod == 0) ? 0 : assignnull;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }

                    i = 0;
                    yearModels.IsPercentage = true;
                    if (leadsheet.Class == "Expenses")
                    {
                        yearModels.FontColor = AssignColorTotal(leadsheet.Class, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.FontColor = AssignColor(leadsheet.Class, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            //foreach (var colom in columnList)
            //{
            //    YearModels yearModels = new YearModels();

            //    yearModels.Year = colom;
            //    yearModels.Balance = categoryModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).Select(x => x.Balance).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Percentage = categoryModel.AccountModels.Where(c => c.YearModel != null).SelectMany(c => c.YearModel.Where(v => v.Year == colom).
            //                    Select(x => x.Percentage).ToList()).ToList().Sum() ?? 0;
            //    yearModels.Balance = yearModels.Balance ?? 0 + (categoryModel.SubCategoryModels.Select(c => c.Balance).Sum() ?? 0);
            //    lstYearModels.Add(yearModels);
            //}
            categoryModel.YearModels = lstYearModels;
        }



        private void FillNewMethod(List<BalanceSheetSpModel> lstTrailBalances, List<LeadSheetTotalModel> CurrentAssestslistleadSheetTotalModel,
            List<LeadSheetTotalModel> noncurrentassestlistleadSheetTotalModel, List<LeadSheetTotalModel>
            currentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> nonCurrentLiabilitieslistleadSheetTotalModel,
            List<LeadSheetTotalModel> EquitylistleadSheetTotalModel, Company years,
            List<SubCategory> lstsubcategorys, NonCurrentModel nonCurrentAssestModel, CurrentModel
            currentAssetModel, AccountModel accountModelCA, AccountModel accountModelNA, NonCurrentModel
            nonCurrentLiabilityModel, CurrentModel currentLiabilityModel, AccountModel accountModelCL,
            AccountModel accountModelNL, LeadSheetTypeModel Equitymodel, AccountModel accountModelEquity,
            List<LeadSheetTotalModel> lstmainleadsheetTotalModels, Category maincategories, List<Category>
            lstcategories, int loop, Guid? mainid = null/*, List<BalanceSheetSpModel> trailbalnces = null*/)
        {
            var ismain = lstsubcategorys.Where(a => a.TypeId == maincategories.Id && a.IsCollapse == true && a.Type == "SubTotal").Any();
            if (loop == 1)
                ismain = false;
            if (!ismain)
            {
                if (maincategories.Type == "LeadSheet")
                {
                    LeadSheetTotalModel mainleadsheetTotalModel = new LeadSheetTotalModel();
                    FillAddMethod(lstTrailBalances, CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel, currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel, EquitylistleadSheetTotalModel, years, lstsubcategorys, nonCurrentAssestModel, currentAssetModel, accountModelCA, accountModelNA, nonCurrentLiabilityModel, currentLiabilityModel, accountModelCL, accountModelNL, Equitymodel, accountModelEquity, maincategories, mainleadsheetTotalModel, lstcategories, mainid);
                    var amount = mainleadsheetTotalModel.YearModels.Sum(c => c.Balance);
                    mainleadsheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    lstmainleadsheetTotalModels.Add(mainleadsheetTotalModel);
                }
                if (maincategories.Type == "SubTotal")
                {
                    var lstChildSubCategory = lstsubcategorys.Where(c => c.ParentId == maincategories.Id).OrderBy(a => a.Recorder).ToList();
                    if (lstChildSubCategory.Count > 0)
                    {
                        LeadSheetTotalModel mainleadsheetTotalModel = new LeadSheetTotalModel();
                        mainleadsheetTotalModel.Name = maincategories.Name;
                        mainleadsheetTotalModel.LeadSheetType = maincategories.Name;
                        mainleadsheetTotalModel.Id = maincategories.Id;
                        mainleadsheetTotalModel.IsGrandTotal = false;
                        mainleadsheetTotalModel.IsCollapse = true;
                        mainleadsheetTotalModel.Type = "SubTotal";
                        mainleadsheetTotalModel.Recorder = maincategories.Recorder;
                        mainleadsheetTotalModel.ColorCode = maincategories.ColorCode;
                        var lstsubcategoryitems = lstsubcategorys.Where(a => a.ParentId == maincategories.Id).OrderBy(a => a.Recorder).ToList();
                        List<LeadSheetTotalModel> lstsubleadsheetTotalModels = new List<LeadSheetTotalModel>();
                        #region submodel
                        foreach (var subcategoryitem in lstsubcategoryitems)
                        {
                            LeadSheetTotalModel subleadsheetTotalModel = new LeadSheetTotalModel();
                            if (subcategoryitem.Type == "LeadSheet")
                            {
                                subleadsheetTotalModel.Type = "LeadSheet";
                                FillTotalLeadSheetModels(CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel,
                                    currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel,
                                    EquitylistleadSheetTotalModel, nonCurrentAssestModel, currentAssetModel, accountModelCA,
                                    accountModelNA, nonCurrentLiabilityModel, currentLiabilityModel, accountModelCL, accountModelNL,
                                    Equitymodel, accountModelEquity, mainleadsheetTotalModel, subcategoryitem, subleadsheetTotalModel, lstTrailBalances);
                                subleadsheetTotalModel.MainId = mainleadsheetTotalModel.Id;


                                var amount2 = subleadsheetTotalModel.YearModels.Sum(c => c.Balance);
                                subleadsheetTotalModel.IsShowZero = (amount2 == null || amount2 == 0) ? true : false;


                                lstsubleadsheetTotalModels.Add(subleadsheetTotalModel);
                            }
                            else
                            {
                                var masterData = lstcategories.Where(c => c.Id == subcategoryitem.TypeId).FirstOrDefault();
                                if (masterData != null)
                                {
                                    mainleadsheetTotalModel.Type = "SubTotal";
                                    FillAddMethod(lstTrailBalances, CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel, currentLiabilitieslistleadSheetTotalModel,
                                        nonCurrentLiabilitieslistleadSheetTotalModel, EquitylistleadSheetTotalModel, years, lstsubcategorys, nonCurrentAssestModel,
                                        currentAssetModel, accountModelCA, accountModelNA, nonCurrentLiabilityModel, currentLiabilityModel, accountModelCL, accountModelNL,
                                        Equitymodel, accountModelEquity, masterData, subleadsheetTotalModel, lstcategories, mainleadsheetTotalModel.Id);
                                    mainleadsheetTotalModel.MainId = mainleadsheetTotalModel.Id;


                                    var amount1 = subleadsheetTotalModel.YearModels.Sum(c => c.Balance);
                                    subleadsheetTotalModel.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;



                                    lstsubleadsheetTotalModels.Add(subleadsheetTotalModel);
                                }
                            }

                        }
                        #endregion
                        mainleadsheetTotalModel.LeadSheetTotalModels = lstsubleadsheetTotalModels/*.DistinctBy(a => a.Name)*/.OrderBy(a => a.Recorder).ToList();
                        // Sub totals
                        LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailBalances);














                        var amount = mainleadsheetTotalModel.YearModels.Sum(c => c.Balance);
                        mainleadsheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;


                        lstmainleadsheetTotalModels.Add(mainleadsheetTotalModel);
                    }
                    else
                    {
                        LeadSheetTotalModel mainleadsheetTotalModel = new LeadSheetTotalModel();
                        FillAddMethod(lstTrailBalances, CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel, currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel, EquitylistleadSheetTotalModel, years, lstsubcategorys, nonCurrentAssestModel, currentAssetModel, accountModelCA, accountModelNA, nonCurrentLiabilityModel, currentLiabilityModel, accountModelCL, accountModelNL, Equitymodel, accountModelEquity, maincategories, mainleadsheetTotalModel, lstcategories, mainleadsheetTotalModel.Id);
                        lstmainleadsheetTotalModels.Add(mainleadsheetTotalModel);

                    }
                }
            }

        }
        private void FillAddMethod(List<BalanceSheetSpModel> lstTrailBalances, List<LeadSheetTotalModel> CurrentAssestslistleadSheetTotalModel, List<LeadSheetTotalModel> noncurrentassestlistleadSheetTotalModel, List<LeadSheetTotalModel> currentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> nonCurrentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> EquitylistleadSheetTotalModel, Company years, List<SubCategory> lstsubcategorys, NonCurrentModel nonCurrentAssestModel, CurrentModel currentAssetModel, AccountModel accountModelCA, AccountModel accountModelNA, NonCurrentModel nonCurrentLiabilityModel, CurrentModel currentLiabilityModel, AccountModel accountModelCL, AccountModel accountModelNL, LeadSheetTypeModel Equitymodel, AccountModel accountModelEquity, Category maincategories, LeadSheetTotalModel mainleadsheetTotalModel, List<Category> lstcategories, Guid? mainid = null)
        {
            mainleadsheetTotalModel.Name = maincategories.Name;
            mainleadsheetTotalModel.LeadSheetType = maincategories.Name;
            mainleadsheetTotalModel.Id = maincategories.Id;
            mainleadsheetTotalModel.Recorder = maincategories.Recorder;
            mainleadsheetTotalModel.IsGrandTotal = false;
            mainleadsheetTotalModel.IsCollapse = true;
            mainleadsheetTotalModel.Type = "SubTotal";
            mainleadsheetTotalModel.MainId = mainid == null ? Guid.Empty : (Guid)mainid;
            mainleadsheetTotalModel.ColorCode = maincategories.ColorCode;
            var lstsubcategoryitems = lstsubcategorys.Where(a => a.ParentId == maincategories.Id).OrderBy(a => a.Recorder).ToList();
            List<LeadSheetTotalModel> lstsubleadsheetTotalModels = new List<LeadSheetTotalModel>();
            #region submodel
            foreach (var subcategoryitem in lstsubcategoryitems)
            {
                if (subcategoryitem.Type == "SubTotal")
                {
                    var masterSubData = lstcategories.Where(c => c.Id == subcategoryitem.TypeId).FirstOrDefault();
                    FillNewMethod(lstTrailBalances, CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel, currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel, EquitylistleadSheetTotalModel, years, lstsubcategorys, nonCurrentAssestModel, currentAssetModel, accountModelCA, accountModelNA, nonCurrentLiabilityModel, currentLiabilityModel, accountModelCL, accountModelNL, Equitymodel, accountModelEquity, lstsubleadsheetTotalModels, masterSubData, lstcategories, 1, maincategories.Id);
                }
                else
                {
                    LeadSheetTotalModel subleadsheetTotalModel = new LeadSheetTotalModel();
                    FillTotalLeadSheetModels(CurrentAssestslistleadSheetTotalModel, noncurrentassestlistleadSheetTotalModel, currentLiabilitieslistleadSheetTotalModel, nonCurrentLiabilitieslistleadSheetTotalModel, EquitylistleadSheetTotalModel, nonCurrentAssestModel, currentAssetModel, accountModelCA, accountModelNA, nonCurrentLiabilityModel, currentLiabilityModel, accountModelCL, accountModelNL, Equitymodel, accountModelEquity, mainleadsheetTotalModel, subcategoryitem, subleadsheetTotalModel, lstTrailBalances);
                    subleadsheetTotalModel.MainId = mainleadsheetTotalModel.Id;
                    var amount = subleadsheetTotalModel.YearModels.Sum(c => c.Balance);
                    subleadsheetTotalModel.IsShowZero = (amount == null || amount == 0) ? true : false;
                    lstsubleadsheetTotalModels.Add(subleadsheetTotalModel);
                }
            }
            #endregion


            mainleadsheetTotalModel.LeadSheetTotalModels = lstsubleadsheetTotalModels./*DistinctBy(a => a.Name).*/OrderBy(a => a.Recorder).ToList();
            LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailBalances);

        }
        private void FillTotalLeadSheetModels(List<LeadSheetTotalModel> CurrentAssestslistleadSheetTotalModel, List<LeadSheetTotalModel> noncurrentassestlistleadSheetTotalModel, List<LeadSheetTotalModel> currentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> nonCurrentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> EquitylistleadSheetTotalModel, NonCurrentModel nonCurrentAssestModel, CurrentModel currentAssetModel, AccountModel accountModelCA, AccountModel accountModelNA, NonCurrentModel nonCurrentLiabilityModel, CurrentModel currentLiabilityModel, AccountModel accountModelCL, AccountModel accountModelNL, LeadSheetTypeModel Equitymodel, AccountModel accountModelEquity, LeadSheetTotalModel mainleadsheetTotalModel, SubCategory subcategoryitem, LeadSheetTotalModel subleadsheetTotalModel, List<BalanceSheetSpModel> lstTrailBalances)
        {
            subleadsheetTotalModel.Id = subcategoryitem.Id;
            subleadsheetTotalModel.Name = subcategoryitem.Name;
            subleadsheetTotalModel.LeadSheetType = subcategoryitem.Name;
            subleadsheetTotalModel.Recorder = subcategoryitem.Recorder;
            subleadsheetTotalModel.IsGrandTotal = true;
            subleadsheetTotalModel.IsCollapse = true;
            subleadsheetTotalModel.MainId = mainleadsheetTotalModel.Id;
            subleadsheetTotalModel.Recorder = subcategoryitem.Recorder;
            if (subcategoryitem.Name == "Non-current Assets")
            {
                subleadsheetTotalModel.Id = nonCurrentAssestModel.MainId;
                mainleadsheetTotalModel.LeadSheetType = "Assets";
                mainleadsheetTotalModel.AccountClass = JournalConstant.NonCurrent;
                subleadsheetTotalModel.LeadSheetTotalModels = noncurrentassestlistleadSheetTotalModel;
                LeadSheetTotals(lstTrailBalances, subleadsheetTotalModel, null);
            }
            else if (subcategoryitem.Name == "Current Assets")
            {
                subleadsheetTotalModel.Id = currentAssetModel.MainId;
                mainleadsheetTotalModel.LeadSheetType = "Assets";
                mainleadsheetTotalModel.AccountClass = "Current";
                subleadsheetTotalModel.LeadSheetTotalModels = CurrentAssestslistleadSheetTotalModel;
                LeadSheetTotals(lstTrailBalances, subleadsheetTotalModel, null);
            }
            else if (subcategoryitem.Name == "Equity")
            {
                subleadsheetTotalModel.Id = Equitymodel.MainId;
                mainleadsheetTotalModel.LeadSheetType = "Equity";
                mainleadsheetTotalModel.AccountClass = "Equity";
                subleadsheetTotalModel.LeadSheetTotalModels = EquitylistleadSheetTotalModel;
                subleadsheetTotalModel.LeadSheetTotalModels = subleadsheetTotalModel.LeadSheetTotalModels.OrderBy(c => c.Name).ToList();//check
                LeadSheetTotals(lstTrailBalances, subleadsheetTotalModel, null);
            }
            else if (subcategoryitem.Name == "Non-current Liabilities")
            {
                subleadsheetTotalModel.Id = nonCurrentLiabilityModel.MainId;
                mainleadsheetTotalModel.LeadSheetType = "Liabilities";
                mainleadsheetTotalModel.AccountClass = JournalConstant.NonCurrent;
                subleadsheetTotalModel.LeadSheetTotalModels = nonCurrentLiabilitieslistleadSheetTotalModel;
                LeadSheetTotals(lstTrailBalances, subleadsheetTotalModel, null);
            }
            else if (subcategoryitem.Name == "Current Liabilities")
            {
                subleadsheetTotalModel.Id = currentLiabilityModel.MainId;
                mainleadsheetTotalModel.LeadSheetType = "Liabilities";
                mainleadsheetTotalModel.AccountClass = "Current";
                subleadsheetTotalModel.LeadSheetTotalModels = currentLiabilitieslistleadSheetTotalModel;
                LeadSheetTotals(lstTrailBalances, subleadsheetTotalModel, null);
            }
        }


        private void FillGrandLeadSheetModels(List<BalanceSheetSpModel> lstTrailbalances, List<LeadSheetTotalModel> CurrentAssestslistleadSheetTotalModel, List<LeadSheetTotalModel> noncurrentassestlistleadSheetTotalModel, List<LeadSheetTotalModel> currentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> nonCurrentLiabilitieslistleadSheetTotalModel, List<LeadSheetTotalModel> EquitylistleadSheetTotalModel, Company years, List<SubCategory> lstsubcategorys, AccountModel accountModelCA, AccountModel accountModelNA, AccountModel accountModelCL, AccountModel accountModelNL, AccountModel accountModelEquity, List<string> lsttotalsstrings, List<LeadSheetTotalModel> lstmainleadsheetTotalModels, NonCurrentModel nonCurrentAssestModel, CurrentModel currentAssetModel, NonCurrentModel nonCurrentLiabilityModel, CurrentModel currentLiabilityModel, LeadSheetTypeModel Equitymodel, List<BalanceSheetSpModel> trailbalnces)
        {
            foreach (var item in lsttotalsstrings)
            {
                LeadSheetTotalModel mainleadsheetTotalModel = new LeadSheetTotalModel();
                mainleadsheetTotalModel.IsGrandTotal = true;
                mainleadsheetTotalModel.IsCollapse = true;
                if (!lstsubcategorys.Where(a => a.Name.Contains(item) && a.ParentId != null).Any())
                {
                    mainleadsheetTotalModel.Name = item;
                    if (item == "Current Assets")
                    {
                        mainleadsheetTotalModel.Id = currentAssetModel.MainId;
                        mainleadsheetTotalModel.LeadSheetType = "Assets";
                        mainleadsheetTotalModel.AccountClass = "Current";
                        mainleadsheetTotalModel.LeadSheetTotalModels = CurrentAssestslistleadSheetTotalModel;
                        LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailbalances);
                    }
                    else if (item == "Non-current Assets")
                    {
                        mainleadsheetTotalModel.Id = nonCurrentAssestModel.MainId;
                        mainleadsheetTotalModel.LeadSheetType = "Assets";
                        mainleadsheetTotalModel.AccountClass = JournalConstant.NonCurrent;
                        mainleadsheetTotalModel.LeadSheetTotalModels = noncurrentassestlistleadSheetTotalModel;
                        LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailbalances);
                    }
                    else if (item == "Equity")
                    {
                        mainleadsheetTotalModel.Id = Equitymodel.MainId;
                        mainleadsheetTotalModel.LeadSheetType = "Equity";
                        mainleadsheetTotalModel.AccountClass = "Equity";
                        mainleadsheetTotalModel.LeadSheetTotalModels = EquitylistleadSheetTotalModel;
                        LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailbalances);
                    }
                    else if (item == "Current Liabilities")
                    {
                        mainleadsheetTotalModel.Id = currentLiabilityModel.MainId;
                        mainleadsheetTotalModel.LeadSheetType = "Liabilities";
                        mainleadsheetTotalModel.AccountClass = "Current";
                        mainleadsheetTotalModel.LeadSheetTotalModels = currentLiabilitieslistleadSheetTotalModel;
                        LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailbalances);
                    }
                    else if (item == "Non-current Liabilities")
                    {
                        mainleadsheetTotalModel.Id = nonCurrentLiabilityModel.MainId;
                        mainleadsheetTotalModel.LeadSheetType = "Liabilities";
                        mainleadsheetTotalModel.AccountClass = JournalConstant.NonCurrent;
                        mainleadsheetTotalModel.LeadSheetTotalModels = nonCurrentLiabilitieslistleadSheetTotalModel;
                        LeadSheetSubTotals(mainleadsheetTotalModel, lstTrailbalances);
                    }
                    //LeadSheetTotals(trailbalnces, mainleadsheetTotalModel, null);
                    lstmainleadsheetTotalModels.Add(mainleadsheetTotalModel);
                }
            }
        }
        public LeadSheetTotalModel AddMethodForAssestsCheck(Category categoryMaster,
            Company years, List<SubCategory> lstsubcategorys, List<AccountType> lstleadsheet,
            List<BalanceSheetSpModel> trailbalnces, List<Address> lstadjustmentaccount,
            long companyId, string featureName, List<Category> lstcategories, Guid mainId, string type,
            List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null,
            string groupname = null, List<Order> lstorders = null)
        {
            #region LeadSheetTotalModel
            LeadSheetTotalModel leadSheetTotalModel = new LeadSheetTotalModel();
            List<LeadSheetTotalModel> listleadSheetTotalModel = new List<LeadSheetTotalModel>();
            List<BalanceSheetSpModel> lsttrialbalance = null;
            leadSheetTotalModel.Id = categoryMaster.Id;
            leadSheetTotalModel.Name = categoryMaster.Name;
            leadSheetTotalModel.ColorCode = categoryMaster.ColorCode;
            leadSheetTotalModel.CommonId = categoryMaster.Id;
            leadSheetTotalModel.ParentId = categoryMaster.Id;
            leadSheetTotalModel.IsLeadsheet = false;
            leadSheetTotalModel.MainId = mainId;
            leadSheetTotalModel.IsCollapse = categoryMaster.IsCollapse;
            leadSheetTotalModel.Recorder = categoryMaster.Recorder;
            leadSheetTotalModel.DupRecorder = categoryMaster.Recorder;
            leadSheetTotalModel.Type = categoryMaster.Type;
            leadSheetTotalModel.LeadSheetType = categoryMaster.Type;
            #endregion

            #region LeadsheetModel
            List<LeadSheetTotalModel> listLeadsheetModel = new List<LeadSheetTotalModel>();
            var leadsheettotaldetails = lstsubcategorys.Where(a => a.ParentId == categoryMaster.Id &&
            a.AccountClass.ToUpper() == type.ToUpper()).ToList();

            foreach (var subleadsheet in leadsheettotaldetails.ToList())
            {
                if (subleadsheet.Type == "SubTotal")
                {
                    var masterSubData = lstcategories.Where(c => c.Id == subleadsheet.TypeId).FirstOrDefault();
                    masterSubData.Recorder = subleadsheet.Recorder;
                    var data = BalanceSheetAssestsLeadSheetTotalsCheck(companyId, featureName, listleadSheetTotalModel, years,
                            lstleadsheet, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, masterSubData, 1, mainId, type, categoryMaster.Id, categoryMaster.Recorder, notes, accountannotations, lstcomments, groupname, lstorders).OrderBy(a => a.Recorder).FirstOrDefault();
                    if (data != null && data.LeadSheetTotalModels.Count > 0)
                        listLeadsheetModel.Add(data);
                }

                lsttrialbalance = FillSuTotalLeadSheetModels1(categoryMaster, years,
                    lstsubcategorys, lstleadsheet, trailbalnces, lstadjustmentaccount,
                    companyId, featureName, lstcategories, mainId, type, notes,
                    accountannotations, lstcomments, groupname, leadSheetTotalModel,
                    lsttrialbalance, listLeadsheetModel, leadsheettotaldetails, subleadsheet, lstorders);

            }
            leadSheetTotalModel.LeadSheetTotalModels = listLeadsheetModel.DistinctBy(a => a.Id).OrderBy(a => a.Recorder).ToList();

            #endregion LeadsheetModel

            LeadSheetSubTotals(leadSheetTotalModel, trailbalnces);
            return leadSheetTotalModel;
        }
        private List<BalanceSheetSpModel> FillSuTotalLeadSheetModels(long companyId, string featureName, Company years, List<AccountType> lstleadsheet, List<BalanceSheetSpModel> trailbalnces, List<SubCategory> lstsubcategorys, List<Address> lstadjustmentaccount, List<Category> lstcategories, Guid mainId, string type, List<Address> notes, List<Address> accountannotations, List<Address> lstcomments, string groupname, List<BalanceSheetSpModel> lsttrialbalance, LeadSheetTotalModel ChildSubTotal, List<SubCategory> lstChildSubCategory, List<LeadSheetTotalModel> leadSheetSubChildModel, SubCategory item, SubCategory subleadsheet, List<Order> lstorders = null)
        {
            var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
            if (leadsheet != null)
            {
                LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                leadSheetModel.Id = (Guid)leadsheet.FRATId;
                leadSheetModel.CommonId = Guid.NewGuid();
                leadSheetModel.IsCollapse = item.IsCollapse;
                leadSheetModel.IsLeadsheet = true;
                leadSheetModel.MainId = mainId;
                leadSheetModel.LeadSheetId = leadsheet.FRATId;
                leadSheetModel.AccountClass = leadsheet.SubCategory;
                leadSheetModel.Name = leadsheet.Name;
                leadSheetModel.ParentId = ChildSubTotal.Id;
                leadSheetModel.LeadSheetType = leadsheet.Class;
                leadSheetModel.DupRecorder = ChildSubTotal.Recorder;
                leadSheetModel.Recorder = item.Recorder;

                #region Category
                lsttrialbalance = FillAssestsCategoryTotalModels(companyId, featureName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadSheetModel, type, notes, accountannotations, lstcomments);
                #endregion

                #region Account
                lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == leadsheet.FRATId);
                List<AccountModel> lstAccountModels = new List<AccountModel>();
                var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null || a.CategoryId == Guid.Empty))
                {
                    AssestsLeadsheetAccountModel(lsttrialbalance, leadsheet, lstAccountModels, trialbalance, leadSheetModel.CommonId, type, notes, accountannotations, lstcomments);
                }
                #endregion
                leadSheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();
                if (leadSheetModel.CategoryTotalModels.Count > 0)
                {
                    var savedOrder = lstChildSubCategory.Where(c => c.SubCategoryOrder != null).Select(b => b.SubCategoryOrder).FirstOrDefault();
                    if (savedOrder != null && savedOrder != string.Empty)
                    {
                        var lstSavedOrder = savedOrder.Split(',').ToList();
                        var orderedList = leadSheetModel.CategoryTotalModels.OrderBy(d => lstSavedOrder.IndexOf(d.Id.ToString())).ToList();
                        leadSheetModel.CategoryTotalModels = orderedList;
                    }
                }
                //            if (leadSheetModel.AccountModels.Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.AccountModels.Count() > 0).ToList().Count() > 0 ||
                //leadSheetModel.CategoryTotalModels.Where(c => c.SubCategoryModels.Count() > 0).ToList().Count() > 0 || leadSheetModel.CategoryTotalModels.Where(c => c.CategoryTotalModels.Count() > 0).ToList().Count > 0)//#BL
                //            {
                LeadSheetTotals(lsttrialbalance, leadSheetModel, null);
                //}
                var amount = leadSheetModel.YearModels.Sum(c => c.Balance);
                leadSheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                leadSheetSubChildModel.Add(leadSheetModel);
            }
            return lsttrialbalance;
        }

        #endregion
        public LeadSheetTotalModel AddMethodForLiabilitiesAndEquityCheck(Category categoryMaster, Company years, List<SubCategory> lstsubcategorys, List<AccountType> lstleadsheet, List<BalanceSheetSpModel> trailbalnces, List<Address> lstadjustmentaccount, long companyId, string featureName, List<Category> lstcategories, Guid mainId, string type, long companyid, bool incomandELids, List<Address> notes = null, List<Address> accountannotations = null, List<Address> lstcomments = null, string groupname = null, List<Order> lstorders = null)
        {
            LeadSheetTotalModel leadSheetTotalModel = new LeadSheetTotalModel();
            List<LeadSheetTotalModel> listleadSheetTotalModel = new List<LeadSheetTotalModel>();
            List<BalanceSheetSpModel> lsttrialbalance = null;
            leadSheetTotalModel.Id = categoryMaster.Id;
            leadSheetTotalModel.Name = categoryMaster.Name;
            leadSheetTotalModel.ColorCode = categoryMaster.ColorCode;
            leadSheetTotalModel.CommonId = categoryMaster.Id;
            leadSheetTotalModel.IsLeadsheet = false;
            leadSheetTotalModel.MainId = mainId;
            leadSheetTotalModel.IsCollapse = categoryMaster.IsCollapse;
            leadSheetTotalModel.ParentId = categoryMaster.Id;
            leadSheetTotalModel.Recorder = categoryMaster.Recorder;
            leadSheetTotalModel.DupRecorder = categoryMaster.Recorder;
            leadSheetTotalModel.Type = categoryMaster.Type;
            var typeids = lstsubcategorys.Where(a => a.ParentId == categoryMaster.Id).Select(a => a.Id).ToList();
            var ptotals = trailbalnces.Where(a => typeids.Contains((Guid)a.FRPATId));
            var lstleadtrilbalanceids = ptotals.Select(a => a.FRPATId).Distinct().ToList();
            List<LeadSheetTotalModel> listLeadsheetModel = new List<LeadSheetTotalModel>();
            var leadsheettotaldetails = lstsubcategorys.Where(a => a.ParentId == categoryMaster.Id && a.AccountClass.ToUpper() == type.ToUpper()).ToList();

            foreach (var subleadsheet in leadsheettotaldetails.ToList())
            {
                if (subleadsheet.Type == "SubTotal")
                {
                    var masterSubData = lstcategories.Where(c => c.Id == subleadsheet.TypeId).FirstOrDefault();
                    masterSubData.Recorder = subleadsheet.Recorder;

                    var data = BalanceSheetLiabilitiesAndEquityLeadSheetTotalsCheck(companyid, featureName, listleadSheetTotalModel, years, lstleadsheet, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, masterSubData, 1, mainId, type, companyid, incomandELids, categoryMaster.Id, categoryMaster.Recorder, notes, accountannotations, lstcomments, groupname, lstorders).OrderBy(a => a.Recorder).FirstOrDefault();
                    if (data != null && data.LeadSheetTotalModels.Count > 0)
                        listLeadsheetModel.Add(data);
                }

                var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
                if (leadsheet != null)
                {
                    LeadSheetTotalModel leadsheetModel = new LeadSheetTotalModel();
                    leadsheetModel.Id = (Guid)leadsheet.FRATId;
                    leadsheetModel.MainId = mainId;
                    leadsheetModel.LeadSheetId = leadsheet.FRATId;
                    leadsheetModel.Name = leadsheet.Name;
                    leadsheetModel.CommonId = Guid.NewGuid();
                    leadsheetModel.AccountClass = leadsheet.SubCategory;
                    leadsheetModel.IsCollapse = subleadsheet.IsCollapse;
                    leadsheetModel.IsLeadsheet = true;
                    leadsheetModel.ParentId = leadSheetTotalModel.Id;
                    leadsheetModel.LeadSheetType = leadsheet.Class;
                    leadsheetModel.DupRecorder = categoryMaster.Recorder;
                    leadsheetModel.Recorder = subleadsheet.Recorder;
                    var incometotals = trailbalnces.Where(a => a.FRPATId == leadsheet.FRATId);

                    var accountids = trailbalnces.Where(a => a.FRPATId == leadsheet.FRATId).Select(a => a.FRCoaId).ToList();

                    #region Categories
                    if (leadsheetModel.LeadSheetType == "Liabilities")
                    {
                        lsttrialbalance = FillCategoryTotalModelsForLiabilities(companyid, featureName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadsheetModel, "Current");
                    }
                    else
                    {
                        lsttrialbalance = FillEquityCategoryTotal(companyid, featureName, trailbalnces, lstsubcategorys, lstadjustmentaccount, lstcategories, lsttrialbalance, leadsheet, leadsheetModel, incomandELids, notes, accountannotations, lstcomments);

                    }
                    #endregion

                    #region Account
                    lsttrialbalance = trailbalnces.FindAll(a => a.FRPATId == subleadsheet.TypeId);
                    List<AccountModel> lstAccountModels = new List<AccountModel>();
                    var loopTb = lsttrialbalance.DistinctBy(c => c.Name).ToList();
                    foreach (var trialbalance in loopTb.Where(a => a.CategoryId == null && a.SubCategoryId == null))
                    {
                        FillAccountLiabilitiesAndEquityLeadSheet(trailbalnces, leadsheet, lstAccountModels, trialbalance, null, null, notes, accountannotations, lstcomments);
                    }
                    leadsheetModel.AccountModels = lstAccountModels.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Name).ToList();

                    var amount = leadsheetModel.YearModels == null ? 0 : leadsheetModel.YearModels.Sum(c => c.Balance);
                    leadsheetModel.IsShowZero = (amount == null || amount == 0) ? true : false;

                    listLeadsheetModel.Add(leadsheetModel);
                    #endregion

                    if (leadsheetModel.CategoryTotalModels.Count > 0)
                    {
                        var savedOrder = leadsheettotaldetails.Where(c => c.SubCategoryOrder != null && c.TypeId == leadsheetModel.Id).Select(b => b.SubCategoryOrder).FirstOrDefault();
                        if (savedOrder != null && savedOrder != string.Empty)
                        {
                            var lstSavedOrder = savedOrder.Split(',').ToList();
                            var orderedList = leadsheetModel.CategoryTotalModels.OrderBy(d => lstSavedOrder.IndexOf(d.Id.ToString())).ToList();
                            leadsheetModel.CategoryTotalModels = orderedList;
                        }
                    }
                    LeadSheetTotals(trailbalnces, leadsheetModel, type);

                    var amount1 = leadsheetModel.YearModels.Sum(c => c.Balance);
                    leadsheetModel.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;

                    listLeadsheetModel.Add(leadsheetModel);

                }
                leadSheetTotalModel.LeadSheetTotalModels = listLeadsheetModel.DistinctBy(a => a.Id).OrderBy(a => a.Recorder).ToList();
            }
            LeadSheetSubTotals(leadSheetTotalModel, trailbalnces);
            return leadSheetTotalModel;
        }







        public ServiceEntityLU GetAllLookUp(long companyId, string username, string connectionString)
        {
            try
            {
                //return _companyService.GetAllLookup(companyId); //commented on 28/05/2020


                var res = connectionString.Split(';');
                var serverName = res[0].Split('=')[1];
                var AppicationIntest = res[2].Split('=')[1];

                Dictionary<string, string> parms = new Dictionary<string, string>();
                parms.Add(username, companyId.ToString());
                var serializeparms = JsonConvert.SerializeObject(parms);
                CommonObjModel commonObjModel = new CommonObjModel
                {
                    CompanyId = companyId,
                    Params = serializeparms,
                    ServerName = serverName,
                    ApplicationIntest = AppicationIntest,
                    MethodName = "Journal-GetAllLookUp",
                };
                string secondarydboj = JsonConvert.SerializeObject(commonObjModel);

                LoggingHelper.LogMessage(JournalConstant.JournalApplicationService, secondarydboj);


                //new changes based on KG
                ServiceEntityLU serviceEntityLU = new ServiceEntityLU();

                serviceEntityLU.LstOfServiceEntites = _companyService.GetAllLookup(companyId, username);

                #region Interco_Nature_Based_on_IB_Checked 
                using (con = new SqlConnection(connectionString))
                {
                    query = $"select  Count(IsInterCompanyEnabled) from Bean.InterCompanySetting where companyid={companyId} and InterCompanyType in ('Billing','Clearing')";
                    if (con.State != System.Data.ConnectionState.Open)
                        con.Open();
                    cmd = new SqlCommand(query, con);
                    int count = Convert.ToInt32(cmd.ExecuteScalar());
                    if (con.State != System.Data.ConnectionState.Closed)
                        con.Close();
                    serviceEntityLU.IsIntercoActivate = count == 0 ? false : true;

                }
                #endregion Interco_Nature_Based_on_IB_Checked
                return serviceEntityLU;

            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }
        #endregion Audit-Bean

        #region CommonJvView_Popup_call
        public JVPopupViewModel GetJvPopupView(long companyId, Guid documentId, string docType, Guid? externalId, string ConnectionString, string userName)
        {
            JVPopupViewModel jvMOdel = new JVPopupViewModel();
            try
            {
                string docSubType = null;
                query = string.Empty;

                #region UserBasedPermission
                List<long?> lstServIds = new List<long?>();
                using (con = new SqlConnection(ConnectionString))
                {
                    query = $"SELECT c.Id as ServiceEntityId FROM Common.Company c JOIN Common.CompanyUser CU on C.ParentId=CU.CompanyId Join common.CompanyUserDetail CUD On (c.Id = CUD.ServiceEntityId and CU.Id = CUD.CompanyuserId) where c.Status = 1 and c.ParentId = {companyId} and CU.Username= '{userName}'";
                    if (con.State != ConnectionState.Open)
                        con.Open();
                    cmd = new SqlCommand(query, con);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        lstServIds.Add(dr["ServiceEntityId"] != DBNull.Value ? Convert.ToInt64(dr["ServiceEntityId"]) : (long?)null);
                    }
                    con.Close();
                }
                #endregion UserBasedPermission

                List<JVPopupMaster> lstJvPopupmaster = new List<JVPopupMaster>();
                if (docType == DocTypeConstants.BankTransfer || docType == DocTypeConstants.BillPayment || docType == DocTypeConstants.Receipt || docType == DocTypeConstants.DoubtFulDebitNote || docType == DocTypeConstants.Revaluation || docType == DocTypeConstants.CreditNote)
                {
                    List<Journal> lstJournals = null;
                    Dictionary<Guid, string> lstEntites = null;
                    //if(docType==DocTypeConstants.BankTransfer)
                    //{
                    List<Guid> lstJournalIds = _journalService.GetJournalsIdByDocumentId(companyId, documentId, docType == DocTypeConstants.Revaluation ? DocTypeConstants.JournalVocher : docType);
                    lstJournals = _journalService.GetLstOfJournals(lstJournalIds);
                    docSubType = docType == DocTypeConstants.BankTransfer ? lstJournals.Select(a => a.DocSubType).FirstOrDefault() : null;
                    string EntName = null;

                    if (docType == DocTypeConstants.BillPayment || docType == DocTypeConstants.Receipt || docType == DocTypeConstants.DoubtFulDebitNote || docType == DocTypeConstants.CreditNote)
                    {
                        EntName = _beanEntityService.GetEntityByid(lstJournals.Select(a => a.EntityId).FirstOrDefault() != null ? lstJournals.Select(a => a.EntityId).FirstOrDefault() : (Guid?)null, companyId);
                    }
                    if (docType == DocTypeConstants.BankTransfer && docSubType == DocTypeConstants.Interco)
                    {

                        List<Guid?> lstEntityIds = lstJournals.SelectMany(a => a.JournalDetails.Select(b => b.EntityId)).ToList();
                        var lstId = lstEntityIds.Remove(null);
                        lstEntites = _beanEntityService.GetEntityByid(lstEntityIds.Distinct().ToList(), companyId);
                        //Guid? lstEntityIds = journal.EntityId.Value;

                    }

                    var lstCoas = _chartOfAccountService.GetChartofAccounts(lstJournals.SelectMany(a => a.JournalDetails.Select(c => c.COAId)).ToList(), companyId);
                    //List<JVPopupViewDetailModel> lstJvPopViewDetailModel = new List<JVPopupViewDetailModel>();
                    foreach (var journals in lstJournals.Where(d => lstServIds.Contains(d.ServiceCompanyId)))
                    {
                        //var lstCoas = _chartOfAccountService.GetChartofAccounts(journals.JournalDetails.Select(a => a.COAId).ToList(), companyId);
                        JVPopupMaster jvMaster = new JVPopupMaster();
                        jvMaster.DocType = journals.DocType;
                        jvMaster.DocSubType = journals.DocSubType;
                        jvMaster.DocNo = journals.DocNo;
                        jvMaster.DocDate = journals.DocDate;
                        jvMaster.SystemRefNo = journals.SystemReferenceNo;
                        jvMaster.TotalDocDebit = 0;
                        jvMaster.TotalDocCredit = 0;
                        jvMaster.TotalBaseCredit = 0;
                        jvMaster.TotalBaseDebit = 0;
                        string SVEName = _companyService.GetCompanyName(journals.ServiceCompanyId);
                        jvMaster.ServiceEntityName = SVEName != null ? SVEName/* SVEName.Substring(0, 3)*/ : null;

                        jvMaster.JVPopupViewDetailModels = journals.JournalDetails.Any() ? journals.JournalDetails.Where(a => a.IsTax == false).OrderBy(a => a.RecOrder).Select(a => new JVPopupViewDetailModel()
                        {
                            DocDescription = a.AccountDescription,
                            DocDebit = a.DocDebit,
                            DocCredit = a.DocCredit,
                            BaseDebit = a.BaseDebit,
                            BaseCredit = a.BaseCredit,
                            DocCurrency = docType == DocTypeConstants.Revaluation ? a.BaseCurrency : a.DocCurrency,
                            AccountName = lstCoas.Where(c => c.Key == a.COAId).Select(x => x.Value).FirstOrDefault(),
                            //EntityName = lstEntites.Where(c => c.Key == a.EntityId).Select(x => x.Value).FirstOrDefault()
                            EntityName = docType == DocTypeConstants.BankTransfer && docSubType == DocTypeConstants.Interco ? a.EntityId != null ? lstEntites.Where(b => b.Key == a.EntityId).Select(c => c.Value).FirstOrDefault() : null : EntName
                        }).ToList() : null;
                        lstJvPopupmaster.Add(jvMaster);

                        if (journals.JournalDetails.Any())
                        {
                            if (journals.JournalDetails.Where(a => a.IsTax == true).Any() == true)
                            {
                                List<JournalDetail> lstJDetail = journals.JournalDetails.Where(a => a.IsTax == true && a.DocDebit > 0).ToList();
                                List<JVPopupViewDetailModel> lstPopUp = new List<JVPopupViewDetailModel>();
                                if (lstJDetail.Any())
                                {
                                    JVPopupViewDetailModel taxLineItems = new JVPopupViewDetailModel();
                                    taxLineItems.AccountName = "Tax Payable (GST)";
                                    //taxLineItems.BaseCredit = lstJDetail.Sum(a => a.BaseCredit) == 0 ? null : lstJDetail.Sum(a => a.BaseCredit);
                                    taxLineItems.BaseDebit = lstJDetail.Sum(a => a.BaseDebit) == 0 ? null : lstJDetail.Sum(a => a.BaseDebit);
                                    //taxLineItems.DocCredit = lstJDetail.Sum(a => a.DocCredit) == 0 ? null : lstJDetail.Sum(a => a.DocCredit);
                                    taxLineItems.DocDebit = lstJDetail.Sum(a => a.DocDebit) == 0 ? null : lstJDetail.Sum(a => a.DocDebit);
                                    taxLineItems.DocDescription = lstJDetail.Select(a => a.AccountDescription).FirstOrDefault();
                                    taxLineItems.EntityName = EntName;
                                    taxLineItems.DocCurrency = lstJDetail.Select(a => a.DocCurrency).FirstOrDefault();
                                    lstPopUp.Add(taxLineItems);
                                    //jvMaster.JVPopupViewDetailModels.AddRange(lstPopUp);
                                }
                                lstJDetail = journals.JournalDetails.Where(a => a.IsTax == true && a.DocCredit > 0).ToList();
                                if (lstJDetail.Any())
                                {
                                    JVPopupViewDetailModel taxLineItems = new JVPopupViewDetailModel();
                                    taxLineItems.AccountName = "Tax Payable (GST)";
                                    taxLineItems.BaseCredit = lstJDetail.Sum(a => a.BaseCredit) == 0 ? null : lstJDetail.Sum(a => a.BaseCredit);
                                    //taxLineItems.BaseDebit = lstJDetail.Sum(a => a.BaseDebit) == 0 ? null : lstJDetail.Sum(a => a.BaseDebit);
                                    taxLineItems.DocCredit = lstJDetail.Sum(a => a.DocCredit) == 0 ? null : lstJDetail.Sum(a => a.DocCredit);
                                    //taxLineItems.DocDebit = lstJDetail.Sum(a => a.DocDebit) == 0 ? null : lstJDetail.Sum(a => a.DocDebit);
                                    taxLineItems.DocDescription = lstJDetail.Select(a => a.AccountDescription).FirstOrDefault();
                                    taxLineItems.EntityName = EntName;
                                    taxLineItems.DocCurrency = lstJDetail.Select(a => a.DocCurrency).FirstOrDefault();
                                    lstPopUp.Add(taxLineItems);
                                    //jvMaster.JVPopupViewDetailModels.AddRange(lstPopUp);
                                }
                                jvMaster.JVPopupViewDetailModels.AddRange(lstPopUp);
                            }
                        }
                    }

                    jvMOdel.JvPopupMasters = lstJvPopupmaster.OrderBy(d => d.SystemRefNo).ToList();
                    //jvMOdel.jour
                }

                else
                {
                    //  long? serviceCompId=lstServIds.whe
                    Journal journal = docType == DocTypeConstants.OpeningBalance /*|| docType == DocTypeConstants.Bills*/ ? _journalService.GetDocumentIdByDIDAndDocSubType(companyId, documentId, docType)
                        : _journalService.GetDocumentByDIdandCompanyId(companyId, documentId, docType);
                    if (journal != null && lstServIds.Contains(journal.ServiceCompanyId))
                    {
                        string EntName = null;
                        Dictionary<Guid, string> lstEntites = null;
                        jvMOdel.DocType = journal.DocType;
                        jvMOdel.DocSubType = journal.DocSubType;
                        jvMOdel.DocNo = journal.DocNo;
                        jvMOdel.DocDate = journal.DocType == DocTypeConstants.Bills ? journal.PostingDate : journal.DocDate;
                        string SVEName = _companyService.GetCompanyName(journal.ServiceCompanyId);
                        jvMOdel.ServiceEntityName = SVEName != null ? SVEName/*.Substring(0, 3)*/ : null;
                        var lstCoas = _chartOfAccountService.GetChartofAccounts(journal.JournalDetails.Select(a => a.COAId).ToList(), companyId);
                        if (docType == DocTypeConstants.OpeningBalance)
                        {
                            List<Guid?> lstEntityIds = journal.JournalDetails.Select(a => a.EntityId).ToList();
                            var lstId = lstEntityIds.Remove(null);
                            lstEntites = _beanEntityService.GetEntityByid(lstEntityIds, companyId);
                            //Guid? lstEntityIds = journal.EntityId.Value;
                        }
                        else
                        {
                            EntName = _beanEntityService.GetEntityByid(journal.EntityId != null ? journal.EntityId.Value : (Guid?)null, companyId);
                        }
                        //jvMOdel.JVPopupViewDetailModels /*var lst*/ = journal.JournalDetails.Any() ? journal.JournalDetails.OrderBy(a => a.RecOrder).Select(a => new JVPopupViewDetailModel()
                        //{
                        //    DocDescription = a.AccountDescription,
                        //    DocDebit = a.DocDebit,
                        //    DocCredit = a.DocCredit,
                        //    BaseDebit = a.BaseDebit,
                        //    BaseCredit = a.BaseCredit,
                        //    DocCurrency = a.DocCurrency,
                        //    IsTax = a.IsTax,
                        //    AccountName = lstCoas.Where(c => c.Key == a.COAId).Select(x => x.Value).FirstOrDefault(),
                        //    //EntityName = lstEntites.Where(c => c.Key == a.EntityId).Select(x => x.Value).FirstOrDefault()
                        //    EntityName = jvMOdel.DocSubType == DocTypeConstants.OpeningBalance ? lstEntites.Where(c => c.Key == a.EntityId).Select(x => x.Value).FirstOrDefault() : EntName
                        //})/*.GroupBy(a => a.IsTax).Select(grp => grp.FirstOrDefault())*/.ToList() : null;

                        if (docType != DocTypeConstants.OpeningBalance)
                            jvMOdel.JVPopupViewDetailModels = journal.JournalDetails.Any() ? journal.JournalDetails.Where(a => a.IsTax != true).OrderBy(a => a.RecOrder).Select(a => new JVPopupViewDetailModel()
                            {
                                DocDescription = a.AccountDescription,
                                DocDebit = a.DocDebit,
                                DocCredit = a.DocCredit,
                                BaseDebit = a.BaseDebit,
                                BaseCredit = a.BaseCredit,
                                DocCurrency = a.DocCurrency,
                                RecOrder = a.RecOrder,
                                AccountName = lstCoas.Where(c => c.Key == a.COAId).Select(x => x.Value).FirstOrDefault(),
                                //EntityName = lstEntites.Where(c => c.Key == a.EntityId).Select(x => x.Value).FirstOrDefault()
                                EntityName = jvMOdel.DocSubType == DocTypeConstants.OpeningBalance ? lstEntites.Where(c => c.Key == a.EntityId).Select(x => x.Value).FirstOrDefault() : EntName
                            }).ToList() : null;
                        else
                        {
                            jvMOdel.JVPopupViewDetailModels = journal.JournalDetails.Any() ? (from a in journal.JournalDetails.Where(a => a.IsTax != true)
                                                                                              join coa in _chartOfAccountService.Queryable().Where(d => d.CompanyId == companyId) on a.COAId equals coa.Id
                                                                                              orderby coa.Code
                                                                                              select new JVPopupViewDetailModel()
                                                                                              {
                                                                                                  DocDescription = a.AccountDescription,
                                                                                                  DocDebit = a.DocDebit,
                                                                                                  DocCredit = a.DocCredit,
                                                                                                  BaseDebit = a.BaseDebit,
                                                                                                  BaseCredit = a.BaseCredit,
                                                                                                  DocCurrency = a.DocCurrency,
                                                                                                  RecOrder = a.RecOrder,
                                                                                                  AccountName = lstCoas.Where(c => c.Key == a.COAId).Select(x => x.Value).FirstOrDefault(),
                                                                                                  EntityName = lstEntites.Any() ? lstEntites.Where(c => c.Key == a.EntityId).Select(x => x.Value).FirstOrDefault() : EntName,
                                                                                              }).ToList() : null;
                        }

                        //if (docType != DocTypeConstants.JournalVocher)
                        //{
                        List<JournalDetail> lstJDetail = journal.JournalDetails.Any() ? journal.JournalDetails.Where(a => a.IsTax == true).ToList() : null;
                        if (journal.JournalDetails.Where(a => a.IsTax == true).Any() == true)
                        {
                            List<JVPopupViewDetailModel> lstPopUp = new List<JVPopupViewDetailModel>();
                            lstJDetail = journal.JournalDetails.Where(a => a.IsTax == true && (journal.IsBaseCurrencyJV != true ? a.DocDebit : a.BaseDebit) > 0).ToList();
                            if (lstJDetail.Any())
                            {
                                JVPopupViewDetailModel taxLineItems = new JVPopupViewDetailModel();
                                taxLineItems.AccountName = "Tax Payable (GST)";
                                //taxLineItems.BaseCredit = lstJDetail.Sum(a => a.BaseCredit) == 0 ? null : lstJDetail.Sum(a => a.BaseCredit);
                                taxLineItems.BaseDebit = lstJDetail.Sum(a => a.BaseDebit) == 0 ? null : lstJDetail.Sum(a => a.BaseDebit);
                                //taxLineItems.DocCredit = lstJDetail.Sum(a => a.DocCredit) == 0 ? null : lstJDetail.Sum(a => a.DocCredit);
                                taxLineItems.DocDebit = lstJDetail.Sum(a => a.DocDebit) == 0 ? null : lstJDetail.Sum(a => a.DocDebit);
                                taxLineItems.DocDescription = lstJDetail.Select(a => a.AccountDescription).FirstOrDefault();
                                taxLineItems.RecOrder = lstJDetail.Select(c => c.RecOrder).FirstOrDefault();
                                taxLineItems.EntityName = jvMOdel.DocSubType == DocTypeConstants.OpeningBalance ? lstEntites.Where(c => c.Key == lstJDetail.Select(a => a.EntityId.Value).FirstOrDefault()).Select(x => x.Value).FirstOrDefault() : EntName;
                                taxLineItems.DocCurrency = lstJDetail.Select(a => a.DocCurrency).FirstOrDefault();
                                lstPopUp.Add(taxLineItems);
                                //jvMOdel.JVPopupViewDetailModels.AddRange(lstPopUp);
                            }
                            lstJDetail = journal.JournalDetails.Where(a => a.IsTax == true && (journal.IsBaseCurrencyJV != true ? a.DocCredit : a.BaseCredit) > 0).ToList();
                            if (lstJDetail.Any())
                            {
                                JVPopupViewDetailModel taxLineItems = new JVPopupViewDetailModel();
                                taxLineItems.AccountName = "Tax Payable (GST)";
                                taxLineItems.BaseCredit = lstJDetail.Sum(a => a.BaseCredit) == 0 ? null : lstJDetail.Sum(a => a.BaseCredit);
                                //taxLineItems.BaseDebit = lstJDetail.Sum(a => a.BaseDebit) == 0 ? null : lstJDetail.Sum(a => a.BaseDebit);
                                taxLineItems.DocCredit = lstJDetail.Sum(a => a.DocCredit) == 0 ? null : lstJDetail.Sum(a => a.DocCredit);
                                //taxLineItems.DocDebit = lstJDetail.Sum(a => a.DocDebit) == 0 ? null : lstJDetail.Sum(a => a.DocDebit);
                                taxLineItems.DocDescription = lstJDetail.Select(a => a.AccountDescription).FirstOrDefault();
                                taxLineItems.RecOrder = lstJDetail.Select(c => c.RecOrder).FirstOrDefault();
                                taxLineItems.EntityName = jvMOdel.DocSubType == DocTypeConstants.OpeningBalance ? lstEntites.Where(c => c.Key == lstJDetail.Select(a => a.EntityId.Value).FirstOrDefault()).Select(x => x.Value).FirstOrDefault() : EntName;
                                taxLineItems.DocCurrency = lstJDetail.Select(a => a.DocCurrency).FirstOrDefault();
                                lstPopUp.Add(taxLineItems);
                                //jvMOdel.JVPopupViewDetailModels.AddRange(lstPopUp);
                            }
                            jvMOdel.JVPopupViewDetailModels.AddRange(lstPopUp);
                        }
                        if (docType != DocTypeConstants.OpeningBalance)
                            jvMOdel.JVPopupViewDetailModels = jvMOdel.JVPopupViewDetailModels != null ? jvMOdel.JVPopupViewDetailModels.OrderBy(c => c.RecOrder).ToList() : null;
                    }
                }

                #region For_ExcessPaid_Receipt
                if (externalId != null)
                {
                    JVPopupMaster jvMaster = new JVPopupMaster();
                    Journal journal = _journalService.GetDocumentByDIdandCompanyId(companyId, externalId.Value, DocTypeConstants.CreditNote);
                    if (journal != null && lstServIds.Contains(journal.ServiceCompanyId))
                    {
                        string EntName = null;
                        jvMaster.DocType = journal.DocType;
                        jvMaster.DocSubType = journal.DocSubType;
                        jvMaster.DocNo = journal.DocNo;
                        jvMaster.DocDate = journal.DocDate;
                        string SVEName = _companyService.GetCompanyName(journal.ServiceCompanyId);
                        jvMaster.ServiceEntityName = SVEName != null ? SVEName/*.Substring(0, 3)*/ : null;
                        var lstCoas = _chartOfAccountService.GetChartofAccounts(journal.JournalDetails.Select(a => a.COAId).ToList(), companyId);

                        EntName = _beanEntityService.GetEntityByid(journal.EntityId != null ? journal.EntityId.Value : (Guid?)null, companyId);

                        jvMaster.JVPopupViewDetailModels = journal.JournalDetails.Any() ? journal.JournalDetails.Where(a => a.IsTax != true).OrderBy(a => a.RecOrder).Select(a => new JVPopupViewDetailModel()
                        {
                            DocDescription = a.AccountDescription,
                            DocDebit = a.DocDebit,
                            DocCredit = a.DocCredit,
                            BaseDebit = a.BaseDebit,
                            BaseCredit = a.BaseCredit,
                            DocCurrency = a.DocCurrency,
                            AccountName = lstCoas.Where(c => c.Key == a.COAId).Select(x => x.Value).FirstOrDefault(),
                            EntityName = EntName
                        }).ToList() : null;
                        List<JournalDetail> lstJDetail = journal.JournalDetails.Any() ? journal.JournalDetails.Where(a => a.IsTax == true).ToList() : null;
                        if (journal.JournalDetails.Where(a => a.IsTax == true).Any() == true)
                        {
                            List<JVPopupViewDetailModel> lstPopUp = new List<JVPopupViewDetailModel>();
                            lstJDetail = journal.JournalDetails.Where(a => a.IsTax == true && a.DocDebit > 0).ToList();
                            if (lstJDetail.Any())
                            {
                                JVPopupViewDetailModel taxLineItems = new JVPopupViewDetailModel();
                                taxLineItems.AccountName = "Tax Payable (GST)";
                                taxLineItems.BaseDebit = lstJDetail.Sum(a => a.BaseDebit) == 0 ? null : lstJDetail.Sum(a => a.BaseDebit);
                                taxLineItems.DocDebit = lstJDetail.Sum(a => a.DocDebit) == 0 ? null : lstJDetail.Sum(a => a.DocDebit);
                                taxLineItems.DocDescription = lstJDetail.Select(a => a.AccountDescription).FirstOrDefault();
                                taxLineItems.EntityName = EntName;
                                taxLineItems.DocCurrency = lstJDetail.Select(a => a.DocCurrency).FirstOrDefault();
                                lstPopUp.Add(taxLineItems);
                            }
                            lstJDetail = journal.JournalDetails.Where(a => a.IsTax == true && a.DocCredit > 0).ToList();
                            if (lstJDetail.Any())
                            {
                                JVPopupViewDetailModel taxLineItems = new JVPopupViewDetailModel();
                                taxLineItems.AccountName = "Tax Payable (GST)";
                                taxLineItems.BaseCredit = lstJDetail.Sum(a => a.BaseCredit) == 0 ? null : lstJDetail.Sum(a => a.BaseCredit);
                                taxLineItems.DocCredit = lstJDetail.Sum(a => a.DocCredit) == 0 ? null : lstJDetail.Sum(a => a.DocCredit);
                                taxLineItems.DocDescription = lstJDetail.Select(a => a.AccountDescription).FirstOrDefault();
                                taxLineItems.EntityName = EntName;
                                taxLineItems.DocCurrency = lstJDetail.Select(a => a.DocCurrency).FirstOrDefault();
                                lstPopUp.Add(taxLineItems);
                            }
                            jvMaster.JVPopupViewDetailModels.AddRange(lstPopUp);
                        }
                        lstJvPopupmaster.Add(jvMaster);
                        jvMOdel.JvPopupMasters = lstJvPopupmaster;
                    }

                }
                #endregion For_ExcessPaid_Receipt

                //}
                return jvMOdel;
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }
        #endregion CommonJvView_Popup_call

        #region commonBaseCreditandBaseDebitCalculations
        public void SaveBalancingBaseDebitandBaseCredit(decimal? baseDebitTotal, decimal? baseCreditToatl, JournalModel journalModel, Guid journalId, string docNo, string docSubType, out bool? isCredit, bool isUpdate)
        {
            isCredit = false;
            decimal diff = 0;
            if (baseDebitTotal != baseCreditToatl)
            {
                JournalDetail detail = new JournalDetail();
                detail.Id = Guid.NewGuid();
                if (baseCreditToatl > baseDebitTotal)
                {
                    diff = (decimal)(baseCreditToatl - baseDebitTotal);
                    detail.BaseDebit = diff;
                    isCredit = false;
                }
                if (baseCreditToatl < baseDebitTotal)
                {
                    diff = (decimal)(baseDebitTotal - baseCreditToatl);
                    detail.BaseCredit = diff;
                    isCredit = true;
                }
                if (diff <= Convert.ToDecimal(0.1))
                {
                    ChartOfAccount account1 = _chartOfAccountService.GetByName(/*"Rounding Account"*/COANameConstants.Rounding, journalModel.CompanyId); //? COANameConstants//);
                    if (account1 != null)
                    {
                        detail.AccountDescription = journalModel.DocDescription;
                        detail.COAId = account1.Id;
                        detail.JournalId = journalId;
                        detail.DocumentId = journalId;
                        detail.IsTax = false;
                        detail.ServiceCompanyId = journalModel.ServiceCompanyId;
                        detail.DocDate = journalModel.DocDate;
                        detail.PostingDate = journalModel.DocDate;
                        detail.DocType = DocTypeConstants.JournalVocher;
                        detail.DocNo = docNo;
                        if (journalModel.IsGstSettings == true)
                        {
                            detail.TaxId = _taxCodeService.GetTaxId("NA", 0);
                            detail.TaxRate = null;
                        }
                        detail.SystemRefNo = docNo;
                        detail.DocCurrency = journalModel.DocCurrency;
                        detail.BaseCurrency = journalModel.BaseCurrency;
                        detail.ExchangeRate = journalModel.ExchangeRate;
                        detail.GSTExchangeRate = journalModel.GstExchangeRate;
                        detail.DocumentDetailId = Guid.NewGuid();
                        detail.RecOrder = !isUpdate ? (journalModel.JournalDetailModels.Count + 1) : journalModel.JournalDetailModels.Max(d => d.RecOrder) + 1;
                        detail.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(detail);
                    }
                }
            }
        }

        public void SaveBalancingBaseDebitandBaseCredit1(decimal? baseDebitTotal, decimal? baseCreditToatl, JournalModel journalModel, Guid journalId, string docNo, string docSubType, out bool? isCredit, bool isUpdate, int? order)
        {
            isCredit = false;
            decimal diff = 0;
            if (baseDebitTotal != baseCreditToatl)
            {
                JournalDetail detail = new JournalDetail();
                detail.Id = Guid.NewGuid();
                if (baseCreditToatl > baseDebitTotal)
                {
                    diff = (decimal)(baseCreditToatl - baseDebitTotal);
                    detail.BaseDebit = diff;
                    isCredit = false;
                }
                if (baseCreditToatl < baseDebitTotal)
                {
                    diff = (decimal)(baseDebitTotal - baseCreditToatl);
                    detail.BaseCredit = diff;
                    isCredit = true;
                }
                if (diff <= Convert.ToDecimal(0.1))
                {
                    ChartOfAccount account1 = _chartOfAccountService.GetByName(/*"Rounding Account"*/COANameConstants.Rounding, journalModel.CompanyId); //? COANameConstants//);
                    if (account1 != null)
                    {
                        detail.AccountDescription = journalModel.DocDescription;
                        detail.COAId = account1.Id;
                        detail.JournalId = journalId;
                        detail.DocumentId = journalId;
                        detail.IsTax = false;
                        detail.ServiceCompanyId = journalModel.ServiceCompanyId;
                        detail.DocDate = journalModel.DocDate;
                        detail.PostingDate = journalModel.DocDate;
                        detail.DocType = DocTypeConstants.JournalVocher;
                        detail.DocSubType = docSubType;
                        detail.DocNo = docNo;
                        if (journalModel.IsGstSettings == true)
                        {
                            detail.TaxId = _taxCodeService.GetTaxId("NA", 0);
                            detail.TaxRate = null;
                        }
                        detail.SystemRefNo = docNo;
                        detail.DocCurrency = journalModel.DocCurrency;
                        detail.BaseCurrency = journalModel.BaseCurrency;
                        detail.ExchangeRate = journalModel.ExchangeRate;
                        detail.GSTExchangeRate = journalModel.GstExchangeRate;
                        detail.DocumentDetailId = Guid.NewGuid();
                        detail.RecOrder = !isUpdate ? (journalModel.JournalDetailModels.Count + 1) : order;
                        detail.ObjectState = ObjectState.Added;
                        _journalDetailService.Insert(detail);
                    }
                }
            }
        }
        #endregion


        public IQueryable<InvoiceAuditTrailModel> GetDeletedAuditTrail(Guid journalId)
        {
            return _journalService.GetDeletedAuditTrail(journalId);
        }



        public IQueryable<HtmlJournalListingVm> Bean_HTMLJournalListingK(HtmlJlParamsVm htmlJlParamsVm, string ConnectionString)
        {
            try
            {
                using (con = new SqlConnection(ConnectionString))
                {
                    con.Open();
                    cmd = new SqlCommand("[dbo].[Bean_HTMLJournalListing]", con);
                    cmd.CommandTimeout = 0;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CompanyId", htmlJlParamsVm.CompanyId);
                    cmd.Parameters.AddWithValue("@ServiceEntity", (object)htmlJlParamsVm.serviceEntity ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@FromDate", htmlJlParamsVm.FromDate);
                    cmd.Parameters.AddWithValue("@ToDate", htmlJlParamsVm.ToDate);
                    cmd.Parameters.AddWithValue("@DocType", (object)htmlJlParamsVm.DocType ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@SubType", (object)htmlJlParamsVm.SubType ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@DocNumber", (object)htmlJlParamsVm.DocNumber ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@QueryOptions", (object)htmlJlParamsVm.QueryOptions ?? DBNull.Value);
                    using (dr = cmd.ExecuteReader())
                    {
                        DataTable dt = new DataTable();
                        dt.Load(dr);
                        con.Close();
                        return dt.AsEnumerable().Select(z => new HtmlJournalListingVm()
                        {
                            Type = z.Field<string>(0),
                            SubType = z.Field<string>(1),
                            SvcEntity = z.Field<string>(2),
                            Date = z.Field<DateTime?>(3),
                            DocNo = z.Field<string>(4),
                            Entity = z.Field<string>(5),
                            Description = z.Field<string>(6),
                            Account = z.Field<string>(7),
                            Curr = z.Field<string>(8),
                            DocDebit = z.Field<decimal?>(9),
                            DocCredit = z.Field<decimal?>(10),
                            Debit = z.Field<decimal?>(11),
                            Credit = z.Field<decimal?>(12),
                            JournalId = z.Field<Guid?>(13),
                            DocumentId = z.Field<Guid?>(14),
                            ServiceCompanyId = z.Field<long?>(15)

                        }).AsQueryable();
                    }
                }
            }
            catch (Exception e)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, e, e.Message);
                throw e;
            }
        }
        public JournalListingParamVm JournalListingparameters(long companyId, string ConnectionString, string username)
        {
            JournalListingParamVm glLu = new JournalListingParamVm();
            List<ServiceEntity> lstServiceEntity = new List<ServiceEntity>();
            try
            {
                using (SqlConnection conn = new SqlConnection(ConnectionString))
                {
                    if (conn.State != ConnectionState.Open)
                        conn.Open();
                    cmd = new SqlCommand("[dbo].[JournalListingparameters]", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = 0;
                    cmd.Parameters.AddWithValue("@CompanyId", companyId);
                    cmd.Parameters.AddWithValue("@UserName", username);
                    using (dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            ServiceEntity serviceEntity = new ServiceEntity();
                            serviceEntity.Name = dr["Name"] != null ? Convert.ToString(dr["Name"]) : null;
                            serviceEntity.Id = dr["Id"] != DBNull.Value ? Convert.ToInt64(dr["Id"]) : (long?)null;
                            lstServiceEntity.Add(serviceEntity);
                        }
                        glLu.ServiceCompany = lstServiceEntity;
                        dr.NextResult();
                        while (dr.Read())
                            glLu.DocType.Add(Convert.ToString(dr[0]));
                        dr.NextResult();
                        while (dr.Read())
                            glLu.DocSubType.Add(Convert.ToString(dr[0]));
                    }
                    conn.Close();
                }

            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
            return glLu;
        }

        public JournalListingDocSubTypeParamVm JournalListingDocparameters(long companyId, string docType, string ConnectionString)
        {
            JournalListingDocSubTypeParamVm gl = new JournalListingDocSubTypeParamVm();
            try
            {
                using (SqlConnection conn = new SqlConnection(ConnectionString))
                {
                    if (conn.State != ConnectionState.Open)
                        conn.Open();
                    cmd = new SqlCommand("[dbo].[JournalListingDocSubTypeparameters]", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = 0;
                    cmd.Parameters.AddWithValue("@CompanyId", companyId);
                    cmd.Parameters.AddWithValue("@DocType", docType == "null" ? (object)DBNull.Value : docType);
                    using (dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            if (dr.HasRows)
                            {
                                if (docType == null)
                                    gl.SubType.Add(Convert.ToString(dr[1]));
                                else
                                {
                                    gl.SubType.Add(Convert.ToString(dr[1]));
                                }
                            }
                        }
                        gl.SubType = gl.SubType.Distinct().ToList();
                    }
                    conn.Close();
                }
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }

            return gl;
        }


        #region K Calls  Divya

        //public IncomeStatementModelsK GetIncomeStatementByCompanyIdK123(CommonModel commonModel)
        //{
        //    try
        //    {
        //        int Period = 0;
        //        if (commonModel.Period == "Monthly")
        //            Period = 3;
        //        else if (commonModel.Period == "Quarterly")
        //            Period = 2;
        //        else if (commonModel.Period == "Semi-Annually")
        //            Period = 1;
        //        else if (commonModel.Period == "Annually")
        //            Period = 0;
        //        int SamePeriod = commonModel.SamePeriod == true ? 1 : 0;
        //        var lstAccountsData = _categoryService.GetAllAccountsBy_Bean_HTMLIncomeStatmentSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, commonModel.Todate, SamePeriod, Period, commonModel.Frequency);
        //        //here objects creation
        //        IncomeStatementModelsK incomeStatementModel = new IncomeStatementModelsK();
        //        List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK = new List<LeadSheetTotalModelK>();

        //        var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
        //        var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).Select(c => c.Year).ToList();

        //        incomeStatementModel.MainId = Guid.NewGuid();
        //        List<AccountType> lstleadsheet = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).Where(c => c.Category == "Income Statement").ToList();
        //        var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();
        //        finalLeadSheetTotalModelsK = FillIncomeStatementKcall(lstAccountsData, lstleadsheet, lstsubcategorys);
        //        incomeStatementModel.LeadSheetTotalModelK = finalLeadSheetTotalModelsK.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Recorder).ToList();
        //        incomeStatementModel.ColumnLists = ColumnList;

        //        return incomeStatementModel;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        //private List<LeadSheetTotalModelK> FillIncomeStatementKcall(List<IncomeStatementSpModel> lstAccountsData, List<AccountType> lstleadsheet, List<SubCategory> lstsubcategorys)
        //{
        //    List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK;
        //    var lstAccountsloopData = lstAccountsData.DistinctBy(a => a.FRCoaId).ToList();
        //    finalLeadSheetTotalModelsK = lstAccountsloopData.Where(a => lstleadsheet.Select(c => c.FRATId).Contains(a.FRPATId)).Select(c => new LeadSheetTotalModelK()
        //    {
        //        Id = (Guid)c.FRCoaId,
        //        LeadSheetName = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.Name).FirstOrDefault(),
        //        LeadSheetId = c.FRPATId,
        //        Class = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.Class).FirstOrDefault(),
        //        AccountClass = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.SubCategory).FirstOrDefault(),
        //        Recorder = c.Recorder,
        //        CategoryId = c.CategoryId,
        //        CategoryName = lstsubcategorys.Where(a => a.Id == c.CategoryId && a.TypeId == c.FRPATId).Select(a => a.Name).FirstOrDefault(),
        //        SubCategoryId = c.SubCategoryId,
        //        SubCategoryName = lstsubcategorys.Where(a => a.Id == c.SubCategoryId && a.CategoryId == c.CategoryId).Select(a => a.Name).FirstOrDefault(),
        //        FRRecOrder = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.RecOrder).FirstOrDefault(),
        //        Code = c.Code,
        //        AccountName = c.Name,
        //        YearModels = lstAccountsData.Where(f => f.Name == c.Name).Select(x => new YearModels()
        //        {
        //            Year = x.Year,
        //            Balance = x.Balance != null ? Convert.ToDecimal(x.Balance) : 0,
        //            Percentage = x.Percentage,
        //            IsPercentage = x.Year.Contains("Vs"),
        //            FontColor = x.Year.Contains("Vs") ? AssignColor(lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.SubCategory).FirstOrDefault(), x.Percentage) : null
        //        }).ToList(),

        //    }).ToList();
        //    return finalLeadSheetTotalModelsK;
        //}

        //public FinalBalanceSheetModelK GetBalanceSheetK(CommonModel commonModel)
        //{
        //    try
        //    {
        //        int Period = 0;
        //        if (commonModel.Period == "Monthly")
        //            Period = 3;
        //        else if (commonModel.Period == "Quarterly")
        //            Period = 2;
        //        else if (commonModel.Period == "Semi-Annually")
        //            Period = 1;
        //        else if (commonModel.Period == "Annually")
        //            Period = 0;
        //        int SamePeriod = commonModel.SamePeriod == true ? 1 : 0;
        //        //objects creation
        //        FinalBalanceSheetModelK finalBalanceSheetModelK = new FinalBalanceSheetModelK();
        //        List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK = new List<LeadSheetTotalModelK>();

        //        var lstAccountsData = _categoryService.GetAllAccountsBy_Bean_HTMLBalanceSheetSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, (int)commonModel.Frequency, Period, SamePeriod);
        //        var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
        //        var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).
        //            Select(c => c.Year).ToList();
        //        finalBalanceSheetModelK.ColumnLists = ColumnList;

        //        //getting at atime all data
        //        var lstleadsheet = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).OrderBy(c => c.RecOrder).ToList();
        //        var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement != true).ToList();

        //        finalLeadSheetTotalModelsK = FillBalanceSheetK(lstAccountsData, lstleadsheet, lstsubcategorys);
        //        finalBalanceSheetModelK.LeadSheetTotalModelK = finalLeadSheetTotalModelsK.OrderBy(a => a.FRRecOrder).ThenBy(a => a.Recorder).ToList();
        //        return finalBalanceSheetModelK;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        private List<LeadSheetTotalModelK> FillBalanceSheetK(List<BalanceSheetSpModel> lstAccountsData, List<AccountType> lstleadsheet, List<SubCategory> lstsubcategorys)
        {
            List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK;
            var lstAccountsloopData = lstAccountsData.DistinctBy(a => a.FRCoaId).ToList();
            finalLeadSheetTotalModelsK = lstAccountsloopData.Where(a => lstleadsheet.Select(c => c.FRATId).Contains(a.FRPATId)).Select(c => new LeadSheetTotalModelK()
            {
                Id = c.FRCoaId,
                LeadSheetName = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.Name).FirstOrDefault(),
                LeadSheetId = c.FRPATId,
                Class = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.Class).FirstOrDefault(),
                AccountClass = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.SubCategory).FirstOrDefault(),
                Recorder = c.FRRecOrder,
                CategoryId = c.CategoryId,
                CategoryName = lstsubcategorys.Where(a => a.Id == c.CategoryId && a.TypeId == c.FRPATId).Select(a => a.Name).FirstOrDefault(),
                SubCategoryId = c.SubCategoryId,
                SubCategoryName = lstsubcategorys.Where(a => a.Id == c.SubCategoryId && a.CategoryId == c.CategoryId).Select(a => a.Name).FirstOrDefault(),
                FRRecOrder = lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.RecOrder).FirstOrDefault(),
                Code = c.Code,
                AccountName = c.Name,
                YearModels = lstAccountsData.Where(f => f.Name == c.Name).Select(x => new YearModels()
                {
                    Year = x.Year,
                    Balance = x.Balance != null ? Convert.ToDecimal(x.Balance) : 0,
                    Percentage = x.Percentage,
                    IsPercentage = x.Year.Contains("Vs"),
                    FontColor = x.Year.Contains("Vs") ? AssignColor(lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.SubCategory).FirstOrDefault(), x.Percentage) : null
                }).ToList(),

            }).ToList();
            return finalLeadSheetTotalModelsK;
        }

        public FinalBalanceSheetModelK GetBalanceSheetKTest(CommonModel commonModel)
        {
            try
            {
                int Period = 0;
                if (commonModel.Period == "Monthly")
                    Period = 3;
                else if (commonModel.Period == "Quarterly")
                    Period = 2;
                else if (commonModel.Period == "Semi-Annually")
                    Period = 1;
                else if (commonModel.Period == "Annually")
                    Period = 0;
                int SamePeriod = commonModel.SamePeriod == true ? 1 : 0;
                //objects creation
                FinalBalanceSheetModelK finalBalanceSheetModelK = new FinalBalanceSheetModelK();
                List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK = new List<LeadSheetTotalModelK>();

                var lstAccountsData = _categoryService.GetAllAccountsBy_Bean_HTMLBalanceSheetSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, (int)commonModel.Frequency, Period, SamePeriod);
                var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
                var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).
                    Select(c => c.Year).ToList();
                finalBalanceSheetModelK.ColumnLists = ColumnList;

                //getting at atime all data
                var lstAccountType = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).OrderBy(c => c.RecOrder).ToList();
                var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement != true).ToList();
                var lstcategories = _categoryService.GetCategories(commonModel.CompanyId).Where(a => a.IsIncomeStatement != true).ToList();
                var orderslist = _orderService.GetOrderByEid(commonModel.CompanyId);

                //filling all account types
                List<AccountType> lstCurrentAssetsAccountTypes, lstNonCurrentAssetsAccountTypes, lstCurrentLiabilitiesAccountTypes, lstNonCurrentLiabilitiesAccountTypes, lstEquityAccountTypes;
                FillAllAccountTypes(lstAccountType, out lstCurrentAssetsAccountTypes, out lstNonCurrentAssetsAccountTypes, out lstCurrentLiabilitiesAccountTypes, out lstNonCurrentLiabilitiesAccountTypes, out lstEquityAccountTypes);

                // gettig main order

                var mainListOrder = orderslist.Where(c => c.LeadSheetType == "Balance Sheet" && c.Recorder != null).Select(c => c.Recorder).FirstOrDefault().Split(',').ToList();

                int i = 1;
                i = TestMethod(finalLeadSheetTotalModelsK, orderslist, commonModel, lstAccountsData, lstsubcategorys, lstcategories, lstCurrentAssetsAccountTypes, "Current", "Assets", i);
                i = TestMethod(finalLeadSheetTotalModelsK, orderslist, commonModel, lstAccountsData, lstsubcategorys, lstcategories, lstNonCurrentAssetsAccountTypes, "Non-current", "Assets", i);
                i = TestMethod(finalLeadSheetTotalModelsK, orderslist, commonModel, lstAccountsData, lstsubcategorys, lstcategories, lstEquityAccountTypes, "Equity", "Equity", i);
                i = TestMethod(finalLeadSheetTotalModelsK, orderslist, commonModel, lstAccountsData, lstsubcategorys, lstcategories, lstCurrentLiabilitiesAccountTypes, "Current", "Liabilities", i);
                TestMethod(finalLeadSheetTotalModelsK, orderslist, commonModel, lstAccountsData, lstsubcategorys, lstcategories, lstNonCurrentLiabilitiesAccountTypes, "Non-current", "Liabilities", i);

                finalBalanceSheetModelK.LeadSheetTotalModelK = finalLeadSheetTotalModelsK;
                // with and with out zero accounts checking
                if (commonModel.IsZeroAccount == false)
                {
                    var data = finalLeadSheetTotalModelsK.
                         Where(c => c.YearModels != null && c.YearModels.Count > 0 && c.YearModels.Select(v => v.Balance ?? 0).Sum() != 0).
                         ToList();
                    finalBalanceSheetModelK.LeadSheetTotalModelK = data;
                }

                return finalBalanceSheetModelK;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private static void FillAllAccountTypes(List<AccountType> lstAccountType, out List<AccountType> lstCurrentAssetsAccountTypes, out List<AccountType> lstNonCurrentAssetsAccountTypes, out List<AccountType> lstCurrentLiabilitiesAccountTypes, out List<AccountType> lstNonCurrentLiabilitiesAccountTypes, out List<AccountType> lstEquityAccountTypes)
        {
            lstCurrentAssetsAccountTypes = lstAccountType.Where(c => c.SubCategory == "Current" && c.Class == "Assets").ToList();
            lstNonCurrentAssetsAccountTypes = lstAccountType.Where(c => c.SubCategory == "Non-current" && c.Class == "Assets").ToList();
            lstCurrentLiabilitiesAccountTypes = lstAccountType.Where(c => c.SubCategory == "Current" && c.Class == "Liabilities").ToList();
            lstNonCurrentLiabilitiesAccountTypes = lstAccountType.Where(c => c.SubCategory == "Non-current" && c.Class == "Liabilities").ToList();
            lstEquityAccountTypes = lstAccountType.Where(c => c.SubCategory == "Equity" && c.Class == "Equity").ToList();
        }

        private int TestMethod(List<LeadSheetTotalModelK> test, List<Order> lstOrder, CommonModel commonModel, List<BalanceSheetSpModel> lstAccountsData, List<SubCategory> lstsubcategorys, List<Category> lstcategories, List<AccountType> lstCurrentAssetsAccountTypes, string accountClass, string accountSubType, int i)
        {
            var accounttype = accountClass == "Non-current" ? "NonCurrent" : accountClass;
            var order = lstOrder.Where(c => c.LeadSheetType == accountSubType && c.AccountClass == accounttype && c.Recorder != null).Select(x => x.Recorder).FirstOrDefault();

            if (!string.IsNullOrEmpty(order))
            {
                var leadSheetOrder = order.Split(',').Select(c => Guid.Parse(c)).ToList();
                lstCurrentAssetsAccountTypes = leadSheetOrder != null ? lstCurrentAssetsAccountTypes.Where(c => c.FRATId != null).OrderBy(d => leadSheetOrder.IndexOf((Guid)d.FRATId)).ToList() : lstCurrentAssetsAccountTypes;
            }

            foreach (var accountType in lstCurrentAssetsAccountTypes)
            {
                List<BalanceSheetSpModel> lstAcc = new List<BalanceSheetSpModel>();
                List<LeadSheetTotalModelK> finalAcc = new List<LeadSheetTotalModelK>();
                var lstAccounts = lstAccountsData.Where(c => c.FRPATId == accountType.FRATId).ToList();
                var withoutCatandSubcat = lstAccounts.Where(c => c.CategoryId == null && c.SubCategoryId == null).OrderBy(c => c.Recorder).ToList();
                var withCatandSubcat = lstAccounts.Where(c => c.CategoryId != null || c.SubCategoryId != null).ToList();
                LeadSheetTotalModel leadSheetModel = new LeadSheetTotalModel();
                leadSheetModel.Id = (Guid)accountType.FRATId;
                leadSheetModel.Name = accountType.Name;
                leadSheetModel.AccountClass = accountType.Class;
                var data = FillAssestsCategoryTotalModelsTest(withCatandSubcat, lstsubcategorys, lstcategories, accountType,
                    leadSheetModel, accountClass);
                lstAcc.AddRange(data);
                lstAcc.AddRange(withoutCatandSubcat);

                foreach (var c in lstAcc)
                {
                    LeadSheetTotalModelK leadSheetTotalModelK = new LeadSheetTotalModelK();
                    leadSheetTotalModelK.Id = (Guid)c.FRCoaId;
                    leadSheetTotalModelK.LeadSheetName = accountType.Name;
                    leadSheetTotalModelK.LeadSheetId = c.FRPATId;
                    leadSheetTotalModelK.Class = accountType.Class;
                    leadSheetTotalModelK.AccountClass = accountType.SubCategory;
                    leadSheetTotalModelK.Recorder = c.Recorder;
                    leadSheetTotalModelK.CategoryId = c.CategoryId;
                    leadSheetTotalModelK.CategoryName = lstsubcategorys.Where(a => a.Id == c.CategoryId && a.TypeId == c.FRPATId).Select(a => a.Name).FirstOrDefault();
                    leadSheetTotalModelK.SubCategoryId = c.SubCategoryId;
                    leadSheetTotalModelK.SubCategoryName = lstsubcategorys.Where(a => a.Id == c.SubCategoryId && a.CategoryId == c.CategoryId).Select(a => a.Name).FirstOrDefault();
                    leadSheetTotalModelK.FRRecOrder = c.FRRecOrder;
                    leadSheetTotalModelK.Code = c.Code;
                    leadSheetTotalModelK.AccountName = c.Name;
                    leadSheetTotalModelK.ExcelExportRecorder = i++;
                    leadSheetTotalModelK.YearModels = lstAccountsData.Where(f => f.Name == c.Name).Select(x => new YearModels()
                    {
                        Year = x.Year,
                        Balance = x.Balance != null ? Convert.ToDecimal(x.Balance) : 0,
                        Percentage = x.Percentage,
                        IsPercentage = x.Year.Contains("Vs"),
                        FontColor = x.Year.Contains("Vs") ? AssignColor(accountType.SubCategory, x.Percentage) : null
                    }).ToList();
                    finalAcc.Add(leadSheetTotalModelK);
                }
                finalAcc = finalAcc.OrderBy(c => c.FRRecOrder).ThenBy(c => c.AccountName).ToList();
                finalAcc = finalAcc.DistinctBy(c => c.Id).ToList();
                test.AddRange(finalAcc);
            }

            return i;
        }


        private List<BalanceSheetSpModel> FillAssestsCategoryTotalModelsTest(List<BalanceSheetSpModel> trailbalnces, List<SubCategory>
            lstsubcategorys, List<Category> lstcategories, AccountType leadsheet, LeadSheetTotalModel leadSheetModel, string type)
        {
            List<BalanceSheetSpModel> lst = new List<BalanceSheetSpModel>();
            var lstLeadSheetCats = lstcategories.Where(a => a.Type == "Category" && a.AccountClass.ToUpper() == type.ToUpper() && a.LeadsheetId == leadsheet.FRATId).ToList();
            foreach (var leadSheetCat in lstLeadSheetCats)
            {
                var subcategorytotalslist = lstsubcategorys.Where(a => a.ParentId == leadSheetCat.Id).OrderBy(a => a.Recorder).ToList();
                foreach (var subCat in subcategorytotalslist)
                {
                    lst.AddRange(trailbalnces.Where(c => c.CategoryId == subCat.TypeId).OrderBy(c => c.FRRecOrder).ToList());
                }
            }
            var lstSubCat = lstsubcategorys.Where(a => a.TypeId == leadsheet.FRATId && a.ParentId == null && a.AccountClass == null).OrderBy(c => c.Recorder).ToList();
            var lstAccs = trailbalnces.Where(c => lstSubCat.Select(v => v.Id).ToList().Contains((Guid)c.CategoryId)).OrderBy(c => c.FRRecOrder).ToList();
            lstAccs = lstAccs.DistinctBy(c => c.FRCoaId).ToList();
            lst.AddRange(lstAccs);
            return lst;
        }

        #endregion


        public IncomeStatementModelsK GetIncomeStatementByCompanyIdK(CommonModel commonModel)
        {
            try
            {
                int Period = 0;
                if (commonModel.Period == "Monthly")
                    Period = 3;
                else if (commonModel.Period == "Quarterly")
                    Period = 2;
                else if (commonModel.Period == "Semi-Annually")
                    Period = 1;
                else if (commonModel.Period == "Annually")
                    Period = 0;
                int SamePeriod = commonModel.SamePeriod ? 1 : 0;
                List<AccountType> lstleadsheet = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).Where(c => c.Category == "Income Statement").ToList();
                var lstAccountsData = Task.Run(() => _categoryService.GetAllAccountsBy_Bean_HTMLIncomeStatmentSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, commonModel.Todate, SamePeriod, Period, commonModel.Frequency, commonModel.IsInterco)).Result;
                var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();
                var lstcategories = _categoryService.GetCategories(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();

                //here objects creation
                IncomeStatementModelsK incomeStatementModel = new IncomeStatementModelsK();

                List<LeadSheetTotalModelK> leadSheetTotalModelsK = new List<LeadSheetTotalModelK>();
                var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
                var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).Select(c => c.Year).ToList();

                incomeStatementModel.MainId = Guid.NewGuid();

                foreach (var categoryaccounts in lstcategories.OrderBy(a => a.Recorder).ToList())
                {
                    List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK = new List<LeadSheetTotalModelK>();
                    finalLeadSheetTotalModelsK = FillCategorySubAccounts(categoryaccounts, finalLeadSheetTotalModelsK, lstAccountsData, lstsubcategorys, lstleadsheet, lstcategories, 2);
                    leadSheetTotalModelsK.AddRange(finalLeadSheetTotalModelsK);
                }
                //leadSheetTotalModelsK = FillIncomeStatementKcall(lstAccountsData, lstleadsheet, lstsubcategorys);
                var lstdata = leadSheetTotalModelsK.DistinctBy(a => a.Id).OrderBy(a => a.FRRecOrder).ThenBy(a => a.Recorder).ToList();
                int i = 0;

                List<LeadSheetTotalModelK> lstleadSheetTotalModelsK = new List<LeadSheetTotalModelK>();
                foreach (var data in lstdata)
                {
                    List<YearModels> yearModel = new List<YearModels>();
                    data.ExcelExportRecorder = i++;
                    if (data.YearModels.Count <= 0)
                    {
                        LeadSheetTotalModelK lstmodel = (lstdata.Where(s => s.YearModels.Count > 0).FirstOrDefault());
                        foreach (var item in lstmodel.YearModels)
                        {
                            YearModels year = new YearModels();
                            year.Balance = null;
                            year.Percentage = null;
                            year.IsPercentage = false;
                            year.FontColor = null;
                            year.Year = item.Year;
                            yearModel.Add(year);
                        }
                        data.YearModels = yearModel.ToList();
                    }
                    lstleadSheetTotalModelsK.Add(data);
                }


                incomeStatementModel.LeadSheetTotalModelK = lstleadSheetTotalModelsK;
                incomeStatementModel.ColumnLists = ColumnList;
                //incomeStatementModel.LeadSheetTotalModelK.Where(a=>a.YearModels==null).FirstOrDefault() = lstleadSheetTotalModelsK.Select(s => s.YearModels) == null ? lstleadSheetTotalModelsK.Where(s => s.YearModels != null).Select(s => s.YearModels).FirstOrDefault() : yearmodel;

                // with and with out zero accounts checking
                if (commonModel.IsZeroAccount == false)
                {
                    var data = incomeStatementModel.LeadSheetTotalModelK.
                         Where(c => c.YearModels != null && c.YearModels.Count > 0 && c.YearModels.Select(v => v.Balance ?? 0).Sum() != 0).
                         ToList();
                    incomeStatementModel.LeadSheetTotalModelK = data;
                }

                return incomeStatementModel;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        private List<LeadSheetTotalModelK> FillCategorySubAccounts(Category categoryMaster, List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK, List<IncomeStatementSpModel> lstAccountsData, List<SubCategory> lstsubcategorys, List<AccountType> lstleadsheet, List<Category> lstcategoryaccounts, int loop)
        {
            List<LeadSheetTotalModelK> totalleadsheetmodel = new List<LeadSheetTotalModelK>();
            var notRequired = lstsubcategorys.Where(c => c.TypeId == categoryMaster.Id && c.Type == "SubTotal").Any();
            if (loop == 1)
                notRequired = false;
            if (!notRequired)
            {
                if (categoryMaster.Type == "LeadSheet")
                {
                    finalLeadSheetTotalModelsK = AddMethodSubCategoryModel(categoryMaster, finalLeadSheetTotalModelsK, lstAccountsData, lstsubcategorys, lstleadsheet, lstcategoryaccounts);
                    totalleadsheetmodel.AddRange(finalLeadSheetTotalModelsK);
                }
                else if (categoryMaster.Type == "SubTotal")
                {
                    var lstChildSubCategory = lstsubcategorys.Where(c => c.ParentId == categoryMaster.Id).ToList();
                    if (lstChildSubCategory.Count > 0)
                    {
                        foreach (var subCategory in lstChildSubCategory)
                        {
                            if (subCategory.Type == "LeadSheet")
                            {
                                var leadsheet = lstleadsheet.Where(a => a.FRATId == subCategory.TypeId).FirstOrDefault();
                                if (leadsheet != null)
                                {
                                    finalLeadSheetTotalModelsK = FillIncomeStatementKcallById(lstAccountsData, leadsheet, lstsubcategorys, finalLeadSheetTotalModelsK, subCategory, lstleadsheet, categoryMaster);
                                    totalleadsheetmodel.AddRange(finalLeadSheetTotalModelsK);
                                }
                            }
                            else if (subCategory.Type == "SubTotal")
                            {
                                var masterData = lstcategoryaccounts.Where(c => c.Id == subCategory.TypeId).FirstOrDefault();
                                if (masterData != null)
                                {
                                    finalLeadSheetTotalModelsK = AddMethodSubCategoryModel(masterData, finalLeadSheetTotalModelsK, lstAccountsData, lstsubcategorys, lstleadsheet, lstcategoryaccounts);
                                    totalleadsheetmodel.AddRange(finalLeadSheetTotalModelsK);
                                }
                            }
                        }
                    }
                    else
                    {
                        finalLeadSheetTotalModelsK = AddMethodSubCategoryModel(categoryMaster, finalLeadSheetTotalModelsK, lstAccountsData, lstsubcategorys, lstleadsheet, lstcategoryaccounts);
                        totalleadsheetmodel.AddRange(finalLeadSheetTotalModelsK);
                    }
                }
            }
            return totalleadsheetmodel;
        }


        private List<LeadSheetTotalModelK> AddMethodSubCategoryModel(Category categoryMaster, List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK, List<IncomeStatementSpModel> lstAccountsData, List<SubCategory> lstsubcategorys, List<AccountType> lstleadsheet, List<Category> lstcategories)
        {
            List<LeadSheetTotalModelK> totalleadsheetmodel = new List<LeadSheetTotalModelK>();
            var leadsheettotaldetails = lstsubcategorys.Where(a => a.ParentId == categoryMaster.Id).ToList();
            foreach (var subleadsheet in leadsheettotaldetails.OrderBy(c => c.Recorder).ToList())
            {
                if (subleadsheet.Type == "SubTotal")
                {
                    var masterSubData = lstcategories.Where(c => c.Id == subleadsheet.TypeId).FirstOrDefault();
                    if (masterSubData != null)
                    {
                        finalLeadSheetTotalModelsK = FillCategorySubAccounts(categoryMaster, finalLeadSheetTotalModelsK, lstAccountsData, lstsubcategorys, lstleadsheet, lstcategories, 1);
                        totalleadsheetmodel.AddRange(finalLeadSheetTotalModelsK);
                    }
                }
                //individuval LeadSheets
                #region LeadSheets
                var leadsheet = lstleadsheet.Where(a => a.FRATId == subleadsheet.TypeId).FirstOrDefault();
                if (leadsheet != null)
                {
                    finalLeadSheetTotalModelsK = FillIncomeStatementKcallById(lstAccountsData, leadsheet, lstsubcategorys, finalLeadSheetTotalModelsK, subleadsheet, lstleadsheet, categoryMaster);
                    totalleadsheetmodel.AddRange(finalLeadSheetTotalModelsK);
                }
                #endregion

            }
            return totalleadsheetmodel.OrderBy(a => a.Recorder).ToList();
        }


        private List<LeadSheetTotalModelK> FillIncomeStatementKcallById(List<IncomeStatementSpModel> lstAccountsData, AccountType leadsheet, List<SubCategory> lstsubcategorys, List<LeadSheetTotalModelK> finalLeadSheetTotalModelsK, SubCategory subleadsheet, List<AccountType> lstleadsheet, Category categoryMaster)
        {
            var lstAccountsloopData = lstAccountsData.DistinctBy(a => a.FRCoaId).ToList();
            if (lstAccountsloopData.Where(a => a.FRPATId == leadsheet.FRATId).Count() > 0)
            {
                finalLeadSheetTotalModelsK = lstAccountsloopData.Where(a => a.FRPATId == leadsheet.FRATId).Select(c => new LeadSheetTotalModelK()
                {
                    Id = (Guid)c.FRCoaId,
                    LeadSheetName = leadsheet.Name,
                    LeadSheetId = c.FRPATId,
                    Class = leadsheet.Class,
                    AccountClass = leadsheet.Class,
                    Recorder = c.FRRecOrder,
                    CategoryId = c.CategoryId,
                    CategoryName = lstsubcategorys.Where(a => a.Id == c.CategoryId && a.TypeId == c.FRPATId).Select(a => a.Name).FirstOrDefault(),
                    SubCategoryId = c.SubCategoryId,
                    SubCategoryName = lstsubcategorys.Where(a => a.Id == c.SubCategoryId && a.CategoryId == c.CategoryId).Select(a => a.Name).FirstOrDefault(),
                    FRRecOrder = subleadsheet.Recorder,
                    Code = c.Code,
                    AccountName = c.Name,
                    SubtotalName = categoryMaster.Name,
                    YearModels = lstAccountsData.Where(f => f.Name == c.Name).Select(x => new YearModels()
                    {
                        Year = x.Year,
                        Balance = x.Balance != null ? Convert.ToDecimal(x.Balance) : 0,
                        Percentage = x.Percentage,
                        IsPercentage = x.Year.Contains("Vs"),
                        FontColor = x.Year.Contains("Vs") ? AssignColor(lstleadsheet.Where(a => a.FRATId == c.FRPATId).Select(a => a.SubCategory).FirstOrDefault(), x.Percentage) : null
                    }).ToList(),

                }).ToList();
            }
            else
            {
                LeadSheetTotalModelK leadSheetTotalModelK = new LeadSheetTotalModelK();
                leadSheetTotalModelK.Id = Guid.NewGuid();
                leadSheetTotalModelK.LeadSheetName = leadsheet.Name;
                leadSheetTotalModelK.LeadSheetId = leadsheet.FRATId;
                leadSheetTotalModelK.Class = leadsheet.Class;
                leadSheetTotalModelK.AccountClass = leadsheet.Class;
                leadSheetTotalModelK.YearModels = new List<YearModels>();
                finalLeadSheetTotalModelsK.Add(leadSheetTotalModelK);
            }



            return finalLeadSheetTotalModelsK;
        }


        #region Document_History_Fill_Method
        private void FillDocumentHistory(long companyId, Guid documentId, string docType, string docSubType, string docState, decimal docAmount, decimal balanceAmount, string stateChangeBy, string connectionString)
        {
            using (con = new SqlConnection(connectionString))
            {
                if (con.State != ConnectionState.Open)
                    con.Open();
                cmd = new SqlCommand("Bean_DocumentHistory", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CompanyId", companyId);
                cmd.Parameters.AddWithValue("@D ocumentId", documentId);
                cmd.Parameters.AddWithValue("@DocType", docType);
                cmd.Parameters.AddWithValue("@DocSubType", docSubType);
                cmd.Parameters.AddWithValue("@DocState", docState);
                cmd.Parameters.AddWithValue("@DocAmount", docAmount);
                cmd.Parameters.AddWithValue("@BalanaceAmount", balanceAmount);
                cmd.Parameters.AddWithValue("@StateChangedBy", stateChangeBy);
                cmd.ExecuteNonQuery();
                con.Close();
            }
        }
        #endregion Document_History_Fill_Method

        #region GST_Report_coa_by_accounttype
        public List<ChartOfAccountVM> GetCoabyAccountType(long companyId, string accountType, string connectionString)
        {
            try
            {
                List<ChartOfAccountVM> lstCOA = new List<ChartOfAccountVM>();
                using (con = new SqlConnection(connectionString))
                {
                    if (con.State != ConnectionState.Open)
                        con.Open();
                    cmd = new SqlCommand("Bean_GSTReport_AccountTypeCOAs", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CompanyId", companyId.ToString());
                    cmd.Parameters.AddWithValue("@AccountType", accountType);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        ChartOfAccountVM coa = new ChartOfAccountVM();
                        coa.Name = dr["COAName"] != null ? Convert.ToString(dr["COAName"]) : null;
                        coa.Id = dr["COAId"] != DBNull.Value ? Convert.ToInt64(dr["COAId"]) : (long?)null;
                        lstCOA.Add(coa);
                    }
                    if (con.State == ConnectionState.Open)
                        con.Close();
                }
                return lstCOA;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion




        #region NewBeanFinancials

        public NewStatementModel GetNewIncomestatement(CommonModel commonModel)
        {
            try
            {

                //var res = connection.Split(';');
                //var serverName = res[0].Split('=')[1];
                //var AppicationIntest = res[2].Split('=')[1];

                //Dictionary<string,Object> parms = new Dictionary<string,Object>();
                //parms.Add("Object-", commonModel);
                //var serializeparms = JsonConvert.SerializeObject(parms);
                //CommonObjModel commonObjModel = new CommonObjModel
                //{
                //    CompanyId = companyId,
                //    Params = serializeparms,
                //    ServerName = serverName,
                //    ApplicationIntest = AppicationIntest,
                //    MethodName = "Jornal - GetNewIncomestatement",
                //};
               // string secondarydboj = JsonConvert.SerializeObject(commonObjModel);

               // LoggingHelper.LogMessage(BeanLogConstant.ReportsReadOnlyApplicationService, secondarydboj);

                NewStatementModel newIncomeStatementModel = new NewStatementModel();
                int Period = 0;
                Period = GetPeriodBasedonType(commonModel, Period);
                int SamePeriod = commonModel.SamePeriod ? 1 : 0;

                // getting data from tables
                var lstAccountsData = _categoryService.GetAllAccountsBy_Bean_HTMLIncomeStatmentSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, commonModel.Todate, SamePeriod, Period, commonModel.Frequency, commonModel.IsInterco);
                var lstsubcategorys = _categoryService.Getsubcategory(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();
                var lstcategories = _categoryService.GetCategories(commonModel.CompanyId).Where(a => a.IsIncomeStatement == true).ToList();
                List<AccountType> lstleadsheet = _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).Where(c => c.Category == "Income Statement").ToList();
                var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
                var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).Select(c => c.Year).ToList();

                IncomeStatementModel incomeStatementModel = new IncomeStatementModel();
                BuildColumnsHTMLDataNew(incomeStatementModel, ColumnList, commonModel);
                newIncomeStatementModel.ColumnLists = incomeStatementModel.ColumnLists;

                List<Guid?> lstLeadSheetIds = new List<Guid?>();
                lstLeadSheetIds.AddRange(lstsubcategorys.Where(c => c.Type == "LeadSheet" && c.ParentId == lstcategories.Where(x => x.Name == ControlCodeConstants.GrossProfit).Select(v => v.Id).FirstOrDefault()).OrderBy(b => b.Recorder).Select(c => c.TypeId).ToList());
                lstLeadSheetIds.AddRange(lstsubcategorys.Where(c => c.Type == "LeadSheet" && c.ParentId == lstcategories.Where(x => x.Name == ControlCodeConstants.ProfitbeforeTax).Select(v => v.Id).FirstOrDefault()).OrderBy(b => b.Recorder).Select(c => c.TypeId).ToList());
                lstLeadSheetIds.AddRange(lstsubcategorys.Where(c => c.Type == "LeadSheet" && c.ParentId == lstcategories.Where(x => x.Name == ControlCodeConstants.ProfitafterTax).Select(v => v.Id).FirstOrDefault()).OrderBy(b => b.Recorder).Select(c => c.TypeId).ToList());
                lstleadsheet = lstleadsheet.OrderBy(d => lstLeadSheetIds.IndexOf(d.FRATId)).ToList();

                List<AccountNewModel> lstAccoutNewModel = new List<AccountNewModel>();
                FillIncomeStatementModels(lstAccountsData, lstsubcategorys, lstcategories, lstleadsheet, ColumnList, lstAccoutNewModel);
                newIncomeStatementModel.ListAccountNewModel = AddingFinalTotalsandSetTotalsOrder(ColumnList, lstAccoutNewModel);
                return newIncomeStatementModel;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        private List<AccountNewModel> AddingFinalTotalsandSetTotalsOrder(List<string> ColumnList, List<AccountNewModel> lstAccoutNewModel)
        {
            var grossProfitAccounts = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.GrossProfit).ToList();
            var profitBeforeTaxAccounts = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.ProfitbeforeTax).ToList();
            var profitAfterTaxAccounts = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.ProfitafterTax).ToList();


            //Gross Profit

            AccountNewModel accountNewModel1 = new AccountNewModel();
            accountNewModel1.AccountName = ControlCodeConstants.GrossProfit;
            accountNewModel1.AccountType = ControlCodeConstants.GrossProfit;
            accountNewModel1.Type = ControlCodeConstants.Total;
            accountNewModel1.GroupType = ControlCodeConstants.GrossProfit;
            accountNewModel1.GroupHeading = ControlCodeConstants.GrossProfit;
            accountNewModel1.YearModels = SubTotals(ColumnList, grossProfitAccounts, "SubTotals");
            var amount1 = accountNewModel1.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            accountNewModel1.IsShowZero = (amount1 == null || amount1 == 0) ? true : false;
            accountNewModel1.Recorder = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.GrossProfit).Count();
            lstAccoutNewModel.Insert(lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.GrossProfit).Count(), accountNewModel1);

            //Total Expenses

            AccountNewModel TotalExpenses = new AccountNewModel();
            TotalExpenses.AccountName = ControlCodeConstants.TotalExpenses;
            TotalExpenses.AccountType = ControlCodeConstants.TotalExpenses;
            TotalExpenses.Type = ControlCodeConstants.Total;
            TotalExpenses.GroupType = ControlCodeConstants.TotalExpenses;
            TotalExpenses.GroupHeading = ControlCodeConstants.ProfitbeforeTax;
            TotalExpenses.YearModels = SubTotals(ColumnList, profitBeforeTaxAccounts.Where(c => c.Class == "Expenses").ToList(), "SubTotals");
            var totalExpensesAmount = TotalExpenses.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            TotalExpenses.IsShowZero = (totalExpensesAmount == null || totalExpensesAmount == 0) ? true : false;
            TotalExpenses.Recorder = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.GrossProfit).Count() + lstAccoutNewModel.Where(c => c.Class == ControlCodeConstants.Expenses && c.GroupHeading == ControlCodeConstants.ProfitbeforeTax).Count();
            lstAccoutNewModel.Insert((int)TotalExpenses.Recorder, TotalExpenses);



            //Total Other income

            AccountNewModel TotalOtherIncome = new AccountNewModel();
            TotalOtherIncome.AccountName = ControlCodeConstants.TotalOtherIncome;
            TotalOtherIncome.AccountType = ControlCodeConstants.TotalOtherIncome;
            TotalOtherIncome.Type = ControlCodeConstants.Total;
            TotalOtherIncome.GroupType = ControlCodeConstants.TotalOtherIncome;
            TotalOtherIncome.GroupHeading = ControlCodeConstants.ProfitbeforeTax;
            TotalOtherIncome.YearModels = SubTotals(ColumnList, profitBeforeTaxAccounts.Where(c => c.Class == "Income").ToList(), "SubTotals");
            var totalOtherIncomeAmount = TotalOtherIncome.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            TotalOtherIncome.IsShowZero = (totalOtherIncomeAmount == null || totalOtherIncomeAmount == 0) ? true : false;
            TotalOtherIncome.Recorder = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.GrossProfit).Count() + lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.ProfitbeforeTax).Count();
            lstAccoutNewModel.Insert((int)TotalOtherIncome.Recorder, TotalOtherIncome);

            //Profit before Tax

            AccountNewModel ProfitbeforeTax = new AccountNewModel();
            ProfitbeforeTax.AccountName = ControlCodeConstants.ProfitbeforeTax;
            ProfitbeforeTax.AccountType = ControlCodeConstants.ProfitbeforeTax;
            ProfitbeforeTax.Type = ControlCodeConstants.Total;
            ProfitbeforeTax.GroupType = ControlCodeConstants.ProfitbeforeTax;
            ProfitbeforeTax.GroupHeading = ControlCodeConstants.ProfitbeforeTax;
            profitBeforeTaxAccounts.AddRange(grossProfitAccounts);
            ProfitbeforeTax.YearModels = SubTotals(ColumnList, profitBeforeTaxAccounts, "SubTotals");
            var profitbeforeTaxAmount = ProfitbeforeTax.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            ProfitbeforeTax.IsShowZero = (profitbeforeTaxAmount == null || profitbeforeTaxAmount == 0) ? true : false;
            ProfitbeforeTax.Recorder = lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.GrossProfit).Count() + lstAccoutNewModel.Where(c => c.GroupHeading == ControlCodeConstants.ProfitbeforeTax).Count();
            lstAccoutNewModel.Insert((int)ProfitbeforeTax.Recorder, ProfitbeforeTax);

            //NetProfit

            AccountNewModel NetProfit = new AccountNewModel();
            NetProfit.AccountName = ControlCodeConstants.NetProfit;
            NetProfit.AccountType = ControlCodeConstants.NetProfit;
            NetProfit.Type = ControlCodeConstants.FinalTotal;
            NetProfit.GroupType = ControlCodeConstants.NetProfit;
            NetProfit.GroupHeading = ControlCodeConstants.NetProfit;
            NetProfit.YearModels = SubTotals(ColumnList, lstAccoutNewModel.ToList(), "SubTotals");
            var amount4 = NetProfit.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            NetProfit.IsShowZero = (amount4 == null || amount4 == 0) ? true : false;
            NetProfit.Recorder = lstAccoutNewModel.Count();
            lstAccoutNewModel.Insert((int)NetProfit.Recorder, NetProfit);

            return lstAccoutNewModel;
        }
        private void FillIncomeStatementModels(List<IncomeStatementSpModel> lstAccountsData, List<SubCategory> lstsubcategorys, List<Category> lstcategories, List<AccountType> lstleadsheet, List<string> ColumnList, List<AccountNewModel> lstAccoutNewModel)
        {
            int Rec = 1;
            foreach (var accountType in lstleadsheet)
            {
                var lstChartOfAccounts = lstAccountsData.Where(c => c.FRPATId == accountType.FRATId).ToList();
                lstChartOfAccounts = lstChartOfAccounts.DistinctBy(c => c.FRCoaId).ToList();
                foreach (var coaAccout in lstChartOfAccounts)
                {
                    AccountNewModel accountNewModel = new AccountNewModel();
                    accountNewModel.AccountName = coaAccout.Name;
                    accountNewModel.AccountType = accountType.Name;
                    accountNewModel.Type = ControlCodeConstants.Item;
                    accountNewModel.Class = accountType.Class;
                    accountNewModel.Recorder = Rec;
                    accountNewModel.GroupType = lstcategories.Where(c => c.Id == lstsubcategorys.Where(x => x.Name == accountType.Name).Select(v => v.ParentId).FirstOrDefault()).Select(o => o.Name).FirstOrDefault();
                    FillGroupType(accountNewModel);
                    accountNewModel.GroupHeading = lstcategories.Where(c => c.Id == lstsubcategorys.Where(x => x.Name == accountType.Name).Select(v => v.ParentId).FirstOrDefault()).Select(o => o.Name).FirstOrDefault();

                    //accountNewModel.YearModels = lstAccountsData.Where(c => c.Name == coaAccout.Name).OrderBy(c => c.Code).Select(x => new YearModels()
                    //{
                    //    Year = x.Year,
                    //    Balance = x.Balance != null ? Convert.ToDecimal(x.Balance) : 0,
                    //    Percentage = x.Percentage,
                    //    IsPercentage = x.Year.Contains("Vs"),
                    //    FontColor = x.Year.Contains("Vs") ? AssignColor(accountType.Class, x.Percentage) : null
                    //}).ToList();
                    var accounts = lstAccountsData.Where(c => c.Name == coaAccout.Name).OrderBy(c => c.Code).ToList();
                    accountNewModel.YearModels = AccountTotals(ColumnList, accounts, accountType);

                    var amount = accountNewModel.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
                    accountNewModel.IsShowZero = (amount == null || amount == 0);
                    if ((amount == null || amount == 0) && (accountNewModel.YearModels.Any(d => d.Balance > 0) || accountNewModel.YearModels.Any(d => d.Balance < 0)))
                        accountNewModel.IsShowZero = false;
                    lstAccoutNewModel.Add(accountNewModel);
                    Rec++;
                }

                AccountNewModel accountTypeModel = new AccountNewModel();
                accountTypeModel.AccountName = ControlCodeConstants.Total;
                accountTypeModel.AccountType = accountType.Name;
                accountTypeModel.Type = ControlCodeConstants.Total;
                accountTypeModel.Class = accountType.SubCategory;
                accountTypeModel.GroupType = lstcategories.Where(c => c.Id == lstsubcategorys.Where(x => x.Name == accountType.Name).Select(v => v.ParentId).FirstOrDefault()).Select(o => o.Name).FirstOrDefault();
                FillGroupType(accountTypeModel);
                accountTypeModel.GroupHeading = lstcategories.Where(c => c.Id == lstsubcategorys.Where(x => x.Name == accountType.Name).Select(v => v.ParentId).FirstOrDefault()).Select(o => o.Name).FirstOrDefault();
                accountTypeModel.Recorder = Rec;
                accountTypeModel.YearModels = AccountTypeTotals(ColumnList, lstAccoutNewModel, accountType);
                var amountTotal = lstAccoutNewModel.Where(c => c.AccountType == accountType.Name && c.Type == ControlCodeConstants.Item).SelectMany(c => c.YearModels).Where(x => x.Balance != null && x.Balance != 0).Count();
                accountTypeModel.IsShowZero = amountTotal == 0;
                lstAccoutNewModel.Add(accountTypeModel);
                Rec++;
            }
        }

        private static void FillGroupType(AccountNewModel accountNewModel)
        {
            if (accountNewModel.GroupType == ControlCodeConstants.ProfitbeforeTax)
            {
                if (accountNewModel.Class == ControlCodeConstants.Expenses)
                {
                    accountNewModel.GroupType = ControlCodeConstants.TotalExpenses;
                }
                else if (accountNewModel.Class == ControlCodeConstants.Income)
                {
                    accountNewModel.GroupType = ControlCodeConstants.TotalOtherIncome;
                }
            }
        }


        private List<YearModels> AccountTotals(List<string> ColumnList, List<IncomeStatementSpModel> lstAccoutNewModel, AccountType accountType1)
        {
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            foreach (var colom in ColumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = lstAccoutNewModel.Where(c => c.Year == colom).Select(c => c.Balance).FirstOrDefault();

                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    i = 0;
                    yearModels.IsPercentage = true;

                    if (PriorPeriod == 0)
                    {
                        yearModels.Percentage = null;
                        yearModels.FontColor = null;
                    }
                    else if (currentPeriod < 0 && PriorPeriod < 0)
                    {
                        var PriorPeriodValue = PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod;
                        yearModels.Percentage = ((currentPeriod * -1) - PriorPeriodValue) / PriorPeriodValue * 100;
                        yearModels.FontColor = AssignNewColor(accountType1.Class, yearModels.Percentage);
                    }
                    else if (accountType1.Class == "Expenses")
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColorTotal(accountType1.Class, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColor(accountType1.Class, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            return lstYearModels;
        }
        private List<YearModels> AccountTotals(List<string> ColumnList, List<BalanceSheetSpModel> lstAccoutNewModel, AccountType accountType1)
        {
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;

            foreach (var colom in ColumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = lstAccoutNewModel.Where(c => c.Year == colom).Select(c => c.Balance).FirstOrDefault();

                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    i = 0;
                    yearModels.IsPercentage = true;

                    if (PriorPeriod == 0)
                    {
                        yearModels.Percentage = null;
                        yearModels.FontColor = null;
                    }
                    else if (currentPeriod < 0 && PriorPeriod < 0)
                    {
                        var PriorPeriodValue = PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod;
                        yearModels.Percentage = ((currentPeriod * -1) - PriorPeriodValue) / PriorPeriodValue * 100;
                        yearModels.FontColor = AssignNewColor(accountType1.Class, yearModels.Percentage);
                    }
                    else if (accountType1.Class == "Expenses")
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColorTotal(accountType1.Class, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColor(accountType1.Class, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            return lstYearModels;
        }
        private List<YearModels> AccountTypeTotals(List<string> ColumnList, List<AccountNewModel> lstAccoutNewModel, AccountType accountType1)
        {
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in ColumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = lstAccoutNewModel.Where(c => c.Type == ControlCodeConstants.Item && c.AccountType == accountType1.Name).SelectMany(c => c.YearModels).ToList().Where(x => x.Year == colom).Sum(c => c.Balance);

                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    i = 0;
                    yearModels.IsPercentage = true;

                    if (PriorPeriod == 0)
                    {
                        yearModels.Percentage = null;
                        yearModels.FontColor = null;
                    }
                    else if (currentPeriod < 0 && PriorPeriod < 0)
                    {
                        var PriorPeriodValue = PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod;
                        yearModels.Percentage = ((currentPeriod * -1) - PriorPeriodValue) / PriorPeriodValue * 100;
                        yearModels.FontColor = AssignNewColor(accountType1.Class, yearModels.Percentage);
                    }
                    else if (accountType1.Class == "Expenses")
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = yearModels.Percentage == 0 ? "red" : AssignColorTotal(accountType1.Class, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColor(accountType1.Class, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            return lstYearModels;
        }
        private List<YearModels> SubTotals(List<string> ColumnList, List<AccountNewModel> lstAccoutNewModel, string subTotals)
        {
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            string classType = null;
            bool isIncome = false;
            bool isExpence = false;

            if (subTotals == "SubTotals")
            {
                isIncome = lstAccoutNewModel.Where(c => c.Class == ControlCodeConstants.Income).Any();
                isExpence = lstAccoutNewModel.Where(c => c.Class == ControlCodeConstants.Expenses).Any();

                if (isIncome && isExpence)
                    classType = ControlCodeConstants.Income;
                else if (isIncome && !isExpence)
                    classType = ControlCodeConstants.Income;
                else if (!isIncome && isExpence)
                    classType = ControlCodeConstants.Expenses;
            }


            var lstIncome = lstAccoutNewModel.Where(c => c.Type == ControlCodeConstants.Item && c.Class == ControlCodeConstants.Income).SelectMany(c => c.YearModels).ToList();
            var lstExpences = lstAccoutNewModel.Where(c => c.Type == ControlCodeConstants.Item && c.Class == ControlCodeConstants.Expenses).SelectMany(c => c.YearModels).ToList();

            foreach (var colom in ColumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                if (isIncome && isExpence)
                    yearModels.Balance = lstIncome.Where(x => x.Year == colom).Sum(c => c.Balance) - lstExpences.Where(x => x.Year == colom).Sum(c => c.Balance);
                else if (isIncome && !isExpence)
                    yearModels.Balance = lstIncome.Where(x => x.Year == colom).Sum(c => c.Balance);
                else if (!isIncome && isExpence)
                    yearModels.Balance = lstExpences.Where(x => x.Year == colom).Sum(c => c.Balance);
                yearModels.Percentage = 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    i = 0;
                    yearModels.IsPercentage = true;

                    if (PriorPeriod == 0)
                    {
                        yearModels.Percentage = null;
                        yearModels.FontColor = null;
                    }
                    else if (currentPeriod < 0 && PriorPeriod < 0)
                    {
                        var PriorPeriodValue = PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod;
                        yearModels.Percentage = ((currentPeriod * -1) - PriorPeriodValue) / PriorPeriodValue * 100;
                        yearModels.FontColor = AssignNewColor(classType, yearModels.Percentage);
                    }
                    else if (classType == "Expenses")
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColorTotal(classType, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColor(classType, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;

                lstYearModels.Add(yearModels);
            }
            return lstYearModels;
        }
        public NewStatementModel GetNewBalanceSheet(CommonModel commonModel)
        {

            //var res = connection.Split(';');
            //var serverName = res[0].Split('=')[1];
            //var AppicationIntest = res[2].Split('=')[1];

            //Dictionary<string, Object> parms = new Dictionary<string,Object>();
            //parms.Add("Object", commonModel);
            //var serializeparms = JsonConvert.SerializeObject(parms);
            //CommonObjModel commonObjModel = new CommonObjModel
            //{
            //    CompanyId = companyId,
            //    Params = serializeparms,
            //    ServerName = serverName,
            //    ApplicationIntest = AppicationIntest,
            //    MethodName = "Journal-GetNewBalanceSheet",
            //};
            //string secondarydboj = JsonConvert.SerializeObject(commonObjModel);

           // LoggingHelper.LogMessage(BeanLogConstant.ReportsReadOnlyApplicationService, secondarydboj);


            NewStatementModel finalBalanceSheetModel = new NewStatementModel();
            int Period = 0;
            Period = GetPeriodBasedonType(commonModel, Period);
            int SamePeriod = commonModel.SamePeriod ? 1 : 0;

            var lstAccountsData = Task.Run(() => _categoryService.GetAllAccountsBy_Bean_HTMLBalanceSheetSP(commonModel.CompanyId, commonModel.CompanyName, commonModel.Fromdate, (int)commonModel.Frequency, Period, SamePeriod)).Result;
            var lstleadsheet = Task.Run(() => _categoryService.GetAllAccounyTypeByCompanyId(commonModel.CompanyId).Where(c => c.Category == ControlCodeConstants.BalanceSheet).ToList()).Result;


            //KG Enhancement for clearing - 16/05/2020        
            Dictionary<long, long?> lstOfIntercoAccounts = Task.Run(() => _chartOfAccountService.GetListChartofAccounts(lstleadsheet.Where(a => a.Name == COANameConstants.Intercompany_billing || a.Name == COANameConstants.Intercompany_clearing).Select(c => c.Id).ToList(), commonModel.CompanyId, commonModel.CompanyName.Split(',').Select(long.Parse).ToList())).Result;


            //** fr dynamic colomns
            var accountName = lstAccountsData.Select(c => c.Name).FirstOrDefault();
            var ColumnList = lstAccountsData.Where(c => c.Name == accountName).OrderBy(c => c.Recorder).Select(c => c.Year).ToList();
            NewBuildColoumnsHTMLData(finalBalanceSheetModel, ColumnList, commonModel);
            lstleadsheet = lstleadsheet.OrderBy(c => c.RecOrder).ToList();


            List<string> lstStrings = new List<string>();
            lstStrings.Add(ControlCodeConstants.Assets);
            lstStrings.Add(ControlCodeConstants.Liabilities);
            lstStrings.Add(ControlCodeConstants.Equity);
            lstleadsheet = lstleadsheet.OrderBy(d => lstStrings.IndexOf(d.Class)).ThenBy(x => x.SubCategory).ThenBy(v => v.RecOrder).ToList();

            List<AccountNewModel> lstAccoutNewModel = new List<AccountNewModel>();
            int rec = 1;
            foreach (var accountType in lstleadsheet)
            {
                var lstChartOfAccounts = lstAccountsData.Where(c => c.FRPATId == accountType.FRATId).ToList();
                lstChartOfAccounts = lstChartOfAccounts.DistinctBy(c => c.FRCoaId).ToList();
                foreach (var coaAccout in lstChartOfAccounts)
                {
                    AccountNewModel accountNewModel = new AccountNewModel();
                    accountNewModel.AccountName = coaAccout.Name;
                    accountNewModel.AccountType = accountType.Name;
                    accountNewModel.Type = ControlCodeConstants.Item;
                    accountNewModel.Class = accountType.SubCategory;
                    accountNewModel.GroupType = accountType.Class;
                    accountNewModel.Recorder = rec;
                    accountNewModel.GroupHeading = accountType.SubCategory != ControlCodeConstants.Equity ? accountType.SubCategory + " " + accountType.Class : ControlCodeConstants.Equity;

                    var accounts = lstAccountsData.Where(c => c.Name == coaAccout.Name).OrderBy(c => c.Code).ToList();
                    accountNewModel.YearModels = AccountTotals(ColumnList, accounts, accountType);
                    var amount = accountNewModel.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
                    accountNewModel.IsShowZero = (amount == null || amount == 0);

                    accountNewModel.IsInterco = (accountType.Name == COANameConstants.Intercompany_billing || accountType.Name == COANameConstants.Intercompany_clearing) && lstOfIntercoAccounts.Any() ? lstOfIntercoAccounts.Any(a => a.Key == coaAccout.CoaId) : false;

                    lstAccoutNewModel.Add(accountNewModel);
                    rec++;
                }
                AccountNewModel accountTypeModel = new AccountNewModel();
                accountTypeModel.AccountName = ControlCodeConstants.Total;
                accountTypeModel.AccountType = accountType.Name;
                accountTypeModel.Type = ControlCodeConstants.Total;
                accountTypeModel.Class = accountType.SubCategory;
                accountTypeModel.GroupType = accountType.Class;
                accountTypeModel.GroupHeading = accountType.SubCategory != ControlCodeConstants.Equity ? accountType.SubCategory + " " + accountType.Class : ControlCodeConstants.Equity;
                //accountTypeModel.YearModels = AccountTypeTotalYearModels(lstAccoutNewModel, ColumnList, accountType);
                accountTypeModel.YearModels = AccountTypeTotals(ColumnList, lstAccoutNewModel, accountType);
                var amountTotal = lstAccoutNewModel.Where(c => c.AccountType == accountType.Name && c.Type == ControlCodeConstants.Item).SelectMany(c => c.YearModels).Count(x => x.Balance != null && x.Balance != 0);
                accountTypeModel.IsShowZero = amountTotal == 0;
                accountTypeModel.Recorder = rec;
                lstAccoutNewModel.Add(accountTypeModel);
                rec++;
            }

            var currentAssetsAccounts = lstAccoutNewModel.Where(c => c.GroupType == ControlCodeConstants.Assets && c.Class == ControlCodeConstants.Current && c.Type == ControlCodeConstants.Item).ToList();
            var nonCurrentAssetsAccounts = lstAccoutNewModel.Where(c => c.GroupType == ControlCodeConstants.Assets && c.Class == ControlCodeConstants.Noncurrent && c.Type == ControlCodeConstants.Item).ToList();
            var currentLibilitiesAccounts = lstAccoutNewModel.Where(c => c.GroupType == ControlCodeConstants.Liabilities && c.Class == ControlCodeConstants.Current && c.Type == ControlCodeConstants.Item).ToList();
            var nonCurrentLibilitiesAccounts = lstAccoutNewModel.Where(c => c.GroupType == ControlCodeConstants.Liabilities && c.Class == ControlCodeConstants.Noncurrent && c.Type == ControlCodeConstants.Item).ToList();
            var equityAccounts = lstAccoutNewModel.Where(c => c.GroupType == ControlCodeConstants.Equity && c.Class == ControlCodeConstants.Equity && c.Type == ControlCodeConstants.Item).ToList();



            FillTotals("Total Current Assets", currentAssetsAccounts, ControlCodeConstants.Current + " " + ControlCodeConstants.Assets, ControlCodeConstants.Assets, ControlCodeConstants.Current, ControlCodeConstants.Total, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Assets && c.Class == ControlCodeConstants.Current));
            FillTotals("Total Non-Current Assets", nonCurrentAssetsAccounts, ControlCodeConstants.Noncurrent + " " + ControlCodeConstants.Assets, ControlCodeConstants.Assets, ControlCodeConstants.Noncurrent, ControlCodeConstants.Total, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Assets));
            //total Assets

            FillTotals("Total Assets", lstAccoutNewModel.Where(c => c.Type == ControlCodeConstants.Item && c.GroupType == ControlCodeConstants.Assets).ToList(), "Total Assets", ControlCodeConstants.Assets, null, ControlCodeConstants.Total, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Assets));


            FillTotals("Total Current Liabilities", currentLibilitiesAccounts, ControlCodeConstants.Current + " " + ControlCodeConstants.Liabilities, ControlCodeConstants.Liabilities, ControlCodeConstants.Current, ControlCodeConstants.Total, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Assets) + lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Liabilities && c.Class == ControlCodeConstants.Current));
            FillTotals("Total Non-Current Liabilities", nonCurrentLibilitiesAccounts, ControlCodeConstants.Noncurrent + " " + ControlCodeConstants.Liabilities, ControlCodeConstants.Liabilities, ControlCodeConstants.Noncurrent, ControlCodeConstants.Total, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Assets) + lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Liabilities));
            //total Liabilities
            FillTotals("Total Liabilities", lstAccoutNewModel.Where(c => c.Type == ControlCodeConstants.Item && c.GroupType == ControlCodeConstants.Liabilities).ToList(), "Total Liabilities", ControlCodeConstants.Liabilities, null, ControlCodeConstants.Total, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Assets || c.GroupType == ControlCodeConstants.Liabilities));

            //Net Assets
            FillSubTotalsTotals("Net Assets", lstAccoutNewModel.Where(c => c.Type == ControlCodeConstants.Item && (c.GroupType == ControlCodeConstants.Liabilities || c.GroupType == ControlCodeConstants.Assets)).ToList(), "Net Assets", ControlCodeConstants.Assets, ControlCodeConstants.GrandTotal, ControlCodeConstants.GrandTotal, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count(c => c.GroupType == ControlCodeConstants.Liabilities || c.GroupType == ControlCodeConstants.Assets));

            FillTotals("Total Equity", equityAccounts, ControlCodeConstants.Equity, ControlCodeConstants.Equity, ControlCodeConstants.Equity, ControlCodeConstants.GrandTotal, ColumnList, lstAccoutNewModel, lstAccoutNewModel.Count());

            finalBalanceSheetModel.ListAccountNewModel = lstAccoutNewModel;

            return finalBalanceSheetModel;


        }
        private List<YearModels> AccountTypeTotalYearModels(List<AccountNewModel> lstAccoutNewModel, List<string> coloumnList, AccountType accountType)
        {
            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in coloumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = lstAccoutNewModel.Where(c => c.AccountType == accountType.Name && c.Type == ControlCodeConstants.Item).SelectMany(c => c.YearModels).ToList().Where(v => v.Balance != null && v.Year == colom).Sum(x => x.Balance);
                yearModels.Percentage = 0;
                bool changeAssetColor = false;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    decimal? assignnull = null;
                    if ((currentPeriod > 0 && PriorPeriod > 0) || (currentPeriod < 0 && PriorPeriod < 0))
                    {
                        if (currentPeriod < 0 && PriorPeriod < 0)
                            changeAssetColor = true;
                        yearModels.Percentage = PriorPeriod == 0 ? assignnull : (((currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod)) * 100) ?? 0;
                    }
                    else
                    {
                        yearModels.Percentage = assignnull;
                    }
                    currentPeriod = PriorPeriod;
                    i = 0;
                    yearModels.IsPercentage = true;
                    yearModels.FontColor = AssignColor(accountType.Class, yearModels.Percentage ?? 0, changeAssetColor);
                }
                i++;
                lstYearModels.Add(yearModels);
            }


            return lstYearModels;
        }
        private List<AccountNewModel> FillTotals(string HeadingName, List<AccountNewModel> lstAccoutNewModel, string groupHeading, string accountClass, string subCategory, string type, List<string> coloumnList, List<AccountNewModel> lstAccoutNewFinalModel,
            int IndexCount)
        {
            AccountNewModel accountTypeModel = new AccountNewModel();
            accountTypeModel.AccountName = HeadingName;
            accountTypeModel.AccountType = accountClass;
            accountTypeModel.Type = type;
            accountTypeModel.Class = subCategory;
            accountTypeModel.GroupType = accountClass;
            accountTypeModel.GroupHeading = groupHeading;

            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in coloumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                yearModels.Balance = lstAccoutNewModel.SelectMany(c => c.YearModels).ToList().Where(v => v.Year == colom).Sum(x => x.Balance) ?? 0;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    i = 0;
                    yearModels.IsPercentage = true;

                    if (PriorPeriod == 0)
                    {
                        yearModels.Percentage = null;
                        yearModels.FontColor = null;
                    }
                    else if (currentPeriod < 0 && PriorPeriod < 0)
                    {
                        var PriorPeriodValue = PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod;
                        yearModels.Percentage = ((currentPeriod * -1) - PriorPeriodValue) / PriorPeriodValue * 100;
                        yearModels.FontColor = AssignNewColor(accountClass, yearModels.Percentage);
                    }
                    else if (accountClass == "Expenses")
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColorTotal(accountClass, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColor(accountClass, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;
                lstYearModels.Add(yearModels);
            }

            accountTypeModel.YearModels = lstYearModels;
            var amountTotal = accountTypeModel.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            accountTypeModel.IsShowZero = (amountTotal == null || amountTotal == 0) ? true : false;
            lstAccoutNewFinalModel.Insert(IndexCount, accountTypeModel);
            return lstAccoutNewFinalModel;
        }
        private List<AccountNewModel> FillSubTotalsTotals(string HeadingName, List<AccountNewModel> lstAccoutNewModel, string groupHeading, string accountClass, string subCategory, string type, List<string> coloumnList, List<AccountNewModel> lstAccoutNewFinalModel, int IndexCount)
        {
            AccountNewModel accountTypeModel = new AccountNewModel();
            accountTypeModel.AccountName = HeadingName;
            accountTypeModel.AccountType = accountClass;
            accountTypeModel.Type = type;
            accountTypeModel.Class = subCategory;
            accountTypeModel.GroupType = accountClass;
            accountTypeModel.GroupHeading = groupHeading;

            List<YearModels> lstYearModels = new List<YearModels>();
            decimal? currentPeriod = 0;
            decimal? PriorPeriod = 0;
            int i = 0;
            foreach (var colom in coloumnList)
            {
                YearModels yearModels = new YearModels();
                yearModels.Year = colom;
                var assetsBalance = lstAccoutNewModel.Where(c => c.GroupType == "Assets").SelectMany(c => c.YearModels).ToList().Where(v => v.Year == colom).Sum(x => x.Balance) ?? 0;
                var liabilitiesBal = lstAccoutNewModel.Where(c => c.GroupType == "Liabilities").SelectMany(c => c.YearModels).ToList().Where(v => v.Year == colom).Sum(x => x.Balance) ?? 0;
                yearModels.Balance = assetsBalance - liabilitiesBal;
                yearModels.Percentage = 0;
                bool changeAssetColor = false;
                if (i == 0)
                    currentPeriod = yearModels.Balance;
                else if (i == 1)
                    PriorPeriod = yearModels.Balance;
                if (colom.Contains("Vs"))
                {
                    i = 0;
                    yearModels.IsPercentage = true;

                    if (PriorPeriod == 0)
                    {
                        yearModels.Percentage = null;
                        yearModels.FontColor = null;
                    }
                    else if (currentPeriod < 0 && PriorPeriod < 0)
                    {
                        var PriorPeriodValue = PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod;
                        yearModels.Percentage = ((currentPeriod * -1) - PriorPeriodValue) / PriorPeriodValue * 100;
                        yearModels.FontColor = AssignNewColor(accountClass, yearModels.Percentage);
                    }
                    else if (accountClass == "Expenses")
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColorTotal(accountClass, yearModels.Percentage ?? 0, currentPeriod, PriorPeriod);
                    }
                    else
                    {
                        yearModels.Percentage = (currentPeriod - PriorPeriod) / (PriorPeriod < 0 ? PriorPeriod * -1 : PriorPeriod) * 100;
                        yearModels.FontColor = AssignColor(accountClass, yearModels.Percentage ?? 0);
                    }
                    currentPeriod = PriorPeriod;
                }
                i++;
                lstYearModels.Add(yearModels);
            }

            accountTypeModel.YearModels = lstYearModels;
            var amountTotal = accountTypeModel.YearModels.Where(x => x.Balance != null).Sum(c => c.Balance);
            accountTypeModel.IsShowZero = (amountTotal == null || amountTotal == 0) ? true : false;
            lstAccoutNewFinalModel.Insert(IndexCount, accountTypeModel);
            return lstAccoutNewFinalModel;
        }
        private static int GetPeriodBasedonType(CommonModel commonModel, int Period)
        {
            if (commonModel.Period == ControlCodeConstants.Monthly)
                Period = 3;
            else if (commonModel.Period == ControlCodeConstants.Quarterly)
                Period = 2;
            else if (commonModel.Period == ControlCodeConstants.SemiAnnually)
                Period = 1;
            else if (commonModel.Period == ControlCodeConstants.Annually)
                Period = 0;
            return Period;
        }
        private void NewBuildColoumnsHTMLData(NewStatementModel finalBalanceSheetModel, List<string> ColumnList, CommonModel commonModel)
        {
            Dictionary<string, string> columnList = new Dictionary<string, string>();
            columnList.Add("AccountName", "");

            foreach (var item in ColumnList)
            {
                if (item.Contains("Vs"))
                    columnList.Add(item, "% Change");
                else
                    columnList.Add(item, item);
            }

            List<ColumnLsts> columns = new List<ColumnLsts>();
            foreach (var lst in columnList)
            {
                ColumnLsts column = new ColumnLsts();
                column.Column = lst.Key;

                if (lst.Value.Contains("To"))
                {
                    column.HtmlData = lst.Value.Split('o').Select(c => c).LastOrDefault().Trim();
                }
                else
                {
                    column.HtmlData = lst.Value;
                }


                if (lst.Key == "AccountName" || lst.Key == "Code")
                {
                    column.IsAmount = false;
                }
                else
                {
                    column.IsAmount = true;
                }
                columns.Add(column);
            }
            finalBalanceSheetModel.ColumnLists = columns;
            if (commonModel.Frequency != 1)
            {
                int index = 0;
                bool isFirst = true;
                List<ColumnLsts> lstClmList = new List<ColumnLsts>();
                foreach (var item in finalBalanceSheetModel.ColumnLists)
                {
                    if (item.Column.Contains("Vs"))
                    {
                        if (isFirst)
                        {
                            lstClmList.Insert(index - 2, item);
                            isFirst = false;
                        }
                        else
                            lstClmList.Insert(index - 1, item);
                    }
                    else
                        lstClmList.Add(item);
                    index++;
                }
                finalBalanceSheetModel.ColumnLists = lstClmList;
            }
        }
        private static void BuildColumnsHTMLDataNew(IncomeStatementModel incomeStatementModel, List<string> ColumnList, CommonModel commonModel)
        {
            Dictionary<string, string> columnList = new Dictionary<string, string>();
            columnList.Add("AccountName", "");

            foreach (var item in ColumnList)
            {
                if (item.Contains("Vs"))
                    columnList.Add(item, "% Change");
                else
                    columnList.Add(item, item);
            }
            List<ColumnLsts> columns = new List<ColumnLsts>();
            foreach (var lst in columnList)
            {
                ColumnLsts column = new ColumnLsts();
                column.Column = lst.Key;

                if (lst.Value.Contains("To"))
                {
                    column.HtmlData = lst.Value.Split('o').Select(c => c).LastOrDefault().Trim();
                }
                else
                {
                    column.HtmlData = lst.Value;
                }

                if (lst.Key == "AccountName" || lst.Key == "Code")
                {
                    column.IsAmount = false;
                }
                else
                {
                    column.IsAmount = true;
                }
                columns.Add(column);
            }
            incomeStatementModel.ColumnLists = columns;


            if (commonModel.Frequency != 1)
            {
                int index = 0;
                bool isFirst = true;
                List<ColumnLsts> lstClmList = new List<ColumnLsts>();
                foreach (var item in incomeStatementModel.ColumnLists)
                {
                    if (item.Column.Contains("Vs"))
                    {
                        if (isFirst)
                        {
                            lstClmList.Insert(index - 2, item);
                            isFirst = false;
                        }
                        else
                            lstClmList.Insert(index - 1, item);
                    }
                    else
                        lstClmList.Add(item);
                    index++;
                }
                incomeStatementModel.ColumnLists = lstClmList;
            }
        }


        #endregion NewBeanFinancials



        #region CommonForexService
        public decimal? GetExRateInformation(string documentCurrency, string currency, DateTime Documentdate, long CompanyId)
        {
            decimal? exchangeRate = null;
            try
            {
                string date = Documentdate.ToString("yyyy-MM-dd");

                if (documentCurrency == currency)
                    exchangeRate = 1;
                else
                {
                    //new changes
                    CommonForex commonForex = _commonForexService.GetForexyByDateAndCurrency(CompanyId, currency, documentCurrency, Convert.ToDateTime(Documentdate));
                    if (commonForex != null)
                    {
                        exchangeRate = commonForex.FromForexRate;
                    }
                    else
                    {
                        var url = "https://data.fixer.io/api/" + date + "?access_key=49a0338b2cf1c26023b2a28f719b1dd2&base=" + documentCurrency + "&symbols=" + currency;
                        AppsWorld.CommonModule.Models.CurrencyModel currencyRates = _download_serialized_json_data<AppsWorld.CommonModule.Models.CurrencyModel>(url);

                        exchangeRate = currencyRates.Rates.Where(c => c.Key == currency).Select(c => c.Value).FirstOrDefault();
                        FillCommonForexFrom(documentCurrency, Documentdate, exchangeRate, currency);

                    }
                }
                return exchangeRate ?? 1;
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(JournalConstant.JournalApplicationService, ex, ex.Message);
                throw ex;
            }
        }

        private static T _download_serialized_json_data<T>(string url) where T : new()
        {
            using (var w = new WebClient())
            {
                var json_data = string.Empty;
                try
                {
                    json_data = w.DownloadString(url);
                }
                catch (Exception) { }
                return !string.IsNullOrEmpty(json_data) ? JsonConvert.DeserializeObject<T>(json_data) : new T();
            }
        }

        private void FillCommonForexFrom(string DocumentCurrency, DateTime Documentdate, decimal? exchageRate, string BaseCurrency)
        {
            CommonForex commonForex = new CommonForex();
            commonForex.Id = Guid.NewGuid();
            commonForex.CompanyId = 0;
            commonForex.DateFrom = Convert.ToDateTime(Documentdate);
            commonForex.Dateto = commonForex.DateFrom;
            commonForex.FromForexRate = exchageRate;
            commonForex.ToForexRate = commonForex.FromForexRate;
            commonForex.FromCurrency = BaseCurrency;
            commonForex.ToCurrency = DocumentCurrency;
            commonForex.Status = RecordStatusEnum.Active;
            commonForex.Source = "Fixer";
            commonForex.UserCreated = "System";
            commonForex.CreatedDate = DateTime.UtcNow;
            commonForex.ObjectState = ObjectState.Added;
            _commonForexService.Insert(commonForex);

        }
        #endregion

    }
}






